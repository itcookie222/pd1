var otpJSTemplate = "/DesktopModules/MVC/VIB.MVC.Common/Template/OTPJSTemplate2.html?v=1";
var commonJSTemplate = "/DesktopModules/MVC/VIB.MVC.Common/Template/CommonJSTemplate.html?v=1";

var EXTFILE = 'pdf, jpg, jpeg, png, bmp, xls, xlsx, doc, docx';
var REGEX_VALIDSOHOADON = /^[a-zA-Z0-9à|á|ạ|ả|ã|â|ầ|ấ|ậ|ẩ|ẫ|ă|ằ|ắ|ặ|ẳ|ẵ|đ|ỳ|ý|ỵ|ỷ|ỹ|ù|ú|ụ|ủ|ũ|ư|ừ|ứ|ự|ử|ữ|ò|ó|ọ|ỏ|õ|ô|ồ|ố|ộ|ổ|ỗ|ơ|ờ|ớ|ợ|ở|ỡ|è|é|ẹ|ẻ|ẽ|ê|ề|ế|ệ|ể|ễ|ì|í|ị|ỉ|ĩ\s.\-+,_\/\\:\(\)#;]+$/;
var REGEX_VALIDNAME =
    /^[a-zA-Z0-9à|á|ạ|ả|ã|â|ầ|ấ|ậ|ẩ|ẫ|ă|ằ|ắ|ặ|ẳ|ẵ|đ|ỳ|ý|ỵ|ỷ|ỹ|ù|ú|ụ|ủ|ũ|ư|ừ|ứ|ự|ử|ữ|ò|ó|ọ|ỏ|õ|ô|ồ|ố|ộ|ổ|ỗ|ơ|ờ|ớ|ợ|ở|ỡ|è|é|ẹ|ẻ|ẽ|ê|ề|ế|ệ|ể|ễ|ì|í|ị|ỉ|ĩ\s]+$/;
var REGEX_NUMBERANDCHARACTER = /^(?=.*[0-9])(?=.*[a-zA-Z])[a-zA-Z0-9]+$/;

var SubTab = {
    Account: "1",
    Phone: "2",
    CardNumber: "3",
    IBA: "4",
    Bulk: "5"
}
var bendId = "";

var transferOther = {
    activeTab: null,
    benId: null,
    moduleStr: null,
    exceptionPurposeCodes: ['RB16'],
    isClosePopupDefault: true,
    Init: function (moduleId) {
        var deferred = $.Deferred();
        $.when(
            $.get(otpJSTemplate, function (templates) {
                $('body').append(templates);
            }),
            $.get(commonJSTemplate, function (templates) {
                $('body').append(templates);
            })
        ).then(function () {
            transferService.Init(moduleId);
            transferOther.benId = Util.GetQueryString('id');
            transferOther.moduleStr = Util.GetQueryString('module');
            var renderData = {
                IsBenTransfer: transferOther.benId && transferOther.moduleStr
            }
            $("#transferOtherBankTabTemplate").tmpl(renderData).appendTo($("#rightContent"));
            if (transferOther.benId && transferOther.moduleStr === BenModule.SMLACCT) {
                transferOther.ShowTransferViaAccount();
            } else if (transferOther.benId && transferOther.moduleStr === BenModule.SMLCARD) {
                transferOther.ShowTransferViaCardNumber();
            } else if (transferOther.benId && transferOther.moduleStr === BenModule.IBA) {
                transferOther.ShowTransferViaIBA();
            } else {
                transferOther.ShowTransferViaAccount();
            }

            $("#btnNext").click(function () {
                if (rbSkinPageV2.WarningRegisterOnline()) {
                    return false;
                }
                switch (transferOther.activeTab) {
                    case SubTab.Account:
                        if (transferViaLBA.Step === 1) {
                            transferViaLBA.ValidBankName();
                            if (!transferViaLBA.isBenTransfer) {
                                if (!transferViaLBA.IsFastTransfer()) {
                                    if (transferViaLBA.isOtherBank) {
                                        transferViaLBA.ValidOtherBankName();
                                    }
                                    if (transferViaLBA.ValidStateGroup()) {
                                        if (transferViaLBA.ValidBranchGroup()) {
                                            var v1 = transferViaLBA.ValidToAcctNo("txtToAcctNo");
                                            var v2 = transferViaLBA.ValidAccountName();
                                            var v3 = transferViaLBA.ValidAmount();
                                            if (!v1 || !v2 || !v3) {
                                                return false;
                                            }
                                        } else {
                                            return false;
                                        }
                                    } else {
                                        return false;
                                    }
                                } else {
                                    var v1 = transferViaLBA.ValidToAcctNo("txtAcctNo");
                                    var v2 = transferViaLBA.ValidAmount();
                                    if (!v1 || !v2) {
                                        return false;
                                    }
                                }
                            }
                        }

                        if (transferViaLBA.Step === 2) {
                            transferViaLBA.Submit();
                        } else if (transferViaLBA.Step === 3) {
                            window.location.href = VIB.LocalizeString.URL_TRANSFER_BENLIST;
                        } else {
                            transferViaLBA.Continue();
                        }
                        Util.ScrollTop();
                        break;
                    case SubTab.Phone:
                        if (transferViaMobile.Step === 1) {
                            transferViaMobile.goToStep2();
                        };
                        if (transferViaMobile.Step === 2) {
                            transferViaMobile.goToStep3();
                        };
                        if (transferViaMobile.Step === 3) {
                            window.location.href = VIB.LocalizeString.URL_TRANSFER_BENLIST;
                        };
                        Util.ScrollTop();
                        break;
                    case SubTab.CardNumber:
                        if (transferNapasCard.Step === 1) {
                            transferNapasCard.Continue();
                        };
                        if (transferNapasCard.Step === 2) {
                            transferNapasCard.Submit();
                        };
                        if (transferNapasCard.Step === 3) {
                            window.location.href = VIB.LocalizeString.URL_TRANSFER_BENLIST;
                        }
                        Util.ScrollTop();
                        break;
                    case SubTab.IBA:
                        transferIBA.OnContinueClicked();
                        break;
                    case SubTab.Bulk:
                        break;
                    default:
                }
            });
            $("#btnPrev").click(function () {
                switch (transferOther.activeTab) {
                    case SubTab.Account:
                        if (transferViaLBA.Step === 1) {
                            window.location.href = VIB.LocalizeString.URL_TRANSFER_BENLIST;
                            return;
                        }
                        if (transferViaLBA.Step === 2) {
                            transferViaLBA.Back();
                            if (!transferViaLBA.isBenTransfer) {
                                $(this).hide();
                            }
                        }
                        break;
                    case SubTab.Phone:
                        if (transferViaMobile.Step === 1) {
                            transferViaMobile.goBack();
                        };
                        if (transferViaMobile.Step === 2) {
                            transferViaMobile.goToStep1();
                        };
                        break;
                    case SubTab.CardNumber:
                        if (transferNapasCard.Step === 1) {
                            window.location.href = VIB.LocalizeString.URL_TRANSFER_BENLIST;
                        }
                        if (transferNapasCard.Step === 2) {
                            transferNapasCard.Back();
                        }
                        break;
                    case SubTab.IBA:
                        if (transferIBA.currentStep === 4) {
                            window.location.href = VIB.LocalizeString.URL_TRANSFER_BENLIST;
                            return;
                        }
                        transferOther.ShowHideConfirmationContent();
                        transferIBA.currentStep = 4;
                        $("#tooltip").show();
                        break;
                    case SubTab.Bulk:
                        break;
                    default:
                }
                scrollViewport();
            });
            $("#btnComplete").click(function () {
                window.location.href = VIB.LocalizeString.URL_TRANSFER_BENLIST;
            });

            // Check user dang ky online va co HM = 0
            if (rbSkinPageV2.WarningRegisterOnline()) {
                // disable all control
                disableControl();
                return;
            }
            deferred.resolve();
        });
        return deferred.promise();
    },
    ShowTransferViaAccount: function () {
        transferOther.ClearContentForm();
        transferOther.activeTab = SubTab.Account;
        $("#transferViaAccountTemplate").tmpl().appendTo($("#transferDetail"));
        Util.InitInputTable();
        Util.InitDropdownListControl();
        transferViaLBA.LBABankList = [];
        var bank = transferService.GetLBABankList();
        $.when(bank).done(function (bankResult) {
            if (bankResult.STATUSCODE === StatusCode.Successed) {
                bankResult.DATA.forEach(function (element) {
                    var temp = {};
                    temp.Code = element.Code;
                    temp.id = element.ID;
                    temp.Name = element.ID + "-" + element.Name;
                    temp.orgname = element.Name;
                    temp.fast = element.Fast;
                    transferViaLBA.LBABankList.push(temp);
                });
            }
            var temp = {};
            temp.Code = "OTHER";
            temp.id = "0";
            temp.Name = VIB.LocalizeString.Other;
            temp.fast = "N";
            transferViaLBA.LBABankList.push(temp);
            var source = [];
            transferViaLBA.LBABankList.map(function (elm) {
                source.push({
                    id: elm.Code,
                    name: elm.Name,
                });
            });
            if (transferOther.benId) {
                $("#searchPannel").hide();
                transferViaLBA.isBenTransfer = true;
                transferService.GetBenDetail(transferOther.benId).done(function (result) {
                    var selectedBank = transferViaLBA.LBABankList.filter(function (i) { return i.Code == result.DATA.bankcode })[0];
                    if (selectedBank && selectedBank.fast === "Y") {
                        transferViaLBA.isFastBankTransfer = true;
                    }
                    transferViaLBA.formModel.selectedBank.code = selectedBank.Code;
                    transferViaLBA.formModel.selectedBank.id = selectedBank.id;
                    transferViaLBA.formModel.selectedBank.name = selectedBank.Name;
                    transferViaLBA.formModel.selectedBank.fast = selectedBank.fast;

                    transferViaLBA.benAcctName = result.DATA.acctname;
                    transferViaLBA.benAcctNo = result.DATA.acctno;
                    transferViaLBA.benBankName = result.DATA.bankname;
                    transferViaLBA.benBankCode = result.DATA.bankcode;
                    transferViaLBA.benBankBranchCode = result.DATA.bankbranchcode;
                    transferViaLBA.benBankBranchNames = result.DATA.bankbranchname;
                    transferViaLBA.benBankStateCode = result.DATA.bankstatecode;
                    transferViaLBA.HandleReceivedBankSelected(transferViaLBA.isFastBankTransfer ? "Y" : "N");
                });
            } else {
                autocomplete2($("#receivedBank")[0], source, function (selectedId) {
                    transferViaLBA.OnBankSelected(selectedId);
                });
            }

            $('input[type=radio][name=transfer-type]').change(function () {
                var isFastTransferString = $(this).attr("data-value");
                transferViaLBA.HandleReceivedBankSelected(isFastTransferString);
                transferViaLBA.RegetAcctTranfer(isFastTransferString);
                if (isFastTransferString === "N" && transferOther.moduleStr === "LBA") {
                    $('.form-group.b-location').addClass('disabled');
                }
            });
        });
        transferViaLBA.arrAccountTransferLBANapas = [];

        // Check user dang ky online va co HM = 0
        if (rbSkinPageV2.WarningRegisterOnline()) {
            // disable all control
            disableControl();
            return;
        }
        scrollViewport();
    },
    ShowTransferViaPhone: function () {
        transferOther.ClearContentForm();
        transferOther.activeTab = SubTab.Phone;
        $("#transferViaPhoneTemplate").tmpl().appendTo($("#transferDetail"));
        transferViaMobile.showOrHideStep(1, true);
        transferViaMobile.NavigationDisplayControl(1);
        transferViaMobile.initFormAction();

        scrollViewport();
        // Check user dang ky online va co HM = 0
        if (rbSkinPageV2.WarningRegisterOnline()) {
            // disable all control
            disableControl();
            return;
        }
    },
    ShowTransferViaCardNumber: function () {
        transferNapasCard.fromBen = (transferOther.benId != null && transferOther.moduleStr != null);
        transferOther.ClearContentForm();
        transferOther.activeTab = SubTab.CardNumber;
        var renderData = {
            DataPopup: [],
        };

        if (Util.GetCurrentLang() === Lang_EN) {
            renderData.DataPopup = transferNapasCard.DataPopupEN;
        } else {
            renderData.DataPopup = transferNapasCard.DataPopup;
        }
        $("#transferViaCardTemplate").tmpl(renderData).appendTo($("#transferDetail"));

        $(".click-form-group").click(function () {
            transferNapasCard.OnClick(this);
        });
        $('#btnNext').show();

        if (transferNapasCard.fromBen) {
            transferService.GetNapasCardAccount('', true, transferOther.benId).then(function (response) {
                transferService.GetAccountForTransfer(Module.NAPASCARD).done(function (accountForTransferResult) {
                    if (accountForTransferResult.STATUSCODE === StatusCode.Successed) {
                        $("#transferViaNapasCardDetail").show();
                        $('#inputCardNo').hide();
                        $('#inputCardNoDisabled').show();
                        $("#btnPrev").show();
                        scrollViewport();
                        if (response.STATUSCODE !== StatusCode.Successed) {
                            $('#txtDescription').parent().hide();
                            Util.ShowErrorMessage(response.MESSAGE);
                            return;
                        }

                        transferNapasCard.InitFormEvent();
                        // transferNapasCard.InitTxtNoEvent();
                        transferNapasCard.Step = 1;

                        var accNo = response.DATA.CardNo;
                        $("#txtNo").val(accNo).change();
                        $("#toAccNoDisabled").text(accNo);
                        $("#txtNo").blur();
                        $("#toAcctName").val(response.DATA.CardName);
                        $("#toAcctName").html(response.DATA.CardName);
                        $('#addben').closest('.row').hide();

                        transferNapasCard.AccountList = accountForTransferResult.DATA;
                        $("#fromAccGroup").empty();
                        Util.InitAccountListControl("fromAcc", accountForTransferResult, "fromAccGroup");
                        $("#fromAccGroup .item1").first().click();
                        transferNapasCard.InitDetailFormEvent();
                        transferNapasCard.InittransferViaNapasCardEvent();
                    } else {
                        Util.ShowErrorMessage(accountForTransferResult.MESSAGE);
                    }
                });
            }).catch(function (err) {
                hideLoadingMask();
                Util.ShowInfoMessage(err.MESSAGE);
            });

        } else {
            transferNapasCard.InitTxtNoEvent();
        }

        transferNapasCard.InitFormEvent();
        $('.btn-footer.btn-footer-fixed').show();
        $('#btnPrev').hide();
        scrollViewport();
        // Check user dang ky online va co HM = 0
        if (rbSkinPageV2.WarningRegisterOnline()) {
            // disable all control
            disableControl();
            return;
        }
    },
    ShowTransferViaIBA: function () {
        transferOther.ClearContentForm();
        transferOther.activeTab = SubTab.IBA;
        transferIBA.currentStep = 1;
        transferService.ClearIBASession();
        $("#tooltipTextTitle").html(VIB.LocalizeString.W_GHICHU_V2);
        $("#tooltipText").html(VIB.LocalizeString.W_DINHDANGCHUNGTU);
        scrollViewport();
        if (transferOther.benId && transferOther.moduleStr) {
            transferIBA.ShowTransferFromBen();
            $("#tooltip").show();
            return false;
        }

        var config = transferService.GetConfig();
        var country = transferService.GetCountry();
        $.when(config, country).done(function (configResult, countryResult) {
            if (countryResult.STATUSCODE === StatusCode.Successed) {
                transferIBA.IBACountry = countryResult.DATA;
            }

            $("#transferViaIBATemplate").tmpl(configResult).appendTo($("#transferDetail"));
            var source = [];
            transferIBA.IBACountry.map(function (elm) {
                source.push({
                    id: elm.code,
                    name: elm.name,
                });
            });
            autocomplete2($("#country")[0], source,
                function (selectedId) {
                    transferIBA.OnCountrySelected(selectedId);
                });
            transferIBA.InitControlEvent();
            transferIBA.Documents = configResult.DATA.DOCUMENT;

            // Check user dang ky online va co HM = 0
            if (rbSkinPageV2.WarningRegisterOnline()) {
                // disable all control
                disableControl();
                return;
            }
        });
    },
    ShowTransferViaBulk: function () {
        var renderData = {};
        addRowListData = [];
        transferOther.ClearContentForm();
        transferOther.activeTab = SubTab.Bulk;
        transferService.GetEbankLimit().done(function (res) {
            if (res.STATUSCODE === StatusCode.Successed) {
                renderData.EbankLimit = res.DATA;
                transferService.GetAccountForTransfer("LBABULK").done(function (accountForTransferResult) {
                    if (accountForTransferResult.STATUSCODE === StatusCode.Successed) {
                        renderData.LocalizeString = VIB.LocalizeString;
                        // $("#transferViaLBABulkTemplate").tmpl(renderData).appendTo($("#transferLBABulkContent"));
                        $("#transferViaBulkTemplate").tmpl(renderData).appendTo($("#transferDetail"));
                        $("#popupAdd").html("");
                        $("#popupAddTemplate").tmpl(renderData).appendTo($("#popupAdd"));
                        var bank = transferService.GetLBABankList();
                        $.when(bank).done(function (bankResult) {
                            if (bankResult.STATUSCODE === StatusCode.Successed) {
                                transferLBABulk.BulkBankList = bankResult.DATA;
                            }
                            var temp = {};
                            temp.Code = "OTHER";
                            temp.id = "0";
                            temp.Name = VIB.LocalizeString.Other;
                            temp.Fast = "N";
                            transferLBABulk.BulkBankList.push(temp);
                            var source = [];
                            transferLBABulk.BulkBankList.map(function (elm) {
                                source.push({
                                    id: elm.Code,
                                    name: elm.Name,
                                });
                            });
                            autocomplete2($("#receivedBankBulk")[0], source, function (selectedId) {
                                transferLBABulk.OnBankSelected(selectedId);
                            });


                        });
                        transferLBABulk.arrAccountTransferLBANapas = [];

                        var country = transferService.GetLBAStateList();
                        $.when(country).done(function (countryResult) {
                            if (countryResult.STATUSCODE === StatusCode.Successed) {
                                transferLBABulk.BulkStateList = countryResult.DATA;
                            }

                        });

                        Util.InitAccountListControl("fromAcc", accountForTransferResult, "fromAccGroup");
                        $("#fromAccGroup .list .item1").first().click();
                        $(".vibbulk").css("display", "none");
                        scrollViewport();
                        slidePanel();
                        eventBulkVIB();

                    } else {
                        Util.ShowErrorMessage(accountForTransferResult.MESSAGE);
                    }
                });
            } else {
                Util.ShowErrorMessage(res.MESSAGE);
            }
        });
        // Check user dang ky online va co HM = 0
        if (rbSkinPageV2.WarningRegisterOnline()) {
            // disable all control
            disableControl();
            return;
        }

    },
    ClearContentForm: function () {
        $("#transferDetail").empty();
        $("#confirmationContent").hide().empty();
        $("#tooltip").hide();
        $(".vibbulk").show();
        clearAccountForTransferData();
    },
    ShowHideConfirmationContent: function (isDisplay) {
        if (isDisplay) {
            $(".input-session").hide();
            $("#leftContent").hide();
            $(".verify-section").show();
            $("#btnPrev").show();
        } else {
            $(".input-session").show();
            $("#leftContent").show();
            $(".verify-section").hide();
            if (!transferOther.benId) {
                $("#btnPrev").hide();
            }
        }
    }
}

var transferIBA = {
    IBACountry: [],
    Documents: [],
    formModel: {
        selectedCountry: {
            countryCode: "",
            bankType: "CODE",
            bankTypeMid: ""
        },
        selectedBank: {
            bankId: "",
            name: "",
            bankIdMid: "",
            nameMid: "",
        },
        selectedPurposeTransfer: {
            value: "",
            requirevisa: "",
            requirepassport: "",
            limittype: "",
        },
        selectedAccountTransfer: null,
        selectedCCY: null,
        selectedCCYDisplay: null,
        selectedDocument: {}
    },
    hasOldDoc: false,
    fileUploadQueue: [],
    isValidSwiftCode: null,
    isValidSwiftCodeMid: null,
    currentStep: 1,
    ShowTransferFromBen: function () {
        var config = transferService.GetConfig();
        var country = transferService.GetCountry();
        var benInfo = transferService.GetIBABenInfo(transferOther.benId);
        var acctForTransfer = transferService.GetAccountForTransfer(Module.IBA);
        $.when(config, country, benInfo, acctForTransfer).done(function (configResult, countryResult, benInfoResult, acctForTransferResult) {
            if (countryResult.STATUSCODE === StatusCode.Successed) {
                transferIBA.IBACountry = countryResult.DATA;
            }
            transferIBA.formModel.selectedPurposeTransfer = configResult.DATA.PURPOSECODE.filter(function (elm) { return elm.value === benInfoResult.DATA.purpose })[0] || null;
            transferIBA.Documents = configResult.DATA.DOCUMENT;

            var transferObj = {
                BendId: transferOther.benId,
                Config: configResult.DATA,
                DATA: benInfoResult.DATA,
            }
            transferObj.DATA.purposeStr = transferIBA.formModel.selectedPurposeTransfer && transferIBA.formModel.selectedPurposeTransfer.name;
            transferIBA.formModel.bsb = benInfoResult.DATA.bsb;
            transferIBA.formModel.denSTKStr = benInfoResult.DATA.acctname + '-' + benInfoResult.DATA.acctno + '-' + (benInfoResult.DATA.address || '');
            transferIBA.formModel.iban = benInfoResult.DATA.iban;
            transferIBA.formModel.nguoiNhan = benInfoResult.DATA.acctname;
            transferIBA.formModel.selectedBank = {
                bankId: benInfoResult.DATA.bankcode || '-1',
                bankIdMid: benInfoResult.DATA.interbankcode || '-1',
                name: benInfoResult.DATA.bankname,
                nameMid: benInfoResult.DATA.interbranchname,
                other: {
                    branch: benInfoResult.DATA.branchname || '',
                    city: benInfoResult.DATA.state || '',
                    name: benInfoResult.DATA.bankname || ''
                },
                otherMid: {
                    branch: benInfoResult.DATA.interbranchname,
                    city: benInfoResult.DATA.interstate,
                    name: benInfoResult.DATA.interbankname
                }
            }

            transferIBA.formModel.swiftCodeBankName = benInfoResult.DATA.swift + '-' + benInfoResult.DATA.bankname;
            transferIBA.formModel.swiftCodeBankNameMid = benInfoResult.DATA.interswift + '-' + benInfoResult.DATA.interbankname;
            var countries = countryResult.DATA;
            var selectCountry = countries.filter(function (item) {
                return item.code === benInfoResult.DATA.countrycode;
            })[0];
            transferIBA.formModel.selectedCountry = {
                bankType: (benInfoResult.DATA.swift && benInfoResult.DATA.swift != '') ? "CODE" : "NAME",
                countryCode: benInfoResult.DATA.countrycode,
                countryName: benInfoResult.DATA.country,
                midBankType: benInfoResult.DATA.hasinterbank ? (benInfoResult.DATA.interswift ? "CODE" : "NAME") : '',
                ibavisaexemption: selectCountry.ibavisaexemption
            }
            transferObj.selectedPurposeTransfer = transferIBA.formModel.selectedPurposeTransfer;
            transferObj.ibavisaexemption = selectCountry.ibavisaexemption;
            transferObj.DATA_COUNTRY = transferIBA.IBACountry.find(function (x) {
                return x.code === benInfoResult.DATA.countrycode
            })

            $('#transferViaIBAFromBenTemplate').tmpl(transferObj).appendTo($('#transferDetail'));
            if (transferIBA.formModel.selectedPurposeTransfer.limittype != "INVOICE") {
                $('#sessionInvoice').hide();
            } else {
                $('#sessionInvoice').show();
            }
            $('#invoice').val("");
            transferIBA.InitControlEvent();
            Util.InitInputTable();
            Util.InitAccountListControl("fromAcc", acctForTransferResult, "fromAccGroup");
            $('#fromAcc .item1').on('click', function () {
                transferIBA.formModel.selectedAccountTransfer = {
                    value: $(this).attr('data-value'),
                    text: $(this).attr('data-display-text')
                };

                transferIBA.ShowExchangeRate();
            });
            $('#fromAcc .item1').first().click();
            $('#listDocument .item1').first().click();
            if (transferOther.exceptionPurposeCodes.indexOf(transferIBA.formModel.selectedPurposeTransfer.value) == -1) {
                $("#addBenBlock").hide();
            }
            
            transferIBA.currentStep = 4;
            scrollViewport();
        });
    },
    InitControlEvent: function () {
        Util.InitDropdownListControl();
        $('#purposeCode .item1').on('click', function () {
            $(this).parent().find('.item1').removeClass('selected');
            var $dropParent = $(this).addClass('selected').parent().parent();
            $dropParent.removeClass('open').children('.caption').text($(this).text());
            $(this).parents().children('.formLabel').addClass('formTop');

            var purposeCode = $(this).attr('data-value');
            if (transferIBA.formModel.selectedPurposeTransfer.value && transferIBA.formModel.selectedPurposeTransfer.value !== purposeCode) {
                // TODO:
                //transferViaIBA.removeFile({ type: 'ALL' });
                //fileUploadQueue = [];
            }
            
            transferIBA.formModel.selectedPurposeTransfer.value = purposeCode;
            if (transferOther.exceptionPurposeCodes.indexOf(transferIBA.formModel.selectedPurposeTransfer.value) > -1) {
                if ($("#addBenBlock").length == 0) {
                    var renderData = {
                        documents: []
                    }
                    $('#documentTemplate').tmpl(renderData).appendTo('#documentSession');
                }
            }
            transferIBA.formModel.selectedPurposeTransfer.requirevisa = $(this).attr('data-requirevisa').toLocaleString() === "true";
            transferIBA.formModel.selectedPurposeTransfer.requirepassport = $(this).attr('data-requirepassport').toLocaleString() === "true";
            transferIBA.formModel.selectedPurposeTransfer.limittype = $(this).attr('data-limittype');
            transferIBA.formModel.selectedPurposeTransfer.document = $(this).attr('data-document').length > 0 ? $(this).attr('data-document').split(",") : [];
            transferIBA.formModel.selectedPurposeTransfer.documentrequireexpireddate = $(this).attr('data-documentrequireexpireddate').split(";");
            transferIBA.formModel.selectedPurposeTransfer.name = $(this).attr('data-name');

            if (transferIBA.formModel.selectedPurposeTransfer.requirepassport) {
                $('#sessionPassport').show();
            } else {
                $('#sessionPassport').hide();
            }

            if (transferIBA.formModel.selectedPurposeTransfer.requirevisa && !transferIBA.formModel.selectedCountry.ibavisaexemption) {
                $('#sessionVisa').show();
            } else {
                $('#sessionVisa').hide();
            }

            if (transferIBA.formModel.selectedPurposeTransfer.limittype != "INVOICE") {
                $('#sessionInvoice').hide();
            } else {
                $('#sessionInvoice').show();
            }
            $('#invoice').val("");
            transferIBA.formModel.selectedDocument.type = '';
            if (transferIBA.ValidPurposeCode()) {
                transferIBA.OnContinueClicked(true);
            }
            $('.right-content').css('height', 'auto');
        });

        $('#ccy .item1').on('click', function () {
            $(this).parent().find('.item1').removeClass('selected');
            var $dropParent = $(this).addClass('selected').parent().parent();
            $dropParent.removeClass('open').children('.caption').text($(this).text());
            $(this).parents().children('.formLabel').addClass('formTop');

            transferIBA.formModel.selectedCCY = $(this).attr('data-value');
            // transferIBA.formModel.selectedCCYDisplay = $(this).attr('data-display');

            transferIBA.ShowExchangeRate();
            $('.right-content').css('height', 'auto');
            if (transferIBA.ValidCCY()) {
                transferIBA.OnContinueClicked(true);
            }
        });

        $('#feeSide .item1').on('click', function () {
            $(this).parent().find('.item1').removeClass('selected');
            var $dropParent = $(this).addClass('selected').parent().parent();
            $dropParent.removeClass('open').children('.caption').text($(this).text());
            $(this).parents().children('.formLabel').addClass('formTop');

            transferIBA.formModel.selectedFee = $(this).attr('data-value');

            transferIBA.ShowExchangeRate();
            $('.right-content').css('height', 'auto');
            if (transferIBA.ValidFee()) {
                transferIBA.OnContinueClicked(true);
            }
        });

        Util.SetAmountFormat('amount', "USD");

        $("#amount").on("blur", function () {
            transferIBA.ShowExchangeRate();
        });

        $('input.datepicker-vs3').each(function () {
            var $thisElem = $(this);
            var $container = $(this).parents('.form-group');
            var date = new Date();
            date.setDate(date.getDate());
            $thisElem.datepicker({
                orientation: "top",
                format: "dd/mm/yyyy",
                startDate: date,
                autoclose: true,
                todayHighlight: true,
                container: $container,
                weekStart: 1
            }).on('show', function (e) {
                var datepick = $('.datepicker');
                if (datepick.height() > 0) {
                    DateHeightViewPort(datepick);
                }
            }).on('hide', function (ev) {
                $('.right-content').attr("style", "");
            });

        });

        $('#listDocument > .item1').on('click', function () {
            $(this).parent().find('.item1').removeClass('selected');
            var $dropParent = $(this).addClass('selected').parent().parent();
            $dropParent.removeClass('open').children('.caption').text($(this).text());
            $(this).parents().children('.formLabel').addClass('formTop');

            transferIBA.LoadDocument($(this).attr('data-value'));
            transferIBA.formModel.selectedDocument.type = $(this).attr('data-value');
            if (transferOther.benId && transferOther.exceptionPurposeCodes.indexOf(transferIBA.formModel.selectedPurposeTransfer.value) == -1) {
                $("#addBenBlock").hide();
            }
            $('.right-content').css('height', 'auto');
        });
    },
    OnCountrySelected: function (selectedId) {
        var selectedCountry = transferIBA.IBACountry.filter(function (item) { return item.code === selectedId })[0];
        if (!selectedCountry) {
            return;
        }
        transferIBA.formModel.selectedCountry.countryCode = selectedCountry.code;
        transferIBA.formModel.selectedCountry.countryName = selectedCountry.name;
        transferIBA.formModel.selectedCountry.ibarequirebsb = selectedCountry.ibarequirebsb;
        transferIBA.formModel.selectedCountry.ibarequireiban = selectedCountry.ibarequireiban;
        transferIBA.formModel.selectedCountry.ibavisaexemption = selectedCountry.ibavisaexemption;
        transferIBA.formModel.selectedCountry.ibaalwayrequireiban = selectedCountry.ibaalwayrequireiban;

        transferIBA.formModel.selectedCountry.bankTypeMid = null;
        $(".country-search-result").show();
        $("#checkBankCode").click();

        if (transferIBA.formModel.selectedCountry.ibarequirebsb) {
            $('#bsbRow').show();
        } else {
            $('#bsbRow').hide();
        }

        if (transferIBA.formModel.selectedCountry.ibarequireiban) {
            $('#ibanRow').show();
        } else {
            $('#ibanRow').hide();
        }
        Util.InitInputTable();
        transferIBA.ValidCountry();
    },
    OnCheckedBankNameChecked: function (isMidBank, bankNameEl) {
        if (!isMidBank) {
            transferIBA.formModel.selectedCountry.bankType = "NAME";
            transferIBA.formModel.selectedBank.bankId = "";
        } else {
            transferIBA.formModel.selectedCountry.bankTypeMid = "NAME";
            transferIBA.formModel.selectedBank.bankIdMid = "";
        }
        clearCheckedIBABankNameBankCode(isMidBank);
        if (transferIBA.formModel.selectedCountry.countryCode) {
            transferService.GetSwift("", transferIBA.formModel.selectedCountry.countryCode).done(function (listBankResult) {
                    listBankResult.DATA.push({
                        bankid: '-1',
                        name: VIB.LocalizeString.OTHERBANK
                    });
                    var source = [];
                    listBankResult.DATA.map(function (elm) {
                        source.push({
                            id: elm.bankid,
                            name: elm.name.replace(/(\r\n|\n|\r)/gm, " "),
                            bankId: elm.bankid
                        });
                    });

                autocomplete2($("#" + bankNameEl)[0], source, function (selectedId) {
                            if (isMidBank) {
                                transferIBA.formModel.selectedBank.bankIdMid = selectedId;
                                transferIBA.formModel.selectedBank.nameMid = $("#" + bankNameEl).val();
                                if (Number(selectedId) === -1) {
                                    $(".mid-search-result-other").show();
                                } else {
                                    $(".mid-search-result-other").hide();
                                }
                                transferIBA.ValidSwiftCodeMid();
                            } else {
                                transferIBA.formModel.selectedBank.bankId = selectedId;
                                transferIBA.formModel.selectedBank.name = $("#" + bankNameEl).val();
                                if (Number(selectedId) === -1) {
                                    $(".search-result-other").show();
                                } else {
                                    $(".search-result-other").hide();
                                }
                        if (transferIBA.ValidSwiftCode()) {
                            transferIBA.OnContinueClicked(true);
                        }
                            }
                        });
                });
        }
    },
    OnCheckedBankCodeChecked: function (isMidBank) {
        if (!isMidBank) {
            transferIBA.formModel.selectedCountry.bankType = "CODE";
        } else {
            transferIBA.formModel.selectedCountry.bankTypeMid = "CODE";
        }
        clearCheckedIBABankNameBankCode(isMidBank);
    },
    OnSwiftCodeBlur: function (el, isMidBank) {
        var value = $(el).val();
        if (!value) {
            return;
        }
        if (value.length !== 11) {
            if (isMidBank) {
                Util.SetFieldErrorMessage("swiftCodeMid", VIB.LocalizeString.ERRMASWIFTKHONGDUNG);
                transferIBA.isValidSwiftCodeMid = false;
            } else {
                Util.SetFieldErrorMessage("swiftCode", VIB.LocalizeString.ERRMASWIFTKHONGDUNG);
                transferIBA.isValidSwiftCode = false;
            }
            return;
        }
        transferService.GetSwift(value, "").then(function (swiftResult) {
            if (swiftResult.DATA == null) {
                if (isMidBank) {
                    Util.SetFieldErrorMessage("swiftCodeMid", VIB.LocalizeString.ERRMASWIFTKHONGDUNG);
                } else {
                    Util.SetFieldErrorMessage("swiftCode", VIB.LocalizeString.ERRMASWIFTKHONGDUNG);
                }
            } else {
                $(el).val(swiftResult.DATA[0].bankid + "-" + swiftResult.DATA[0].name);
                if (isMidBank) {
                    transferIBA.formModel.selectedCountry.bankTypeMid = "CODE";
                    transferIBA.isValidSwiftCodeMid = true;
                    transferIBA.formModel.swiftCodeMid = swiftResult.DATA[0].bankid;
                    transferIBA.formModel.swiftCodeBankNameMid = swiftResult.DATA[0].bankid + "-" + swiftResult.DATA[0].name;
                    transferIBA.ValidSwiftCodeMid();
                } else {
                    transferIBA.isValidSwiftCode = true;
                    transferIBA.formModel.swiftCode = swiftResult.DATA[0].bankid;
                    transferIBA.formModel.swiftCodeBankName = swiftResult.DATA[0].bankid + "-" + swiftResult.DATA[0].name;
                    transferIBA.ValidSwiftCode();
                }
                transferIBA.OnContinueClicked(true);
            }
        });
    },
    ShowExchangeRate: function () {
        var amount = $('#amount').autoNumeric('get');
        if (!transferIBA.formModel.selectedAccountTransfer || !transferIBA.formModel.selectedCCY || !amount || !transferIBA.formModel.selectedFee) {
            return;
        }

        transferService.CalcFee(transferIBA.formModel.selectedAccountTransfer.value, transferIBA.formModel.selectedCCY, amount, transferIBA.formModel.selectedFee)
            .then(function (res) {
                $('#exchangeAmount').html(res.DATA.convert);
                $('#exchangeRate').html(res.DATA.exchangerate);
                $('#exchangeFee').html(res.DATA.fee);
                $('#exchangeFee2').html(res.DATA.fee2);
                $('#exchangeTotal').html(res.DATA.totalfee);
                $('#exchangeRateContent').show();
                Util.SetFieldErrorMessage("amount");
            }).catch(function (err) {
                Util.SetFieldErrorMessage("amount", err.MESSAGE);
                $('#exchangeRateContent').hide();
            });
    },
    LoadDocument: function (type) {
        $("#documentSession").empty();
        Util.SetFieldErrorMessage("listDocument");
        if (type === "OLD") {
            transferService.OldDocument(transferIBA.formModel.selectedPurposeTransfer.value, $('#passport').val(), $('#invoice').val()).then(function (res) {
                if (res.DATA == null) {
                    transferIBA.hasOldDoc = false;
                    Util.SetFieldErrorMessage("listDocument", VIB.LocalizeString.ERROLDDOCEMPTY);
                } else {
                    Util.SetFieldErrorMessage("listDocument");
                    res.DATA.map(function (item) {
                        transferIBA.Documents.filter(function (elm) {
                            if (item.doctype == elm.value) {
                                elm.item = item;
                            }
                        });
                    });
                    transferIBA.hasOldDoc = true;
                    transferIBA.ShowSessionDocument();
                }
            }).catch(function (err) {
                Util.ShowErrorMessage(err.MESSAGE);
            });
        } else {
            transferIBA.Documents.filter(function (elm) {
                elm.item = null;
            });
            transferIBA.ShowSessionDocument();
        }
    },
    ShowSessionDocument: function () {
        var arr = [];
        transferIBA.formModel.selectedPurposeTransfer.document && transferIBA.formModel.selectedPurposeTransfer.document.map(function (item) {
            transferIBA.Documents.map(function (elm) {
                if (elm.value === item) {
                    var obj = Object.assign({}, elm);;
                    obj.requireExpiredDate = false;
                    if (transferIBA.formModel.selectedPurposeTransfer.documentrequireexpireddate &&
                        transferIBA.formModel.selectedPurposeTransfer.documentrequireexpireddate.indexOf(item) > -1) {
                        obj.requireExpiredDate = true;
                    }
                    arr.push(obj);
                }
            });
        });
        var renderData = {
            documents: arr
        }
        if ($('#documentSession > .documentTemplateCon').length > 0) {
            $('#documentSession > .documentTemplateCon').remove();
        }
        $('#documentTemplate').tmpl(renderData).appendTo('#documentSession');
        $('#documentSession input.datepicker-vs3').each(function () {
            var $thisElem = $(this);
            var $container = $(this).parents('.form-group');
            var date = new Date();
            date.setDate(date.getDate());
            $thisElem.datepicker({
                orientation: "top",
                format: "dd/mm/yyyy",
                startDate: date,
                autoclose: true,
                todayHighlight: true,
                container: $container,
                weekStart: 1
            }).off("change").on("change", function () {
                var me = this;
                if (moment($(me).val(), "DD/MM/YYYY") >= moment(date, "DD/MM/YYYY")) {
                    Util.SetFieldErrorMessage(me.id);
                } else {
                    Util.SetFieldErrorMessage(me.id, VIB.LocalizeString.ERRNGAYHETHANKHONGHOPLE);
                }
            });

        });

        $('.file-name .del').click(function () {
            $(this).parents('.Uploadbtn').children('.file-name').hide();
            $(this).parents('.Uploadbtn').children('.file-name').find('p').html("");
            $(this).parents('.Uploadbtn').children('.attach-upload').find('.txtUpload').show();
            var id = $(this).attr('data-id');
            $("#" + id).val('');//delete file
            transferIBA.fileUploadQueue = transferIBA.fileUploadQueue.filter(function (item) {
                return item.name != id;
            });
            transferService.RemoveFile({ doccode: id });
        });
        //$('.Uploadbtn input[type=file]').on('change', function(event) {
        //    var parent = $(this).parents('.Uploadbtn');
        //    var x = $($(this).val().match(/([^\/\\]+)$/)).get(1);
        //    if (typeof x === 'undefined') {
        //        return false;
        //    } else {
        //        $(this).parents('.Uploadbtn').children('.file-name').show();
        //        $(this).parents('.Uploadbtn').children('.file-name').find('p').html(x);
        //        $(this).parents('.Uploadbtn').children('.attach-upload').find('.txtUpload').hide();
        //    }
        //});
        transferIBA.Documents.map(function (elm) {
            if (elm.item) {
                var item = elm.item;
                var linkDown = '<a target="blank" href="' + item.url + '">' + item.filename + '</a>';
                $("#fileName" + item.doctype).html(linkDown);
                $("#fileName" + item.doctype).parent().show();
                $("#txtUpload" + item.doctype).hide();
            }
        });
    },
    OnChangeInputFile: function (el, isRequiredExp) {
        Util.SetFieldErrorMessage(el.id)
        if ($(el)[0].files && $(el)[0].files[0].size > 5 * 1024 * 1024) {
            Util.SetFieldErrorMessage(el.id, "Nội dung file lớn hơn cho phép (5 MB)");
            return false;
        }

        var x = $($(el).val().match(/([^\/\\]+)$/)).get(1);
        if (typeof x === 'undefined') {
            Util.SetFieldErrorMessage(el.id, "Đường dẩn file không hợp lệ");
        } else {
            $(el).parents('.Uploadbtn').children('.file-name').show();
            $(el).parents('.Uploadbtn').children('.file-name').find('p').html(x);
            $(el).parents('.Uploadbtn').children('.attach-upload').find('.txtUpload').hide();
            Util.SetFieldErrorMessage("listDocument");
        }

        var dateExpiry = $('#expireDate' + $(el).attr('data-value')).val() || '';
        if (isRequiredExp && dateExpiry == '') {
            if ($(el)[0].files) {
                transferIBA.fileUploadQueue.push({
                    name: $(el).attr('data-value'),
                    file: $(el)[0].files[0]
                });
            }
            return false;
        }

        if ($(el)[0].files) {
            var file = $(el)[0].files[0];
            var ext = /[^.]+$/.exec(file.name)[0];
            var fileName = file.name.replace('.' + ext, '');
            if (ext && EXTFILE.indexOf(ext.toLowerCase()) > -1) {
                var formData = new FormData();
                formData.append(file.name, file);
                formData.append('doccode', $(el).attr('data-value'));
                formData.append('dateexpiry', dateExpiry);
                transferService.UploadFile(formData);
            }
        }
    },
    UploadFileSequentially: function (i, callback, uploadList) {
        if (i < transferIBA.fileUploadQueue.length) {
            var item = transferIBA.fileUploadQueue[i];
            var formData = new FormData();
            formData.append(item.file.name, item.file);
            formData.append('doccode', item.name);
            formData.append('dateexpiry', $('#expireDate' + item.name).val());
            uploadList.push(transferService.UploadFile(formData, function () {
                transferIBA.UploadFileSequentially(i + 1, callback, uploadList);
            }));
        } else {
            transferService.isFunction(callback) ? callback(uploadList) : '';
        }
    },
    OnContinueClicked: function (isSkipShowErrorField) {
        if (transferIBA.currentStep === 1) {
            if (transferIBA.ValidateStep1(isSkipShowErrorField)) {
                $("#step2").show();
                transferIBA.currentStep = 2;
            }
        } else if (transferIBA.currentStep === 2) {
            var v1 = transferIBA.ValidateStep1(isSkipShowErrorField);
            var v2 = transferIBA.ValidateStep2(isSkipShowErrorField);
            if (v1 && v2) {
                if ($('#fromAccGroup #fromAcc').length == 0) {
                transferService.GetAccountForTransfer(Module.IBA).done(function (accountResult) {
                        $("#fromAccGroup").empty();
                    Util.InitAccountListControl("fromAcc", accountResult, "fromAccGroup");
                    $('#fromAcc .item1').on('click', function () {
                        transferIBA.formModel.selectedAccountTransfer = {
                            value: $(this).attr('data-value'),
                            text: $(this).attr('data-display-text')
                        };

                        transferIBA.ShowExchangeRate();
                            transferIBA.OnContinueClicked(true);
                    });
                    $('#fromAcc .item1').first().click();
                    $("#step3").show();
                    transferIBA.currentStep = 3;
                });
                }
            }
        } else if (transferIBA.currentStep === 3) {
            var v1 = transferIBA.ValidateStep1(isSkipShowErrorField);
            var v2 = transferIBA.ValidateStep2(isSkipShowErrorField);
            var v3 = transferIBA.ValidateStep3(isSkipShowErrorField);
            if (v1 && v2 && v3) {
                $("#step4").show();
                $("#tooltip").show();
                transferIBA.currentStep = 4;
            }
        } else if (transferIBA.currentStep === 4) {
            var v1 = transferIBA.ValidateStep1(isSkipShowErrorField);
            var v2 = transferIBA.ValidateStep2(isSkipShowErrorField);
            var v3 = transferIBA.ValidateStep3(isSkipShowErrorField);
            var v4 = transferIBA.ValidateStep4(isSkipShowErrorField);
            if (v1 && v2 && v3 && v4) {
                $("#tooltip").hide();
                if (transferOther.benId && transferOther.moduleStr) {
                    transferIBA.UploadFileSequentially(0, function (upload) {
                        transferIBA.ContinueBen();
                    }, []);
                    return;
                }
                /*var upload = [];
                for (var i = 0; i < transferIBA.fileUploadQueue.length; i++) {
                    var item = transferIBA.fileUploadQueue[i];
                    var formData = new FormData();
                    formData.append(item.file.name, item.file);
                    formData.append('doccode', item.name);
                    formData.append('dateexpiry', $('#expireDate' + item.name).val());
                    upload.push(transferService.UploadFile(formData));
                }
                transferIBA.ValidateIBA(upload);*/
                transferIBA.UploadFileSequentially(0, function (upload) {
                    transferIBA.ValidateIBA(upload);
                }, []);
            }
        } else if (transferIBA.currentStep === 5) {
            Util.SetOTPErrorMessage();
            var otp = $("#txtOtp1").val() + $("#txtOtp2").val() + $("#txtOtp3").val() + $("#txtOtp4").val() + $("#txtOtp5").val() + $("#txtOtp6").val();
            if (otp.length === 6) {
                transferService.SubmitIBA(otp).done(function (result) {
                    if (result.STATUSCODE === StatusCode.Successed) {
                        Util.ScrollTop();
                        $("#transnum").html(result.DATA.transnum);
                        $(".result-block").show();
                        $(".confirm-block").hide();
                        $("#btnPrev").hide();
                        $("#btnNext").hide();
                        $("#btnComplete").show();
                        $("#btnLinkManagerBulk").show();
                    } else {
                        Util.ShowErrorMessage(result.MESSAGE);
                    }
                });
            } else {
                Util.SetOTPErrorMessage(true, "Vui lòng nhập OTP");
            }


        }
    },
    ValidateIBA: function (upload) {
        transferIBA.fileUploadQueue = [];
        transferIBA.formModel.iban = $('#iban').val() || "";
        transferIBA.formModel.bsb = $('#bsb').val() || "";
        transferIBA.formModel.soTien = $('#amount').autoNumeric('get');
        transferIBA.formModel.soTienStr = $('#amount').val();
        transferIBA.formModel.stkNhan = $('#stkNhan').val();
        transferIBA.formModel.nguoiNhan = $('#nguoiNhan').val();
        transferIBA.formModel.diaChiNguoiNhan = $('#diaChiNguoiNhan').val();
        if (transferIBA.formModel.diaChiNguoiNhan) {
            transferIBA.formModel.denSTKStr = $('#nguoiNhan').val() + '-' + $('#stkNhan').val() + '-' + transferIBA.formModel.diaChiNguoiNhan;
        } else {
            transferIBA.formModel.denSTKStr = $('#nguoiNhan').val() + '-' + $('#stkNhan').val();
        }

        transferIBA.formModel.passport = {
            no: transferIBA.formModel.selectedPurposeTransfer && transferIBA.formModel.selectedPurposeTransfer.requirepassport ? $('#passport').val() : '',
            expiredDate: transferIBA.formModel.selectedPurposeTransfer && transferIBA.formModel.selectedPurposeTransfer.requirepassport ? $('#passportEndDate').val() : ''
        };
        transferIBA.formModel.visa = {
            no: transferIBA.formModel.selectedPurposeTransfer && transferIBA.formModel.selectedPurposeTransfer.requirevisa ? $('#visa').val() : '',
            expiredDate: transferIBA.formModel.selectedPurposeTransfer && transferIBA.formModel.selectedPurposeTransfer.requirevisa ? $('#visaEndDate').val() : ''
        };
        transferIBA.formModel.soHoaDon = $('#invoice').val();
        transferIBA.formModel.noidung = $('#description').val();
        transferIBA.formModel.feeInfo = {
            soTienQuyDoiUocTinh: $('#exchangeAmount').html(),
            tyGiaQuyDoi: $('#exchangeRate').html(),
            phiChuyenTien: $('#exchangeFee').html(),
            phiNgoaiVN: $('#exchangeFee2').html(),
            total: $('#exchangeTotal').html(),
        };

        transferIBA.formModel.saveContact = $('#addBen').is(':checked') ? 'Y' : 'N';
        var data = {
            fromacctno: transferIBA.formModel.selectedAccountTransfer.value,
            ccy: transferIBA.formModel.selectedCCY,
            amount: $('#amount').autoNumeric('get'),
            feeside: transferIBA.formModel.selectedFee,
            toacctfromben: false,
            benid: '',
            description: transferIBA.formModel.noidung.toUpperCase(),
            purpose: transferIBA.formModel.selectedPurposeTransfer.value,
            documentoption: transferIBA.formModel.selectedDocument.type === "NEW" ? 'chungtumoi' : 'chungtucu',
            toacctno: transferIBA.formModel.stkNhan.toUpperCase(),
            toacctname: transferIBA.formModel.nguoiNhan.toUpperCase(),
            toaddress: transferIBA.formModel.diaChiNguoiNhan.toUpperCase(),
            benpassport: transferIBA.formModel.passport.no.toUpperCase(),
            benpassportexpiry: transferIBA.formModel.passport.expiredDate.toUpperCase(),
            benvisa: transferIBA.formModel.visa.no.toUpperCase(),
            benvisaexpiry: transferIBA.formModel.visa.expiredDate,
            invoice: transferIBA.formModel.soHoaDon.toUpperCase(),
            iban: transferIBA.formModel.iban.toUpperCase(),
            bsb: transferIBA.formModel.bsb.toUpperCase(),
            country: transferIBA.formModel.selectedCountry.countryCode,
            swift: transferIBA.formModel.selectedCountry.bankType === "CODE" ? transferIBA.formModel.swiftCode.toUpperCase() : '',
            bankcode: (transferIBA.formModel.selectedCountry.bankType === "NAME" && transferIBA.formModel.selectedBank.bankId !== '-1') ? transferIBA.formModel.selectedBank.bankId : 'BIC_OTHER',
            bankname: (transferIBA.formModel.selectedCountry.bankType === "NAME" && transferIBA.formModel.selectedBank.bankId !== '-1') ? transferIBA.formModel.selectedBank.name.toUpperCase() : $('#otherBankName').val().toUpperCase(),
            branchname: (transferIBA.formModel.selectedCountry.bankType === "NAME" && transferIBA.formModel.selectedBank.bankId !== '-1') ? '' : $('#otherBranchName').val().toUpperCase(),
            state: (transferIBA.formModel.selectedCountry.bankType === "NAME" && transferIBA.formModel.selectedBank.bankId !== '-1') ? '' : $('#otherCityName').val().toUpperCase(),
            hasinterbank: transferIBA.formModel.selectedCountry.bankTypeMid ? true : false,
            interswift: transferIBA.formModel.selectedCountry.bankTypeMid === "CODE" ? transferIBA.formModel.swiftCodeMid.toUpperCase() : '',
            interbankcode: (transferIBA.formModel.selectedCountry.bankTypeMid === "NAME" && transferIBA.formModel.selectedBank.bankIdMid !== '-1') ? transferIBA.formModel.selectedBank.bankIdMid.toUpperCase() : 'BIC_OTHER',
            interbankname: (transferIBA.formModel.selectedCountry.bankTypeMid === "NAME" && transferIBA.formModel.selectedBank.bankIdMid !== '-1') ? transferIBA.formModel.selectedBank.nameMid.toUpperCase() : $('#otherBankNameMid').val().toUpperCase(),
            interbranchname: (transferIBA.formModel.selectedCountry.bankTypeMid === "NAME" && transferIBA.formModel.selectedBank.bankIdMid !== '-1') ? '' : $('#otherBranchNameMid').val().toUpperCase(),
            interstate: (transferIBA.formModel.selectedCountry.bankTypeMid === "NAME" && transferIBA.formModel.selectedBank.bankIdMid !== '-1') ? '' : $('#otherCityNameMid').val().toUpperCase(),
            feetype: transferIBA.formModel.selectedFee,
            addben: transferIBA.formModel.saveContact
        }
        transferIBA.formModel.selectedBank.other = {
            name: $('#otherBankName').val().toUpperCase(),
            branch: $('#otherBranchName').val().toUpperCase(),
            city: $('#otherCityName').val().toUpperCase()
        };
        transferIBA.formModel.selectedBank.otherMid = {
            name: $('#otherBankNameMid').val().toUpperCase(),
            branch: $('#otherBranchNameMid').val().toUpperCase(),
            city: $('#otherCityNameMid').val().toUpperCase()
        }
        Promise.all(upload).then(function () {
            transferService.IBAValidate(data).then(function (res) {
                transferIBA.formModel.selectedCCYDisplay = res.DATA.ccy;
                var renderData = transferIBA.formModel;
                renderData.responseValid = res.DATA;
                $("#confirmationContent").empty();
                $('#transferViaIBAConfirmationTemplate').tmpl(transferIBA.formModel, {
                    stringToSlugToUpper: function (str) {
                        if (!str) {
                            return '';
                        }
                        var from = "àáãảạăằắẳẵặâầấẩẫậèéẻẽẹêềếểễệđùúủũụưừứửữựòóỏõọôồốổỗộơờớởỡợìíỉĩịäëïîöüûñçýỳỹỵỷ",
                            to = "aaaaaaaaaaaaaaaaaeeeeeeeeeeeduuuuuuuuuuuoooooooooooooooooiiiiiaeiiouuncyyyyy";
                        for (var i = 0, l = from.length; i < l; i++) {
                            str = str.replace(RegExp(from[i], "gi"), to[i]);
                        }
                        return str.trim().toUpperCase();
                    }
                }).appendTo($('#confirmationContent'));
                transferOther.ShowHideConfirmationContent(true);
                Util.ScrollTop();
                var otpRenderData = {
                    TransactionSigning: res.DATA.TransactionSigning,
                    TransactionId: res.DATA.TransactionId
                }
                $("#otpTemplate").tmpl(otpRenderData).appendTo($("#otpContent"));
                Util.RegisterOTPEvent();
                scrollViewport();
                transferIBA.currentStep = 5;
                $("#btnGetOTP").click(function () {
                    transferService.GetOTP().done(function () {
                        $("txtOtp1").focus();
                    });
                });
            }).catch(function (err) {
                Util.ShowErrorMessage(err.MESSAGE);
            });
        }).catch(function (err) {
            Util.ShowErrorMessage(err.MESSAGE);
        });
    },
    ContinueBen: function () {
        for (var i = 0; i < transferIBA.fileUploadQueue.length; i++) {
            var item = transferIBA.fileUploadQueue[i];
            var formData = new FormData();
            formData.append(item.file.name, item.file);
            formData.append('doccode', item.name);
            formData.append('dateexpiry', $('#expireDate' + item.name).val());
            transferService.UploadFile(formData);
        }
        transferIBA.fileUploadQueue = [];
        var soTien = $('#amount').autoNumeric('get');
        transferIBA.formModel.soTien = soTien;
        transferIBA.formModel.soTienStr = $('#amount').val();
        transferIBA.formModel.soHoaDon = $('#invoice').val();
        transferIBA.formModel.feeInfo = {
            soTienQuyDoiUocTinh: $('#exchangeAmount').html(),
            tyGiaQuyDoi: $('#exchangeRate').html(),
            phiChuyenTien: $('#exchangeFee').html(),
            phiNgoaiVN: $('#exchangeFee2').html(),
            total: $('#exchangeTotal').html(),
        };
        transferIBA.formModel.passport = {
            no: $('#passport').val() || '',
            expiredDate: $('#passportEndDate').val() || ''
        };
        transferIBA.formModel.visa = {
            no: $('#visa').val() || '',
            expiredDate: $('#visaEndDate').val() || ''
        };
        transferIBA.formModel.noidung = $('#description').val();
        var data = {
            benid: transferOther.benId,
            fromacctno: transferIBA.formModel.selectedAccountTransfer.value,
            ccy: transferIBA.formModel.selectedCCY,
            amount: transferIBA.formModel.soTien,
            invoice: transferIBA.formModel.soHoaDon.toUpperCase(),
            benpassport: transferIBA.formModel.passport.no.toUpperCase(),
            benpassportexpiry: transferIBA.formModel.passport.expiredDate,
            benvisa: transferIBA.formModel.visa.no.toUpperCase(),
            benvisaexpiry: transferIBA.formModel.visa.expiredDate,
            feetype: transferIBA.formModel.selectedFee,
            description: transferIBA.formModel.noidung.toUpperCase(),
            documentoption: transferIBA.formModel.selectedDocument.type === "NEW" ? 'chungtumoi' : 'chungtucu',
            toacctfromben: true,
            country: transferIBA.formModel.selectedCountry.countryCode,
        }
        transferService.IBAValidate(data).then(function (res) {
            var renderData = transferIBA.formModel;
            renderData.responseValid = res.DATA;
            $("#confirmationContent").empty();
            $('#transferViaIBAConfirmationTemplate').tmpl(transferIBA.formModel, {
                stringToSlugToUpper: function (str) {
                    if (!str) {
                        return '';
                    }
                    var from = "àáãảạăằắẳẵặâầấẩẫậèéẻẽẹêềếểễệđùúủũụưừứửữựòóỏõọôồốổỗộơờớởỡợìíỉĩịäëïîöüûñçýỳỹỵỷ",
                        to = "aaaaaaaaaaaaaaaaaeeeeeeeeeeeduuuuuuuuuuuoooooooooooooooooiiiiiaeiiouuncyyyyy";
                    for (var i = 0, l = from.length; i < l; i++) {
                        str = str.replace(RegExp(from[i], "gi"), to[i]);
                    }
                    return str.trim().toUpperCase();
                }
            }).appendTo($('#confirmationContent'));
            transferOther.ShowHideConfirmationContent(true);
            var otpRenderData = {
                TransactionSigning: res.DATA.TransactionSigning,
                TransactionId: res.DATA.TransactionId
            }
            $("#otpTemplate").tmpl(otpRenderData).appendTo($("#otpContent"));
            Util.RegisterOTPEvent();
            scrollViewport();
            transferIBA.currentStep = 5;
            $("#btnGetOTP").click(function () {
                transferService.GetOTP().done(function () {
                    $("txtOtp1").focus();
                });
            });
        }).catch(function (err) {
            Util.ShowErrorMessage(err.MESSAGE);
        });
    },
    ValidateStep1: function (isSkipShowErrorField) {
        var v1 = transferIBA.ValidCountry(isSkipShowErrorField);
        var v2 = transferIBA.ValidSwiftCode(isSkipShowErrorField);
        var v3 = transferIBA.ValidOtherBank(isSkipShowErrorField);
        var v4 = transferIBA.ValidIBAN(isSkipShowErrorField);
        var v5 = transferIBA.ValidBSB(isSkipShowErrorField);
        var v6 = transferIBA.ValidSwiftCodeMid(isSkipShowErrorField);
        var v7 = transferIBA.ValidOtherBank(true);

        return v1 && v2 && v3 && v4 && v5 && v6 && v7;
    },
    ValidateStep2: function (isSkipShowErrorField) {
        var v1 = transferIBA.ValidPurposeCode(isSkipShowErrorField);
        if (!transferOther.benId) {
            var v2 = transferIBA.ValidStkNhan(isSkipShowErrorField);
        } else {
            var v2 = true;
        }
        var v3 = transferIBA.ValidNguoiNhan(isSkipShowErrorField);
        var v4 = transferIBA.ValidDiaChiNguoiNhan(isSkipShowErrorField);
        var v5 = transferIBA.ValidPassport(isSkipShowErrorField);
        var v6 = transferIBA.ValidVisa(isSkipShowErrorField);

        return v1 && v2 && v3 && v4 && v5 && v6;
    },
    ValidateStep3: function (isSkipShowErrorField) {
        var v1 = transferIBA.ValidAccountForTransfer(isSkipShowErrorField);
        var v2 = transferIBA.ValidCCY(isSkipShowErrorField);
        var v3 = transferIBA.ValidAmount(isSkipShowErrorField);
        var v4 = transferIBA.ValidFee(isSkipShowErrorField);
        var v5 = transferIBA.ValidInvoice(isSkipShowErrorField);
        var v6 = transferIBA.ValidDescription();

        return v1 && v2 && v3 && v4 && v5 && v6;
    },
    ValidateStep4: function (isSkipShowErrorField) {
        if (!transferIBA.formModel.selectedDocument.type && transferIBA.formModel.selectedPurposeTransfer.document.length > 0) {
            if (!isSkipShowErrorField) {
            Util.SetFieldErrorMessage("listDocument", VIB.LocalizeString.ERRKHONGCHONCHUNGTU);
            }
            return false;
        }
        if (transferIBA.formModel.selectedDocument.type === "OLD" && !transferIBA.hasOldDoc) {
            if (!isSkipShowErrorField) {
            Util.SetFieldErrorMessage("listDocument", VIB.LocalizeString.ERROLDDOCEMPTY);
            }
            return false;
        }

        var validDoc = transferIBA.ValidDocument(transferIBA.formModel.selectedDocument.type);
        if (!validDoc && transferIBA.formModel.selectedPurposeTransfer.document) {
            return false;
        }
        return transferIBA.ValidDocumentEndDate();
    },
    ValidDocument: function (type) {
        if (transferIBA.formModel.selectedPurposeTransfer.document.length === 0) {
            return true;
        }
        var isValid = true;
        var valFileUpload = "";
        if (type === "NEW") {
            $('input:file').each(function () {
                valFileUpload += $(this).val();
                var id = $(this).attr('data-value');
                var requiredExp = $(this).attr('data-requireExpiredDate');
                if (!$(this)[0].files[0] && $("#expireDate" + id).val() && $("#expireDate" + id).val() != '' && requiredExp) {
                    Util.SetFieldErrorMessage(id, VIB.LocalizeString.ERRKHONGUPLOADDOC);
                    isValid = false;
                } else if ($(this)[0].files[0]) {
                    var file = $(this)[0].files[0];
                    var ext = /[^.]+$/.exec(file.name)[0];
                    var fileName = file.name.replace("." + ext, '');
                    if (ext && EXTFILE.indexOf(ext.toLowerCase()) === -1) {
                        $('#lblError' + id).html(/*VIB.LocalizeString.ERRDOCNOTVALID*/'Tên file không hợp lệ').show();
                        isValid = false;
                    } else if (file.size > 5 * 1024 * 1024) {
                        $('#lblError' + id).html(/*VIB.LocalizeString.ERRFILETOOBIG*/'Nội dung file lớn hơn cho phép (5 MB)').show();
                        isValid = false;
                    }
                }
            });
        } else {
            if (!transferIBA.hasOldDoc) {
                isValid = false;
                $('#err_document').html(VIB.LocalizeString.ERROLDDOCEMPTY).show();
            } else {
                $('input:file').each(function () {
                    valFileUpload += $(this).val() || $(this).next().next().val();
                    var id = $(this).attr('data-value');
                    $('#err_' + id).hide();
                    var requiredExp = $(this).attr('data-requireExpiredDate');
                    var file = $(this)[0].files[0];
                    if ($(this).next().next().val() != '') {
                        // continue;
                    } else if (!file && $("#expireDate" + id).val() && $("#expireDate" + id).val() != '' && requiredExp) {
                        $('#err_' + id).html(VIB.LocalizeString.ERRKHONGUPLOADDOC).show();
                        isValid = false;
                    } else if (file) {
                        var file = $(this)[0].files[0];
                        var ext = /[^.]+$/.exec(file.name)[0];
                        var fileName = file.name.replace('.' + ext, '');
                        if (ext && EXTFILE.indexOf(ext.toLowerCase()) === -1) {
                            isValid = false;
                            $('#err_' + id).html(VIB.LocalizeString.ERRDOCNOTVALID).show();
                        } else if (file.size > 5 * 1024 * 1024) {
                            $('#err_' + id).html(VIB.LocalizeString.ERRFILETOOBIG).show();
                            isValid = false;
                        }
                    }
                });
            }
        }
        if (valFileUpload.length > 0) {
            return isValid;
        } else {
            Util.SetFieldErrorMessage("listDocument", VIB.LocalizeString.ERRKHONGCHONCHUNGTU1);
            return false;
        }
    },
    ValidDocumentEndDate: function () {
        if (!transferIBA.formModel.selectedPurposeTransfer.document) {
            return true;
        }
        var isValid = true;
        $('#documentSession .datepicker-vs3').each(function () {
            var id = $(this).attr('data-value');
            Util.SetFieldErrorMessage("expireDate" + id);
            if ($(this).val() == '' && $('#' + id)[0].files[0]) {
                Util.SetFieldErrorMessage("expireDate" + id, VIB.LocalizeString.ERRKHONGCHONNGAYHETHAN);
                isValid = false;
            } else if ($(this).val() != '') {
                if (!DateTimeUtil.IsValidDate($(this).val())) {
                    Util.SetFieldErrorMessage("expireDate" + id, VIB.LocalizeString.ERRNGAYHETHANNOTVALID);
                    isValid = false;
                } else {
                    var now = new Date();
                    var month = now.getMonth();
                    now.setMonth(month + 1);
                    var expiredStr = $(this).val().split('/');
                    var expiredDate = new Date(expiredStr[2], expiredStr[1], expiredStr[0]);
                    if (now.getTime() > expiredDate.getTime()) {
                        Util.SetFieldErrorMessage("expireDate" + id, VIB.LocalizeString.ERRNGAYHETHANKHONGHOPLE);
                        isValid = false;
                    }
                }
            }
        });
        return isValid;
    },
    ValidCountry: function () {
        if (!transferIBA.formModel.selectedCountry.countryCode) {
            Util.SetFieldErrorMessage("country", 'Vui lòng chọn quốc gia');
            return false;
        } else {
            Util.SetFieldErrorMessage("country");
        }
        return true;
    },
    ValidSwiftCode: function () {
        if (!transferIBA.formModel.selectedCountry.countryCode)
            return false;
        var option = $('input[name="bank-option"]:checked').val();
        if (option === "CODE") {
            if (!$('#swiftCode').val()) {
                Util.SetFieldErrorMessage("swiftCode", VIB.LocalizeString.ERRWSIFTCODEBLANK);
                return false;
            } else {
                if (!transferIBA.isValidSwiftCode) {
                    Util.SetFieldErrorMessage("swiftCode", VIB.LocalizeString.ERRMASWIFTKHONGDUNG);
                    return false;
                } else {
                    Util.SetFieldErrorMessage("swiftCode");
                }
            }
        }
        if (option === "NAME") {
            if (!transferIBA.formModel.selectedBank.bankId || !$("#bankName").val()) {
                Util.SetFieldErrorMessage("bankName", VIB.LocalizeString.ERRNGANHANGNHANBLANK);
                return false;
            } else {
                Util.SetFieldErrorMessage("bankName");
            }
        }
        return true;
    },
    ValidSwiftCodeMid: function () {
        if (!$("#checkedMid:checked").length) {
            return true;
        }
        var option = $('input[name="bank-option2"]:checked').val();
        if (option === "CODE") {
            if (!$('#swiftCodeMid').val()) {
                Util.SetFieldErrorMessage("swiftCodeMid", VIB.LocalizeString.ERRWSIFTCODEBLANK);
                return false;
            } else {
                if (!transferIBA.isValidSwiftCodeMid) {
                    Util.SetFieldErrorMessage("swiftCodeMid", VIB.LocalizeString.ERRMASWIFTKHONGDUNG);
                    return false;
                } else {
                    Util.SetFieldErrorMessage("swiftCodeMid");
                }
            }
        }
        if (option === "NAME") {
            if (!transferIBA.formModel.selectedBank.bankIdMid || !$("#bankNameMid").val()) {
                Util.SetFieldErrorMessage("bankNameMid", VIB.LocalizeString.ERRNGANHANGNHANBLANK);
                return false;
            } else {
                Util.SetFieldErrorMessage("bankNameMid");
            }
        }
        return true;
    },
    ValidOtherBank: function (isMidBank) {
        if (isMidBank) {
            if (!$("#checkedMid:checked").length) {
                return true;
            }
            if (transferIBA.formModel.selectedBank.bankIdMid === '-1' && transferIBA.formModel.selectedCountry.bankTypeMid === "NAME") {
                var otherBankNameMid = $("#otherBankNameMid").val();
                if (!otherBankNameMid) {
                    Util.SetFieldErrorMessage("otherBankNameMid", VIB.LocalizeString.ERRNGANHANGNHANBLANK);
                    return false;
                } else {
                    if (!REGEX_VALIDNAME.test(otherBankNameMid.toLowerCase())) {
                        Util.SetFieldErrorMessage("otherBankNameMid", VIB.LocalizeString.ERRBANKNAMENOTVALID);
                        return false;
                    } else {
                        Util.SetFieldErrorMessage("otherBankNameMid");
                    }
                }
                var otherBranchNameMid = $("#otherBranchNameMid").val();
                if (!otherBranchNameMid) {
                    Util.SetFieldErrorMessage("otherBranchNameMid", VIB.LocalizeString.ERRBRANCHBLANK);
                    return false;
                } else {
                    if (!REGEX_VALIDNAME.test(otherBranchNameMid.toLowerCase())) {
                        Util.SetFieldErrorMessage("otherBranchNameMid", VIB.LocalizeString.ERRBANKCHINHANHNOTVALID);
                        return false;
                    } else {
                        Util.SetFieldErrorMessage("otherBranchNameMid");
                    }
                }
                var otherCityNameMid = $("#otherCityNameMid").val();
                if (!otherCityNameMid) {
                    Util.SetFieldErrorMessage("otherCityNameMid", VIB.LocalizeString.ERRCITYBLANK);
                    return false;
                } else {
                    if (!REGEX_VALIDNAME.test(otherCityNameMid.toLowerCase())) {
                        Util.SetFieldErrorMessage("otherCityNameMid", VIB.LocalizeString.ERRBANKCITYNOTVALID);
                        return false;
                    }
                    Util.SetFieldErrorMessage("otherCityNameMid");
                }
            }
        } else {
            if (transferIBA.formModel.selectedBank.bankId === '-1' &&
                transferIBA.formModel.selectedCountry.bankType === "NAME") {
                var otherBankName = $("#otherBankName").val();
                if (!otherBankName) {
                    Util.SetFieldErrorMessage("otherBankName", VIB.LocalizeString.ERRNGANHANGNHANBLANK);
                    return false;
                } else {
                    if (!REGEX_VALIDNAME.test(otherBankName.toLowerCase())) {
                        Util.SetFieldErrorMessage("otherBankName", VIB.LocalizeString.ERRBANKNAMENOTVALID);
                        return false;
                    } else {
                        Util.SetFieldErrorMessage("otherBankName");
                    }
                }
                var otherBranchName = $("#otherBranchName").val();
                if (!otherBranchName) {
                    Util.SetFieldErrorMessage("otherBranchName", VIB.LocalizeString.ERRBRANCHBLANK);
                    return false;
                } else {
                    if (!REGEX_VALIDNAME.test(otherBranchName.toLowerCase())) {
                        Util.SetFieldErrorMessage("otherBranchName", VIB.LocalizeString.ERRBANKCHINHANHNOTVALID);
                        return false;
                    } else {
                        Util.SetFieldErrorMessage("otherBranchName");
                    }
                }
                var otherCityName = $("#otherCityName").val();
                if (!otherCityName) {
                    Util.SetFieldErrorMessage("otherCityName", VIB.LocalizeString.ERRCITYBLANK);
                    return false;
                } else {
                    if (!REGEX_VALIDNAME.test(otherCityName.toLowerCase())) {
                        Util.SetFieldErrorMessage("otherCityName", VIB.LocalizeString.ERRBANKCITYNOTVALID);
                        return false;
                    }
                    Util.SetFieldErrorMessage("otherCityName");
                }
            }
        }
        return true;
    },
    ValidIBAN: function (isSkipShowErrorField) {
        var iban = $("#iban").val();
        if (transferIBA.formModel.selectedCountry.ibarequireiban &&
            iban &&
            (iban.length !== 34 || !REGEX_NUMBERANDCHARACTER.test(iban))) {
            if (!isSkipShowErrorField) {
            Util.SetFieldErrorMessage("iban", VIB.LocalizeString.ERRIBANNOTVALID);
            }

            return false;
        } else if (transferIBA.formModel.selectedCountry.ibaalwayrequireiban && !iban) {
            if (!isSkipShowErrorField) {
            Util.SetFieldErrorMessage("iban", VIB.LocalizeString.ERRKHONGNHAPIBAN);
            }

            return false;
        } else {
            Util.SetFieldErrorMessage("iban");
        }
        return true;
    },
    ValidBSB: function (isSkipShowErrorField) {
        var bsb = $('#bsb').val();
        if (transferIBA.formModel.selectedCountry.ibarequirebsb && !bsb) {
            if (!isSkipShowErrorField) {
            Util.SetFieldErrorMessage("bsb", VIB.LocalizeString.ERRKHONGNHAPBSB);
            }

            return false;
        } else if (transferIBA.formModel.selectedCountry.ibarequirebsb && bsb.length !== 6) {
            if (!isSkipShowErrorField) {
            Util.SetFieldErrorMessage("bsb", VIB.LocalizeString.ERRNHAPSAIBSB);
            }

            return false;
        } else {
            Util.SetFieldErrorMessage("bsb");
        }
        return true;
    },
    ValidPurposeCode: function (isSkipShowErrorField) {
        if (!transferIBA.formModel.selectedPurposeTransfer.value && !$('#purposeCode .item1.selected').html()) {
            if (!isSkipShowErrorField) {
            Util.SetFieldErrorMessage("purposeCode", VIB.LocalizeString.ERRKHONGCHONMUCDICHCHUYENTIEN);
            }

            return false;
        } else {
            Util.SetFieldErrorMessage("purposeCode");
        }
        return true;
    },
    ValidStkNhan: function (isSkipShowErrorField) {
        var val = $('#stkNhan').val();
        if (!val) {
            if (!isSkipShowErrorField) {
            Util.SetFieldErrorMessage("stkNhan", VIB.LocalizeString.ERRKHONGNHAPSTKNHAN);
            }

            return false;
        } else {
            if (isNaN(val)) {
                if (!/^(?=.*[0-9])(?=.*[a-zA-Z])([a-zA-Z0-9]+)$/.test(val)) {
                    if (!isSkipShowErrorField) {
                    Util.SetFieldErrorMessage("stkNhan", VIB.LocalizeString.ERRKHONGNHAPSTKNHAN);
                    }

                    return false;
                }
            }
            Util.SetFieldErrorMessage("stkNhan");
        }

        return true;
    },
    ValidNguoiNhan: function (isSkipShowErrorField) {
        var val = $('#nguoiNhan').val();
        if (!val) {
            if (!isSkipShowErrorField) {
            Util.SetFieldErrorMessage("nguoiNhan", VIB.LocalizeString.ERRKHONGNHAPTENNGUOINHAN);
            }

            return false;
        } else if (/[@&!$%()+|={}\[\]\-\:";.,_~^*<>'`?\/#^0-9]/.test(val)) {
            if (!isSkipShowErrorField) {
            Util.SetFieldErrorMessage("nguoiNhan", VIB.LocalizeString.ERRHOTENNOTVALID);
            }

            return false;
        } else {
            Util.SetFieldErrorMessage("nguoiNhan");
        }

        return true;
    },
    ValidDiaChiNguoiNhan: function (isSkipShowErrorField) {
        var val = $('#diaChiNguoiNhan').val();
        if (val && /[<=>\\\\:;'\"()#%*+^&$|`~!@?\\[\\]/.test(val)) {
            if (isSkipShowErrorField) {
            Util.SetFieldErrorMessage("diaChiNguoiNhan", VIB.LocalizeString.ERRDIACHINOTVALID);
            }

            return false;
        } else {
            Util.SetFieldErrorMessage("diaChiNguoiNhan");
        }

        return true;
    },
    ValidPassport: function (isSkipShowErrorField) {
        var val = $('#passport').val() || "";
        if (!val && transferIBA.formModel.selectedPurposeTransfer.requirepassport) {
            if (!isSkipShowErrorField) {
            Util.SetFieldErrorMessage("passport", VIB.LocalizeString.ERRKHONGNHAPHOCHIEU);
            }

            return false;
        } else {
            Util.SetFieldErrorMessage("passport");
        }

        var passportEndDate = $('#passportEndDate').val() || "";
        if (!passportEndDate && transferIBA.formModel.selectedPurposeTransfer.requirepassport) {
            if (!isSkipShowErrorField) {
            Util.SetFieldErrorMessage("passportEndDate", VIB.LocalizeString.ERRKHONGCHONNGAYHETHAN);
            }

            return false;
        } else if (passportEndDate && !DateTimeUtil.IsValidDate(passportEndDate)) {
            if (!isSkipShowErrorField) {
            Util.SetFieldErrorMessage("passportEndDate", VIB.LocalizeString.ERRNGAYHETHANNOTVALID);
            }

            return false;
        } else {
            var now = new Date();
            var month = now.getMonth();
            //  var day = now.getDate();
            //  now.setDate(day + 3);
            now.setMonth(month + 1);
            var expiredStr = passportEndDate.split('/');
            var expiredDate = new Date(expiredStr[2], expiredStr[1], expiredStr[0]);
            if (now.getTime() > expiredDate.getTime()) {
                if (!isSkipShowErrorField) {
                Util.SetFieldErrorMessage("passportEndDate", VIB.LocalizeString.ERRNGAYHETHANKHONGHOPLE);
                }

                return false;
            } else {
                Util.SetFieldErrorMessage("passportEndDate");
            }
        }

        return true;
    },
    ValidVisa: function (isSkipShowErrorField) {
        var visa = $('#visa').val() || "";
        if (!visa &&
            transferIBA.formModel.selectedPurposeTransfer.requirevisa &&
            !transferIBA.formModel.selectedCountry.ibavisaexemption) {
            if (!isSkipShowErrorField) {
            Util.SetFieldErrorMessage("visa", VIB.LocalizeString.ERRKHONGNHAPVISA);
            }

            return false;
        } else {
            Util.SetFieldErrorMessage("visa");
        }

        var val = $('#visaEndDate').val() || "";
        if (!val && transferIBA.formModel.selectedPurposeTransfer.requirevisa && !transferIBA.formModel.selectedCountry.ibavisaexemption) {
            if (!isSkipShowErrorField) {
            Util.SetFieldErrorMessage("visaEndDate", VIB.LocalizeString.ERRKHONGCHONNGAYHETHAN);
            }

            return false;
        } else if (val && !DateTimeUtil.IsValidDate(val)) {
            if (!isSkipShowErrorField) {
            Util.SetFieldErrorMessage("visaEndDate", VIB.LocalizeString.ERRNGAYHETHANNOTVALID);
            }

            return false;
        } else {
            var now = new Date();
            var month = now.getMonth();
            now.setMonth(month + 1);
            var expiredStr = val.split('/');
            var expiredDate = new Date(expiredStr[2], expiredStr[1], expiredStr[0]);
            if (now.getTime() > expiredDate.getTime()) {
                if (!isSkipShowErrorField) {
                Util.SetFieldErrorMessage("visaEndDate", VIB.LocalizeString.ERRNGAYHETHANKHONGHOPLE);
                }

                return false;
            } else {
                Util.SetFieldErrorMessage("visaEndDate");
            }
        }
        return true;
    },
    ValidAccountForTransfer: function (isSkipShowErrorField) {
        if (!transferIBA.formModel.selectedAccountTransfer) {
            if (!isSkipShowErrorField) {
            Util.SetFieldErrorMessage("fromAcc", VIB.LocalizeString.ERRKHONGCHONTKCHUYEN);
            }

            return false;
        } else {
            Util.SetFieldErrorMessage("fromAcc");
        }
        return true;
    },
    ValidCCY: function (isSkipShowErrorField) {
        if (!transferIBA.formModel.selectedCCY) {
            if (!isSkipShowErrorField) {
            Util.SetFieldErrorMessage("ccy", VIB.LocalizeString.ERRKHONGCHONLOAITIEN);
            }

            return false;
        } else if (transferIBA.formModel.selectedCountry.ibaalwayrequireiban) {
            if (!isSkipShowErrorField) {
            Util.SetFieldErrorMessage("iban", VIB.LocalizeString.ERRKHONGNHAPIBAN);
            }

            return false;
        } else if (transferIBA.formModel.selectedCCY == 'EUR' &&
            transferIBA.formModel.selectedCountry.ibarequireiban &&
            $('#iban').val() == '') {
            if (!isSkipShowErrorField) {
            Util.SetFieldErrorMessage("iban", VIB.LocalizeString.ERRKHONGNHAPIBAN);
            }

            return false;
        } else {
            Util.SetFieldErrorMessage("ccy");
        }
        return true;
    },
    ValidAmount: function (isSkipShowErrorField) {
        var val = $('#amount').val();
        if (val == '') {
            if (!isSkipShowErrorField) {
            Util.SetFieldErrorMessage("amount", VIB.LocalizeString.ERRKHONGNHAPSOTIEN);
            }

            return false;
        } else {
            Util.SetFieldErrorMessage("amount");
            if (!$("#exchangeRateContent:visible").length) {
                return false;
            }
        }

        return true;
    },
    ValidInvoice: function (isSkipShowErrorField) {
        if (transferIBA.formModel.selectedPurposeTransfer.limittype != "INVOICE") {
            return true;
        }
        var val = $('#invoice').val();
        if (val == '') {
            if (!isSkipShowErrorField) {
            Util.SetFieldErrorMessage("invoice", VIB.LocalizeString.ERRKHONGNHAPSOHOADON);
            }

            return false;
        } else if (!REGEX_VALIDSOHOADON.test(val.toLowerCase())) {
            if (!isSkipShowErrorField) {
            Util.SetFieldErrorMessage("invoice", VIB.LocalizeString.ERRSOHOADONKYTUDACBIET);
            }

            return false;
        } else {
            Util.SetFieldErrorMessage("invoice");
        }

        return true;
    },
    ValidFee: function (isSkipShowErrorField) {
        if (!transferIBA.formModel.selectedFee) {
            if (!isSkipShowErrorField) {
            Util.SetFieldErrorMessage("feeSide", VIB.LocalizeString.ERRKHONGCHONFEE);
            }

            return false;
        } else {
            Util.SetFieldErrorMessage("feeSide");
        }

        return true;
    },
    ValidDescription: function () {
        var str = $('#description').val();
        if (str != '' && checkSpecialDescriptionCharacter(str)) {
            Util.SetFieldErrorMessage("description", VIB.LocalizeString.ERRNOIDUNG);
            return false;
        } else {
            Util.SetFieldErrorMessage("description");
        }

        return true;
    }
};

var transferNapasCard = {
    fromBen: false,
    Step: 1,
    DataPopup: {
        TITLE: [
            {
                langquage: "vi-VN",
                value: "Danh sách ngân hàng hỗ trợ"
            }
        ],
        DATA: [
            {
                langquage: "vi-VN",
                key: "ABB",
                value: "Ngân hàng TMCP An Bình"
            },
            {
                langquage: "vi-VN",
                key: "ACB",
                value: "Ngân hàng TMCP Á Châu"
            },
            {
                langquage: "vi-VN",
                key: "Agribank",
                value: "Ngân hàng Nông nghiệp & Phát triển Nông thôn Việt Nam"
            },
            {
                langquage: "vi-VN",
                key: "BAB",
                value: "Ngân hàng TMCP Bắc Á"
            },
            {
                langquage: "vi-VN",
                key: "BIDV",
                value: "Ngân hàng TMCP Đầu tư và Phát triển Việt Nam"
            },
            {
                langquage: "vi-VN",
                key: "BVB",
                value: "Ngân hàng TMCP Bảo Việt"
            },
            {
                langquage: "vi-VN",
                key: "Co-opBank",
                value: "Ngân hàng Hợp tác xã Việt Nam"
            },
            {
                langquage: "vi-VN",
                key: "CIMB",
                value: "Ngân hàng TNHH MTV CIMB"
            },
            {
                langquage: "vi-VN",
                key: "CTG",
                value: "Ngân hàng TMCP Công Thương Việt Nam"
            },
            {
                langquage: "vi-VN",
                key: "DongABank",
                value: "Ngân hàng TMCP Ðông Á"
            },
            {
                langquage: "vi-VN",
                key: "Eximbank",
                value: "Ngân hàng TMCP Xuât nhập khẩu Việt Nam"
            },
            {
                langquage: "vi-VN",
                key: "GPB",
                value: "Ngân hàng Thương mại TNHH MTV Dầu Khí Toàn Cầu"
            },
            {
                langquage: "vi-VN",
                key: "HDB",
                value: "Ngân hàng TMCP Phát Triển Thành Phố Hô Chí Minh"
            },
            {
                langquage: "vi-VN",
                key: "HLB",
                value: "Nhân hàng TNHH MTV Hongleong Việt Nam"
            },
            {
                langquage: "vi-VN",
                key: "IVB",
                value: "Ngân hàng TNHH Indovina"
            },
            {
                langquage: "vi-VN",
                key: "Kienlongbank",
                value: "Ngân hàng TMCP Kiên Long"
            },
            {
                langquage: "vi-VN",
                key: "LPB",
                value: "Ngân hàng TMCP Bưu Ðiện Liên Việt"
            },
            {
                langquage: "vi-VN",
                key: "MB",
                value: "Ngân hàng TMCP Quân Ðội"
            },
            {
                langquage: "vi-VN",
                key: "MSB",
                value: "Ngân hàng TMCP Hàng Hải Việt Nam"
            },
            {
                langquage: "vi-VN",
                key: "NAB",
                value: "Ngân hàng TMCP Nam Á"
            },
            {
                langquage: "vi-VN",
                key: "NCB",
                value: "Ngân hàng TMCP Quốc Dân"
            },
            {
                langquage: "vi-VN",
                key: "OCB",
                value: "Ngân hàng TMCP Phương Ðông"
            },
            {
                langquage: "vi-VN",
                key: "Oceanbank",
                value: "Ngân hàng TMCP Ðại Dương"
            },
            {
                langquage: "vi-VN",
                key: "Public Bank",
                value: "Ngân hàng TNHH MTV Public Việt Nam"
            },
            {
                langquage: "vi-VN",
                key: "PG Bank",
                value: "Ngân hàng TMCP Xăng dầu Petrolimex"
            },
            {
                langquage: "vi-VN",
                key: "PVcomBank",
                value: "Ngân hàng TMCP Ðại Chúng Viêt Nam"
            },
            {
                langquage: "vi-VN",
                key: "Saigonbank",
                value: "Ngân hàng TMCP Sài Gòn Công thương"
            },
            {
                langquage: "vi-VN",
                key: "SCB",
                value: "Ngân hàng TMCP Sài Gòn"
            },
            {
                langquage: "vi-VN",
                key: "SEAB",
                value: "Ngân hàng TMCP Ðông Nam Á"
            },
            {
                langquage: "vi-VN",
                key: "SHB",
                value: "Ngân hàng TMCP Sài Gòn Hà Nội"
            },
            {
                langquage: "vi-VN",
                key: "STB",
                value: "Ngân hàng TMCP Sài Gòn Thương Tín"
            },
            {
                langquage: "vi-VN",
                key: "SHBVN",
                value: "Ngân hàng TNHH MTV Shinhan Việt Nam"
            },
            {
                langquage: "vi-VN",
                key: "TCB",
                value: "Ngân hàng TMCP Kỹ thương Viêt Nam"
            },
            {
                langquage: "vi-VN",
                key: "TPB",
                value: "Ngân hàng TMCP Tiên Phong"
            },
            {
                langquage: "vi-VN",
                key: "UOB",
                value: "Ngân hàng TNHH MTV United Overseas"
            },
            {
                langquage: "vi-VN",
                key: "VAB",
                value: "Ngân hàng TMCP Việt á"
            },
            {
                langquage: "vi-VN",
                key: "VCB",
                value: "Ngân hàng TMCP Ngoại Thương Việt Nam"
            },
            {
                langquage: "vi-VN",
                key: "VCCB",
                value: "Ngân hàng TMCP Bản Việt"
            },
            {
                langquage: "vi-VN",
                key: "VIB",
                value: "Ngân hàng TMCP Quốc tế Việt Nam"
            },
            {
                langquage: "vi-VN",
                key: "VPB",
                value: "Ngân hàng TMCP Việt Nam Thịnh Vượng"
            },
            {
                langquage: "vi-VN",
                key: "VRB",
                value: "Ngân hàng Liên doanh Việt Nga"
            },
            {
                langquage: "vi-VN",
                key: "WRB",
                value: "Ngân hàng TNHH MTV Woori Việt Nam"
            }
        ]
    },
    DataPopupEN: {
        TITLE: [
            {
                langquage: "vi-VN",
                value: "List of beneficiary banks"
            }
        ],
        DATA: [
            {
                langquage: "vi-VN",
                key: "ABB",
                value: "Ngan hang TMCP An Binh"
            },
            {
                langquage: "vi-VN",
                key: "ACB",
                value: "Ngan hang TMCP A Chau"
            },
            {
                langquage: "vi-VN",
                key: "Agribank",
                value: "Ngan hang Nong nghiep & Phat trien Nong thon Viet Nam"
            },
            {
                langquage: "vi-VN",
                key: "BAB",
                value: "Ngan hang TMCP Bac A"
            },
            {
                langquage: "vi-VN",
                key: "BIDV",
                value: "Ngan hang TMCP Dau tu va Phat trien Viet Nam"
            },
            {
                langquage: "vi-VN",
                key: "BVB",
                value: "Ngan hang TMCP Bao Viet"
            },
            {
                langquage: "vi-VN",
                key: "Co-opBank",
                value: "Ngan hang Hop tac xa Viet Nam"
            },
            {
                langquage: "vi-VN",
                key: "CIMB",
                value: "Ngan hang TNHH MTV CIMB"
            },
            {
                langquage: "vi-VN",
                key: "CTG",
                value: "Ngan hang TMCP Cong Thuong Viet Nam"
            },
            {
                langquage: "vi-VN",
                key: "DongABank",
                value: " Ngan hang TMCP Dong A"
            },
            {
                langquage: "vi-VN",
                key: "Eximbank",
                value: "Ngan hang TMCP Xuat nhap khau Viet Nam"
            },
            {
                langquage: "vi-VN",
                key: "GPB",
                value: "Ngan hang Thuong mai TNHH MTV Dau Khi Toan Cau"
            },
            {
                langquage: "vi-VN",
                key: "HDB",
                value: "Ngan hang TMCP Phat Trien Thanh Pho Ho Chi Minh"
            },
            {
                langquage: "vi-VN",
                key: "HLB",
                value: "Nhan hang TNHH MTV Hongleong Viet Nam"
            },
            {
                langquage: "vi-VN",
                key: "IVB",
                value: "Ngan hang TNHH Indovina"
            },
            {
                langquage: "vi-VN",
                key: "Kienlongbank",
                value: "Ngan hang TMCP Kien Long"
            },
            {
                langquage: "vi-VN",
                key: "LPB",
                value: "Ngan hang TMCP Buu Dien Lien Viet"
            },
            {
                langquage: "vi-VN",
                key: "MB",
                value: "Ngan hang TMCP Quan Doi"
            },
            {
                langquage: "vi-VN",
                key: "MSB",
                value: "Ngan hang TMCP Hang Hai Viet Nam"
            },
            {
                langquage: "vi-VN",
                key: "NAB",
                value: "Ngan hang TMCP Nam A"
            },
            {
                langquage: "vi-VN",
                key: "NCB",
                value: "Ngan hang TMCP Quoc Dan"
            },
            {
                langquage: "vi-VN",
                key: "OCB",
                value: "Ngan hang TMCP Phuong Dong"
            },
            {
                langquage: "vi-VN",
                key: "Oceanbank",
                value: "Ngan hang TMCP Dai Duong"
            },
            {
                langquage: "vi-VN",
                key: "Public Bank",
                value: "Ngan hang TNHH MTV Public Viet Nam"
            },
            {
                langquage: "vi-VN",
                key: "PG Bank",
                value: "Ngan hang TMCP Xang dau Petrolimex"
            },
            {
                langquage: "vi-VN",
                key: "PVcomBank",
                value: "Ngan hang TMCP Dai Chung Viet Nam"
            },
            {
                langquage: "vi-VN",
                key: "Saigonbank",
                value: "Ngan hang TMCP Sai Gon Cong thuong"
            },
            {
                langquage: "vi-VN",
                key: "SCB",
                value: "Ngan hang TMCP Sai Gon"
            },
            {
                langquage: "vi-VN",
                key: "SEAB",
                value: "Ngan hang TMCP Dong Nam A"
            },
            {
                langquage: "vi-VN",
                key: "SHB",
                value: "Ngan hang TMCP Sai Gon Ha Noi"
            },
            {
                langquage: "vi-VN",
                key: "STB",
                value: "Ngan hang TMCP Sai Gon Thuong Tin"
            },
            {
                langquage: "vi-VN",
                key: "SHBVN",
                value: "Ngan hang TNHH MTV Shinhan Viet Nam"
            },
            {
                langquage: "vi-VN",
                key: "TCB",
                value: "Ngan hang TMCP Ky thuong Viet Nam"
            },
            {
                langquage: "vi-VN",
                key: "TPB",
                value: "Ngan hang TMCP Tien Phong"
            },
            {
                langquage: "vi-VN",
                key: "UOB",
                value: "Ngan hang TNHH MTV United Overseas"
            },
            {
                langquage: "vi-VN",
                key: "VAB",
                value: "Ngan hang TMCP Viet a"
            },
            {
                langquage: "vi-VN",
                key: "VCB",
                value: "Ngan hang TMCP Ngoai Thuong Viet Nam"
            },
            {
                langquage: "vi-VN",
                key: "VCCB",
                value: "Ngan hang TMCP Ban Viet"
            },
            {
                langquage: "vi-VN",
                key: "VIB",
                value: "Ngan hang TMCP Quoc te Viet Nam"
            },
            {
                langquage: "vi-VN",
                key: "VPB",
                value: "Ngan hang TMCP Viet Nam Thinh Vuong"
            },
            {
                langquage: "vi-VN",
                key: "VRB",
                value: "Ngan hang Lien doanh Viet Nga"
            },
            {
                langquage: "vi-VN",
                key: "WRB",
                value: "Ngan hang TNHH MTV Woori Viet Nam"
            }
        ]
    },
    AccountList: [],
    TransferContinueStep1: function () {
        $("#CardName").val('');
        $("#CardNo").val('');
        var no = $("#txtNo").val().trim();
        if (no) {
            var accountInfo = "";
            accountInfo = transferService.GetNapasCardAccount(no, true);
            $.when(accountInfo).done(function (accountInfoResult) {
                if (accountInfoResult.STATUSCODE === StatusCode.Successed) {
                    transferService.GetAccountForTransfer(Module.NAPASCARD).done(function (accountForTransferResult) {
                        if (accountForTransferResult.STATUSCODE === StatusCode.Successed) {
                            transferNapasCard.AccountList = accountForTransferResult.DATA;
                            //accountInfoResult.SubPageType = getSubPageType();// subPageType;
                            $("#transferViaNapasCardDetail").show();
                            transferNapasCard.InitDetailFormEvent();
                            $("#toAccNo").text($("#txtNo").val());
                            $(".palaceHolder").css("margin-top", "0px");
                            $("#toAcctName").text(accountInfoResult.DATA.CardName);
                            $("#toCardNo").text(accountInfoResult.DATA.CardNo);
                            $("#fromAccGroup").empty();
                            transferNapasCard.InitDropdownEvent("fromAccGroup");
                            Util.InitAccountListControl("fromAcc", accountForTransferResult, "fromAccGroup");
                            transferNapasCard.InittransferViaNapasCardEvent();
                            transferNapasCard.SetDropdownValue('#fromAcc');
                        } else {
                            Util.ShowErrorMessage(accountForTransferResult.MESSAGE);
                        }
                    });
                } else {
                    //$("#transferViaNapasCardDetail").empty();
                    $("#transferViaNapasCardDetail").hide();
                    $("#txtAmount").val('');
                    $("#txtAmountError").text('');
                    Util.ShowErrorMessage(accountInfoResult.MESSAGE);
                }
            });
        }
    },
    TransferContinueStep2: function () {
        $("#otpContent").empty();
        var no = $("#txtNo").val().trim();
        var fromAcc = $("#fromAcc div.selected").attr("data-value");
        var amount = $("#txtAmount").autoNumeric("get");
        var description = $("#txtDescription").val();
        var isAddBen = $("#addben").prop('checked');

        if ($("#txtAmount").val() === null || $("#txtAmount").val() === '' || amount === 0) {
            Util.SetFieldErrorMessage('Amount', VIB.LocalizeString.ERRKHONGNHAPSOTIEN);
            scrollViewport()
            return null;
        }

        if (Util.CheckSpecialDescriptionCharacter(description)) {
            transferNapasCard.CheckDescription();
            return null;
        }

        if (amount > 300000000) {
            Util.ShowErrorMessage(VIB.LocalizeString.LimitTransferAmount);
            return null;
        }

        var validateRequest = "";
        validateRequest = transferService.ValidateTransferViaNapasCard(fromAcc, no, amount, description, isAddBen);

        $.when(validateRequest).done(function (result) {
            if (result.STATUSCODE !== StatusCode.Successed) {
                Util.ShowErrorMessage(result.MESSAGE);
                return null;
            }
            //displayConfirmationContent(no, result, scheduleType);

            transferNapasCard.Step = 2;
            $("#btnPrev").show();
            transferNapasCard.DisplayConfirmationContent(no, result);
            scrollViewport();
        });
    },
    DisplayConfirmationContent: function (toAcctNo, validateResult) {
        $('#ConfirmTitle').text($('#ConfirmTitle').text().toUpperCase())
        //$('#transferDetail .absolute-button-bottom').width($('.detail-value').width());

        transferNapasCard.DisplayHideSubMenu();
        transferNapasCard.DisplayHideTransferViaNapasCardContent();
        transferNapasCard.DisplayHideConfirmationContent(true);
        var fromAcc = $("#fromAcc div.selected").attr("data-display");
        var toAcctName = $("#toAcctName").text();
        var globalId = $("#toGlobalId").text();
        var acceptDateConfirm = $("#toGlobalDateOfIssue").text();
        var description = $("#txtDescription").val();
        var amount = $("#txtAmount").val();

        var renderData = {
            FromAcctNo: fromAcc,
            ToAcctNo: toAcctNo,
            ToAcctName: toAcctName,
            Amount: amount + ' ' + validateResult.DATA.Ccy,
            Fee: validateResult.DATA.Fee + ' ' + validateResult.DATA.Ccy,
            TotalAmount: validateResult.DATA.TotalAmount + ' ' + validateResult.DATA.Ccy,
            Description: validateResult.DATA.Description,
            When: validateResult.DATA.When,
        };
        $("#amountConfirm").text(renderData.Amount);
        $("#toAccountConfirm").text(renderData.ToAcctNo);
        $("#toAccountNameConfirm").text(renderData.ToAcctName);

        var fromDataValue = $("#fromAcc div.selected").attr("data-value");
        var fromAccValue = transferNapasCard.AccountList.find(function (res) { return res.Value === fromDataValue }).Text;
        $("#fromAccountConfirm").text(fromAccValue);
        $("#fromAccountConfirm").attr('data-value', fromAccValue);
        $("#transactionFeeConfirm").text(renderData.Fee);
        $("#totalAmountConfirm").text(renderData.TotalAmount);
        $("#descriptionConfirm").text(renderData.Description);
        $("#timeConfirm").text(renderData.When);

        var renderData = {
            IsPopup: false,
            TransactionSigning: validateResult.DATA.TransactionSigning,
            TransactionId: validateResult.DATA.TransactionId
        }
        $('#otpContent').empty();
        $("#otpTemplate").tmpl(renderData).appendTo($("#otpContent"));
        Util.RegisterOTPEvent();
        // TODO: Xử lý get OTP ở case SMSOTP
        $('#btnGetOTP').click(function () {
            transferNapasCard.GetOTP();
        });
    },
    DisplayTransferResultContent: function (result, isFailed) {
        $(".transfer-confirm").hide();
        if (isFailed) {
            $("#errorMessageNapasCard").html(result.MESSAGE);
            $(".transfer-result-error").show();
            transferNapasCard.Step = 3;
        } else {
            $("#lblTranNum").html(result.DATA.TRANSNUM);
            $("#fromAccountConfirm").html($('#fromAccountConfirm').attr('data-value'));
            $(".transfer-confirm").hide();
            $(".transfer-result").show();
        }
        $("#btnPrev").hide();
        $("#btnNext").hide();
        $("#btnComplete").show();
        scrollViewport();
    },
    DisplayHideSubMenu: function (isDisplay) {
        if (isDisplay) {
            $("#rightContent").find("#transferDetail").parent().children(":not(#transferDetail):not(.btn-footer-fixed)").show();
            $("#leftContent").show();
        } else {
            $("#rightContent").find("#transferDetail").parent().children(":not(#transferDetail):not(.btn-footer-fixed)").hide();
            $("#leftContent").hide();
        }
    },
    DisplayHideTransferViaNapasCardContent: function (isDisplay) {
        if (isDisplay) {
            $("#transferViaNapasCardContent").show();
            $("#transferViaNapasCardDetail").show();
        } else {
            $("#transferViaNapasCardContent").hide();
            $("#transferViaNapasCardDetail").hide();
        }
    },
    DisplayHideConfirmationContent: function (isDisplay) {
        if (isDisplay) {
            $("#confirmationContent").show();
        } else {
            $("#confirmationContent").hide();
        }
    },
    ValidateStep1Input: function (no) {
        if (!$.isNumeric(no) || no.length < 16 || no.length > 19) {
            return false;
        }
        return true;
    },
    Continue: function () {
        if ($("#toAcctName").text() === null || $("#toAcctName").text().trim() === '') {
            var no = $("#txtNo").val().trim();
            if (no) {
                var oldAcctNo = $("#txtNo").attr("data-value");
                $("#txtNo").attr("data-value", no);
                if (oldAcctNo === no) return;

                if (!transferNapasCard.ValidateStep1Input(no)) {
                    Util.SetFieldErrorMessage('txtNo', VIB.LocalizeString.InvalidCard);
                    $('#toAcctName').empty();
                    $('#transferViaNapasCardDetail').hide();
                    scrollViewport()
                    return;
                }
                Util.SetFieldErrorMessage('txtNo');
                transferNapasCard.TransferContinueStep1();
            } else {
                Util.SetFieldErrorMessage('txtNo', VIB.LocalizeString.NoInputCard);
            }

        } else {
            transferNapasCard.TransferContinueStep2();
        }
    },
    InittransferViaNapasCardEvent: function () {
        Util.SetAmountFormat("txtAmount");
        $('#fromAcc .item1').on('click', function () {
            var ccy = $(this).attr("data-display-ccy");
            $("#txtAmount").prev().addClass('formTop');

            transferNapasCard.ExchangeRate();
            Util.SetAmountFormat("txtAmount", ccy);
        });

        $("#txtAmount").on("change", function () {
            var amount = $("#txtAmount").autoNumeric("get");
            if (amount > 300000000) {
                //Util.ShowInfoMessage(VIB.LocalizeString.LimitTransferAmount);
                Util.SetFieldErrorMessage('Amount', VIB.LocalizeString.LimitTransferAmount)
            } else {
                Util.SetFieldErrorMessage('Amount')
                transferNapasCard.ExchangeRate();
            }
        });

        Util.InitAmountControlEvent("txtAmount", "fromAcc", "txtAmountCCY");

        $("#txtDescription").change(function (e) {
            transferNapasCard.CheckDescription();
        });
    },
    CheckCard: function () {
        transferNapasCard.TransferContinueStep1();
    },
    CheckDescription: function () {
        var description = $("#txtDescription").val();
        if (checkSpecialDescriptionCharacter(description)) {
            //Util.ShowInfoMessage(VIB.LocalizeString.InvalidDescription);
            Util.SetFieldErrorMessage('Description', VIB.LocalizeString.InvalidDescription)
        } else {
            Util.SetFieldErrorMessage('Description')
        }
    },
    OnClick: function (event) {
        $(event).children('input[type=text]').focus();
    },
    Submit: function () {
        var otp = $("#txtOtp1").val() + $("#txtOtp2").val() + $("#txtOtp3").val() + $("#txtOtp4").val() + $("#txtOtp5").val() + $("#txtOtp6").val();
        if (otp.length === 0) {
            Util.SetOTPErrorMessage(true, VIB.LocalizeString.EmptyOTP);
            return;
        }
        if (otp.length !== 6) {
            Util.SetOTPErrorMessage(true, VIB.LocalizeString.OTPInvalid);
            return;
        }
        var submitRequest = "";
        submitRequest = transferService.SubmitNapasCardAccount(otp);

        $.when(submitRequest).done(function (result) {
            if (result.STATUSCODE !== StatusCode.Successed) {
                if (result.ALLOWRETRYOTP) {
                    Util.SetOTPErrorMessage(true, result.MESSAGE);
                    return null;
                } else {
                    transferNapasCard.DisplayTransferResultContent(result, true);
                    return null;
                }
            }
            transferNapasCard.Step = 3;
            transferNapasCard.DisplayTransferResultContent(result);
        });
    },
    Back: function () {
        transferNapasCard.DisplayHideSubMenu(true);
        transferNapasCard.DisplayHideConfirmationContent();
        transferNapasCard.DisplayHideTransferViaNapasCardContent(true);
        transferNapasCard.Step = 1;
        if (!transferNapasCard.fromBen) {
            $("#btnPrev").hide();
        }
        scrollViewport();
    },
    GetOTP: function () {
        return transferService.GetOTP();
    },
    InitDetailFormEvent: function () {
        $("#txtAmount").focus(function () {
            $(this).prev().addClass('formTop');
        });
        $("#txtDescription").focus(function () {
            $(this).prev().addClass('formTop');
        });
    },
    InitFormEvent: function () {
        $("#txtNo").keyup(function (e) {
            var code = (e.keyCode ? e.keyCode : e.which);
            if (code === 13) { //Enter keycode
                var no = $("#txtNo").val();
                if (no.trim()) {
                    me.Continue(true);
                }
            } else {
                transferNapasCard.CheckForm();
            }
        });
        $("#txtNo").focus(function () {
            $(this).prev().addClass('formTop');
        });
        $("#txtNo").blur(function () {
            if ($(this).val().length > 0) {
                $(this).prev().addClass('formTop');
            } else {
                $(this).prev().removeClass('formTop');
            }
        });

        $("#toAcctName").blur(function () {
            if ($(this).val().length > 0) {
                $(this).prev().addClass('formTop');
            } else {
                $(this).prev().removeClass('formTop');
            }
        });

        $("#txtNo").on("input", function (e) {
            var self = $(this);
            self.val(self.val().replace(/[^0-9]/g, ''));
            if ((e.which != 46 || self.val().indexOf('.') != -1) && (e.which < 48 || e.which > 57)) {
                e.preventDefault();
            }
        });
        $(".palaceHolder").css("margin-top", "9px");
    },
    InitTxtNoEvent: function (fromBen = false) {
        $("#txtNo").change(function (e) {
            var oldAcctNo = $("#txtNo").attr("data-value");
            $("#txtNo").attr("data-value", e.target.value);
            if (oldAcctNo === e.target.value) return;

            if (e.target.value && !transferNapasCard.ValidateStep1Input(e.target.value)) {
                $('#toAcctName').empty();
                $('#transferViaNapasCardDetail').hide();
                Util.SetFieldErrorMessage('txtNo', VIB.LocalizeString.InvalidCard)
                return
            }
            Util.SetFieldErrorMessage('txtNo');

            if (e.target.value) {
                transferNapasCard.CheckCard();
            } else {
                if (!fromBen) {
                    $('#toAcctName').empty();
                    $('#transferViaNapasCardDetail').hide();
                }
            }
        });
    },
    InitDropdownEvent: function (elementId) {
        $("#" + elementId + " .item1").on('click', function () {
            $(this).parent().find(".item1").removeClass('selected');
            var $dropParent = $(this).addClass('selected').parent().parent();
            var text = $(this).clone().children("p").remove().end().text();
            $dropParent.removeClass('open').children('.caption').text(text);
            $dropParent.parent().children('.formLabel').addClass('formTop');
        });
        $("#" + elementId + " .caption").on('click', function () {
            if ($(this).parent().hasClass("open")) {
                $(this).parent().removeClass("open");
                return;
            }
            $(this).parent().toggleClass('open');
        });
    },
    ExchangeRate: function () {
        if ($("#fromAcc div.selected").attr("data-Ccy") !== "VND") {
            $("#txtExchangeAmount").html("");
            $("#txtExchangeRate").html("");
            var fromAcctNo = $("#fromAcc div.selected").attr("data-value");
            var toAcctNo = $("#txtNo").val();
            var amount = $("#txtAmount").autoNumeric("get");
            if (fromAcctNo && toAcctNo && amount > 0) {
                transferService.GetExchangeRate(fromAcctNo, toAcctNo, amount).done(function (result) {
                    if (result.DATA) {
                        $("#txtExchangeAmount").html(result.DATA.ToAmount);
                        $("#txtExchangeRate").html(result.DATA.ExchangeRate);
                    }
                    $("#exchangeRateContent").show();
                });
            }
        } else {
            $("#exchangeRateContent").hide();
        }
    },
    SetDropdownValue: function (element) {
        var listElement = $(element).find(".item1");
        listElement.removeClass('selected');
        if (listElement.length > 0) {
            var $dropParent = $(listElement[0]).addClass('selected').parent().parent();
            var text = $(listElement[0]).attr("data-display");
            $dropParent.removeClass('open').children('.caption').text(text);
            $dropParent.parent().children('.formLabel').addClass('formTop');
        }
    },
    CheckForm: function () {
        var no = $("#txtNo").val().trim();
        if (no) {
            var oldAcctNo = $("#txtNo").attr("data-value");
            if (oldAcctNo === no) {
                return;
            }
        }
    },
    onBlur: function (event) {
        if ($(event).val().length > 0) { $(event).prev().addClass('formTop') } else { $(event).prev().removeClass('formTop') }
    },

};
var transferViaLBA = {
    Step: 1,
    accountForTransfer: [],
    LBAStateList: [],
    LBABankList: [],
    isFastBankTransfer: false,
    isBenTransfer: false,
    isOtherBank: false,
    benAcctName: "",
    benAcctNo: "",
    benBankCode: "",
    benBankName: "",
    benBankBranchCode: "",
    benBankBranchNames: "",
    benBankStateCode: "",
    // Du lieu check call API AccountForTransfer NAPASCARD, LBA
    accTypeNapasCard: "NAPASCARD",
    accTypeLBA: "LBA",
    arrAccountTransferLBANapas: [],
    validateDisabledNext: true,
    formModel: {
        selectedBank: {
        },
    },
    AccountList: [],
    OnBankSelected: function (selectedId) {
        var selectedBank = transferViaLBA.LBABankList.filter(function (item) { return item.Code === selectedId })[0];
        if (!selectedBank) {
            return;
        }
        transferViaLBA.formModel.selectedBank.code = selectedBank.Code;
        transferViaLBA.formModel.selectedBank.id = selectedBank.id;
        transferViaLBA.formModel.selectedBank.name = selectedBank.Name;
        transferViaLBA.formModel.selectedBank.fast = selectedBank.fast;
        Util.SetFieldErrorMessage('receivedBank');
        $(".bank-search-result").show();
        Util.InitInputTable();

        var isFastTransferString = $('input[type=radio][name=transfer-type]').attr("data-value");
        transferViaLBA.HandleReceivedBankSelected(isFastTransferString);
        transferViaLBA.RegetAcctTranfer(isFastTransferString);

    },
    Continue: function () {
        var toBankCode = "";
        var toBankName = "";
        if (!transferViaLBA.isBenTransfer) {
            var current = transferViaLBA.formModel.selectedBank;
            if (current && current.code == "OTHER") {
                toBankCode = "000";
                toBankName = $("#txtReceivedBank").val();
            } else {
                toBankCode = current.code;
                toBankName = current.name;
            }
        } else {
            toBankCode = transferViaLBA.benBankCode;
            toBankName = transferViaLBA.benBankName;
        }
        var fromAcc = $("#fromAcc .item1.selected").attr("data-value");
        var amount = $("#txtAmount").autoNumeric("get");
        var description = $("#txtDescription").val();
        var isAddBen = $("#addben").prop('checked');
        if (!transferViaLBA.IsFastTransfer()) {
            var state = $("#state .item1.selected").attr("data-value");
            var extBranchCode = $("#extBranch .item1.selected").attr("data-value");
            var extBranchName = $("#txtExtBranch").val() || $("#extBranch .item1.selected").attr("data-display");
            var toAcctNo = $("#txtToAcctNo").val() || $("#txtNo").html();
            var toAcctName = $("#txtToAcctName").val() || $("#lblToAcctName").html();
            var scheduleDate = "", scheduleRegularFreq = "", scheduleRegularEndType = "", scheduleRegularEndValue = "";

            var stateGroup = $("#stateGroup .caption").text();
            if (!stateGroup) {
                Util.SetFieldErrorMessage('stateGroup', VIB.LocalizeString.ERROR_INVALIDS_SELECTITEMCITY);
                return;
            }

            var extBranchGroup = $("#extBranchGroup .caption").text();
            if (!extBranchGroup) {
                Util.SetFieldErrorMessage('extBranchGroup', VIB.LocalizeString.ERROR_INVALIDS_SELECTITEMBRANCH);
                return;
            }

            if (!transferViaLBA.ValidAmount()) {
                return false;
            }

            if (toAcctNo.length < 5) {
                Util.SetFieldErrorMessage("txtToAcctNo", VIB.LocalizeString.InvalidToAcctNo);
                return;
            }
            else {
                Util.SetFieldErrorMessage("txtToAcctNo");
            }

            if (checkSpecialDescriptionCharacter(description)) {
                Util.SetFieldErrorMessage("txtDescription", VIB.LocalizeString.InvalidDescription);
                return null;
            } else {
                Util.SetFieldErrorMessage("txtDescription");
            }

            if (checkAccountNameCharacter(toAcctName)) {
                Util.SetFieldErrorMessage("txtToAcctName", VIB.LocalizeString.InvalidToAcctName);
                return null;
            } else {
                Util.SetFieldErrorMessage("txtToAcctName");
            }

            var scheduleType = $("input[name=transfer-option2]:checked").attr("data-value");
            var scheduleDate = "", scheduleRegularFreq = "", scheduleRegularEndType = "", scheduleRegularEndValue = "";

            if (scheduleType === ScheduleType.Later) {
                scheduleDate = $("#endDate").text();
                if (!scheduleDate) {
                    Util.ShowErrorMessage(VIB.LocalizeString.InvalidSelectedDate);
                    return null;
                }
            }

            if (scheduleType === ScheduleType.Scheduled) {
                scheduleRegularFreq = $("#scheduleRegularFreq .item1.selected").attr("data-value");
                if (!scheduleRegularFreq) {
                    Util.ShowErrorMessage(VIB.LocalizeString.InvalidScheduleRegularFreq);
                    return null;
                }
                scheduleRegularEndType = $("#dropdownPopup .list .item1.selected").attr("data-value");
                if (!scheduleRegularEndType) {
                    Util.ShowErrorMessage(VIB.LocalizeString.InvalidScheduleRegularEndType);
                    return null;
                }

                if (scheduleRegularEndType !== ScheduleRegularEndType.NoEnd) {
                    if (scheduleRegularEndType === ScheduleRegularEndType.EndAfter) {
                        scheduleRegularEndValue = $("#endTransferTime").val();
                        if (!scheduleRegularEndValue) {
                            Util.ShowErrorMessage(VIB.LocalizeString.InvalidEndAfterNumber);
                            return null;
                        }
                    } else if (scheduleRegularEndType === ScheduleRegularEndType.EndOn) {
                        scheduleRegularEndValue = $("#loopAfterDatePicker").val();
                        if (!scheduleRegularEndValue) {
                            Util.ShowErrorMessage(VIB.LocalizeString.InvalidSelectedDate);
                            return null;
                        }
                        if (!DateTimeUtil.IsValidDate(scheduleRegularEndValue)) {
                            Util.ShowErrorMessage(VIB.LocalizeString.InValidDate);
                            return null;
                        }
                        if (moment(scheduleRegularEndValue, "DD/MM/YYYY") < moment(dtnow, "DD/MM/YYYY")) {
                            Util.ShowErrorMessage(VIB.LocalizeString.InvalidPastDate);
                            return null;
                        }
                    }
                }
                scheduleDate = $("#startDate").val();
                if (!scheduleDate) {
                    Util.ShowErrorMessage(VIB.LocalizeString.InvalidSelectedDate);
                    return null;
                }
            }

            if (scheduleDate && !DateTimeUtil.IsValidDate(scheduleDate)) {
                Util.ShowErrorMessage(VIB.LocalizeString.InValidDate);
                return null;
            }

            if (moment(scheduleDate, "DD/MM/YYYY") < moment(dtnow, "DD/MM/YYYY")) {
                Util.ShowErrorMessage(VIB.LocalizeString.InvalidPastDate);
                return null;
            }

            transferService.ValidateTransferViaLBA(fromAcc, toAcctNo, toAcctName, toBankCode, toBankName, state, extBranchCode, extBranchName, amount, description, isAddBen,
                scheduleType, scheduleDate, scheduleRegularFreq, scheduleRegularEndType, scheduleRegularEndValue, bendId).done(function (result) {
                    if (result.STATUSCODE !== StatusCode.Successed) {
                        Util.ShowErrorMessage(result.MESSAGE);
                        return null;
                    }
                    transferViaLBA.DisplayConfirmationContent(amount, toBankName, extBranchName, result, scheduleType);
                });
        } else {
            if (!transferViaLBA.ValidAmount()) {
                return false;
            }
            var toAcctNo = $("#txtAcctNo").val() || $("#txtNo").html();
            if (checkSpecialDescriptionCharacter(description)) {
                Util.SetFieldErrorMessage("txtDescription", VIB.LocalizeString.InvalidDescription);
                return null;
            } else {
                Util.SetFieldErrorMessage("txtDescription");
            }
            if (bendId) {
                transferService.GetFastTransferAccountInfoBen(bendId).done(function (result1) {
                    if (result1.STATUSCODE == StatusCode.Successed) {
                        transferService.FastTransferAccountValidate(fromAcc, toAcctNo, toBankCode, amount, description, isAddBen, bendId).done(function (result) {
                            if (result.STATUSCODE !== StatusCode.Successed) {
                                Util.ShowErrorMessage(result.MESSAGE);
                                return null;
                            }
                            transferViaLBA.DisplayConfirmationContent(amount, toBankName, "", result, "");
                        });
                    }
                    else {
                        Util.ShowErrorMessage(result1.MESSAGE);
                    }
                });
            } else {
                transferService.FastTransferAccountValidate(fromAcc, toAcctNo, toBankCode, amount, description, isAddBen, bendId).done(function (result) {
                    if (result.STATUSCODE !== StatusCode.Successed) {
                        Util.ShowErrorMessage(result.MESSAGE);
                        return null;
                    }
                    transferViaLBA.DisplayConfirmationContent(amount, toBankName, "", result, "");
                });
            }
        }
    },
    Back: function () {
        if (!transferViaLBA.isBenTransfer) {
            transferViaLBA.DisplayHideSubMenu(true);
        }
        transferViaLBA.DisplayHideTransferViaLBAContent(true);
        displayHideConfirmationContent();
        transferViaLBA.Step = 1;

        $(".input-session").show();
        $("#leftContent").show();

        scrollViewport();
    },
    GetOTP: function () {
        return transferService.GetOTP();
    },
    Submit: function () {
        var otp = $("#txtOtp1").val() + $("#txtOtp2").val() + $("#txtOtp3").val() + $("#txtOtp4").val() + $("#txtOtp5").val() + $("#txtOtp6").val();
        if (otp.length !== 6) {
            Util.SetOTPErrorMessage(true, VIB.LocalizeString.EmptyOTP);
            return;
        }
        var submitRequest = "";
        if (transferViaLBA.IsFastTransfer()) {
            submitRequest = transferService.FastTransferAccountSubmit(otp);
        } else {
            submitRequest = transferService.SubmitLBA(otp);
        }
        $.when(submitRequest).done(function (result) {
            if (result.STATUSCODE !== StatusCode.Successed) {
                if (result.ALLOWRETRYOTP) {
                    Util.SetOTPErrorMessage(true, result.MESSAGE);
                    return null;
                } else {
                    transferViaLBA.DisplayTransferResultContent(result, true);
                    return null;
                }
            }
            transferViaLBA.DisplayTransferResultContent(result);
        });
    },
    NewTransferClicked: function () {
        if (transferViaLBA.isBenTransfer) {
            window.history.go(-1);
        } else {
            window.location.reload();
        }
        $("#btnPrev").hide();
    },
    DisplayConfirmationContent: function (amount, toBankName, extBranchName, result, scheduleType) {
        transferViaLBA.Step = 2;

        $(".input-session").hide();
        $("#leftContent").hide();
        $("#transferDetail").show();
        $("#btnPrev").show();
        // Hide
        transferViaLBA.DisplayHideSubMenu();
        transferViaLBA.DisplayHideTransferViaLBAContent();
        // Display
        displayHideConfirmationContent(true);
        var isFast = transferViaLBA.IsFastTransfer();
        var fromAcc = $("#fromAcc .item1.selected").attr("data-value");
        var fromAccValue = transferViaLBA.AccountList.find(function (res) {
            return res.Value === fromAcc
        }).Text;
        var renderData = {};
        if (isFast) {
            renderData = {
                IsFast: isFast,
                Amount: $("#txtAmount").val() + " " + result.DATA.Ccy,
                ToAcctNo: ($("#lblToAcctName").html() || $("#lblToAcctName").html()) + " - " + ($("#txtAcctNo").val() || $("#txtNo").html()),
                ToBankName: toBankName,
                FromAcctNo: fromAccValue,
                Fee: result.DATA.Fee + " " + result.DATA.Ccy,
                TotalAmount: result.DATA.TotalAmount + " " + result.DATA.Ccy,
                Description: result.DATA.Description,
                When: scheduleType === ScheduleType.Scheduled ? "" : result.DATA.When
            };
        } else {
            renderData = {
                IsFast: isFast,
                Amount: $("#txtAmount").val() + " " + result.DATA.Ccy,
                ToAcctNo: ($("#txtToAcctName").val() || $("#lblToAcctName").html()) + " - " + ($("#txtToAcctNo").val() || $("#txtNo").html()),
                ToBankName: toBankName,
                State: $("#state .item1.selected").attr("data-display"),
                ExtBranch: extBranchName,
                FromAcctNo: fromAccValue,
                Fee: result.DATA.Fee + " " + result.DATA.Ccy,
                TotalAmount: result.DATA.TotalAmount + " " + result.DATA.Ccy,
                Description: result.DATA.Description,
                When: scheduleType === ScheduleType.Scheduled ? "" : result.DATA.When
            };
        }

        $("#confirmationContent").empty();
        $("#scheduleResult").hide();
        $("#confirmationContentTemplate").tmpl(renderData).appendTo($("#confirmationContent"));


        $("#otpContent").addClass('style3');
        renderData.TransactionSigning = result.DATA.TransactionSigning;
        renderData.TransactionId = result.DATA.TransactionId;
        $("#otpTemplate").tmpl(renderData).appendTo($("#otpContent"));
        Util.RegisterOTPEvent();
        $('#btnGetOTP').click(function () {
            transferViaLBA.GetOTP();
        });

        if (scheduleType === ScheduleType.Scheduled && result.DATA.Schedule) {
            $("#scheduleResult").show();
            if (result.DATA.Schedule.Frequency) {
                $("#scheduleFrequency").html(result.DATA.Schedule.Frequency);
            } else {
                $(".scheduleFrequency").hide();
            }
            if (result.DATA.Schedule.StartDate) {
                $("#scheduleStartDate").html(result.DATA.Schedule.StartDate);
            } else {
                $(".scheduleStartDate").hide();
            }
            if (result.DATA.Schedule.EndDate) {
                $("#scheduleEndDate").html(result.DATA.Schedule.EndDate);
            } else {
                $(".scheduleEndDate").hide();
            }
            if (Number(result.DATA.Schedule.Remain) > 0) {
                $("#scheduleRemain").html(result.DATA.Schedule.Remain);
            } else {
                $(".scheduleRemain").hide();
            }
            if (result.DATA.Schedule.NextDate) {
                $("#scheduleNextDate").html(result.DATA.Schedule.NextDate);
            } else {
                $(".scheduleNextDate").hide();
            }
        }
        scrollViewport();
    },
    DisplayTransferResultContent: function (result, isFailed) {
        if (result.DATA && result.DATA.TRANSNUM) {
            $("#lblTranNum").html(result.DATA.TRANSNUM);
        }
        $(".transfer-confirm").hide();
        if (isFailed) {
            $("#errorMessage").html(result.MESSAGE);
            $(".transfer-result-error").show();
            transferViaLBA.Step = 3;
            $("#btnPrev").hide();
            $("#btnNext").hide();
            $("#btnComplete").show();
        } else {
            var scheduleType = $("input[name=transfer-option]:checked").attr("data-value");
            if (scheduleType == ScheduleType.Later || scheduleType == ScheduleType.Scheduled) {
                $("#successMesage").html(VIB.LocalizeString.ScheduleSuccess);
            }
            $(".transfer-result").show();
            transferViaLBA.Step = 3;
            $("#btnPrev").hide();
            $("#btnNext").hide();
            $("#btnComplete").show();
        }
        scrollViewport();
    },
    HandleReceivedBankSelected: function (isFastString) {
        $("#fastTransferSelection").show();
        var isFast = false;
        var isSpec = false;
        $("#lbAgriBank").css('display', 'none');
        var current = transferViaLBA.formModel.selectedBank;
        if (current.code == "204") {
            $("#lbAgriBank").css('display', 'block');
        } 

        isFast = isFastString === "Y";

        if (current.fast === "N") {
            isFast = false;
            $("#fastTransferSelection").hide();
        } else {
            $("#fastTransferSelection").show();
            isSpec = true;
        }
        $("#receivedBankOtherPannel").hide();
        var lstradio = $("input[type=radio][name=transfer-type]");
        if (current && current.code === "OTHER") {
            $("#txtReceivedBank").val("");
            $("#receivedBankOtherPannel").show();
            $("#transferViaLBADetail").hide();
            $("#fastTransferSelection").hide();
            transferViaLBA.isOtherBank = true;
            lstradio[0].disabled = true;
            Util.SetFieldErrorMessage('txtReceivedBank');
            $("#txtReceivedBank").on("change", function () {
                $(this).val(transferViaLBA.ChangeVietCharacter($(this).val()));
                transferViaLBA.ValidOtherBankName();
                if ($(this).val().length > 0) {
                    $("#fastTransferSelection").show();
                    $("#transferViaLBADetail").show();
                } else {
                    $("#transferViaLBADetail").hide();
                }
            });
            isFast = false;
        } else {
            $("#transferViaLBADetail").show();
            transferViaLBA.isOtherBank = false;
            lstradio[0].disabled = false;
        }

        if (isFast) {
            lstradio[0].checked = true;
        } else {
            lstradio[0].checked = false;
            lstradio[1].checked = true;
        }

        var renderData = {
            IsFast: isFast,
            IsBenTransfer: transferViaLBA.isBenTransfer,
            AcctName: transferViaLBA.benAcctName,
            AcctNo: transferViaLBA.benAcctNo,
            BankName: transferViaLBA.benBankName,
        }
        $("#transferViaLBADetail").empty();
        var accountForTransferRequest = $.Deferred();
        var LBAStateListRequest = $.Deferred();
        if (!isFast) {
            if (transferViaLBA.accountForTransfer.length === 0) {
                accountForTransferRequest = transferService.GetAccountForTransfer(transferViaLBA.accTypeLBA);
            } else {
                accountForTransferRequest.resolve(transferViaLBA.accountForTransfer);
            }
            if (transferViaLBA.LBAStateList.length === 0) {
                LBAStateListRequest = transferService.GetLBAStateList();
            } else {
                LBAStateListRequest.resolve(transferViaLBA.LBAStateList);
            }
            $.when(accountForTransferRequest, LBAStateListRequest).done(function (accountForTransferResult, LBAStateListResult) {
                $("#transferViaLBADetailTemplate").tmpl(renderData).appendTo($("#transferViaLBADetail"));
                $('.row.options input.radio-custom').each(function () {
                    //if ($(this).is(":checked")) {
                    //    $(this).parents('.daily').find('.datepicker-apply').show();
                    //} else {
                    //    $(this).parents('.daily').find('.datepicker-apply').hide();
                    //}
                    $(this).parents('.daily').find('.datepicker-apply').hide();
                });
                $('.row.options input.radio-custom').each(function () {
                    $(this).click(function (e) {
                        $(this).parents('.row.options').find('.datepicker-apply').hide();
                        $("#endDate").text('');
                        $("#datepickermy").datepicker("setDate", null);
                        $("#scheduleRegularFreqGroup .caption").text('');
                        $("#scheduleRegularFreqGroup .item1").removeClass('selected');
                        $('.modal').find('.formLabel').removeClass('formTop');
                        $('.modal').find('input').val('');
                        $("#dropdownPopup .caption").text('');
                        $("#dropdownPopup .item1").removeClass('selected');
                        $('.sub-transf').hide();
                        transferOther.isClosePopupDefault = true;
                        $('input.datepicker-vs3').datepicker("setDate", null);
                    });

                });
                $("#stateGroup").empty();
                $("#stateTemplate").tmpl(LBAStateListResult).appendTo($("#stateGroup"));
                if (transferOther.moduleStr === "LBA") {
                    $('.form-group.b-location').addClass('disabled');
                }
                //$(".show-all").show();
                transferViaLBA.LBAStateList = LBAStateListResult;
                transferViaLBA.InitDropdownEvent("stateGroup");
                if (transferOther.benId) {
                    $("#stateGroup .caption").addClass("disabled").prop('disabled', true);
                    if (isSpec) {
                        $("#stateGroup .caption").removeClass("disabled").prop('disabled', false);
                    }
                }
                if (transferOther.moduleStr === "SMLACCT") {
                    $("#addBenPannel").show();
                }
                $("#stateGroup .item1").on('click', function () {
                    Util.SetFieldErrorMessage('stateGroup');
                    if (!transferViaLBA.isOtherBank) {
                        $("#extBranchGroupPannel").show();
                    } else {
                        $("#extBranchGroupPannel").hide();
                    }
                    var bankCode = "";
                    if (transferViaLBA.isBenTransfer) {
                        bankCode = transferViaLBA.benBankCode;
                    } else {
                        var current = transferViaLBA.formModel.selectedBank;
                        bankCode = current.code;
                    }
                    var state = $(this).attr("data-value");
                    transferService.GetLBAExtBranchList(bankCode, state).done(function (result) {
                        $("#extBranchGroup").empty();
                        // Neu Data null thi khoi tao array empty cho DATA
                        if (!result.DATA) {
                            result.DATA = [];
                        }
                        var other = {
                            Code: "",
                            Name: VIB.LocalizeString.Other,
                        };
                        result.DATA.push(other);

                        $("#extBranchTemplate").tmpl(result).appendTo($("#extBranchGroup"));
                        if (transferOther.benId) {
                            $("#extBranchGroup .caption").addClass("disabled").prop('disabled', true);
                            if (isSpec) {
                                $("#extBranchGroup .caption").removeClass("disabled").prop('disabled', false);
                            }
                        }
                        transferViaLBA.InitDropdownEvent("extBranchGroup");
                        if (transferViaLBA.isOtherBank) {
                            $("#extBranchGroup .list .item1")[0].click();

                            Util.SetFieldErrorMessage('extBranchGroup');
                            $(".show-all-normal").show();
                            $(".show-all").show();
                            transferViaLBA.CheckContinueButton();
                            if ($($("#extBranchGroup .list .item1")[0]).attr("data-value") === "") {
                                $('#txtExtBranch').attr("maxlength", 63 - $('#stateGroup .item1.selected').text().length - $("#receivedBank").text().length);
                                $("#extBranchPannel").show();
                            } else {
                                $("#extBranchPannel").hide();
                            }
                        }
                        if (transferViaLBA.benBankBranchNames) {
                            $("#extBranchGroup .list .item1").last().click();

                            Util.SetFieldErrorMessage('extBranchGroup');
                            $(".show-all-normal").show();
                            $(".show-all").show();
                            transferViaLBA.CheckContinueButton();
                            if ($($("#extBranchGroup .list .item1").last()).attr("data-value") === "") {
                                $('#txtExtBranch').attr("maxlength", 63 - $('#stateGroup .item1.selected').text().length - $("#receivedBank").text().length);
                                $("#extBranchPannel").show();
                                $("#txtExtBranch").attr("disabled", true);
                                $("#txtExtBranch").val(transferViaLBA.benBankBranchNames);
                                $("#txtExtBranch").parent().children('.formLabel').addClass('formTop');
                            } else {
                                $("#extBranchPannel").hide();
                            }
                        }

                        $("#extBranchGroup .item1").on('click', function () {
                            Util.SetFieldErrorMessage('extBranchGroup');
                            $(".show-all-normal").show();
                            $(".show-all").show();
                            transferViaLBA.CheckContinueButton();
                            if ($(this).attr("data-value") === "") {
                                $('#txtExtBranch').attr("maxlength", 63 - $('#stateGroup .item1.selected').text().length - $("#receivedBank").text().length);
                                $("#extBranchPannel").show();
                            } else {
                                $("#extBranchPannel").hide();
                            }
                        });
                        if (transferViaLBA.isBenTransfer && transferViaLBA.benBankBranchCode) {
                            $("#extBranchGroup .item1[data-value='" + transferViaLBA.benBankBranchCode + "']").click();
                            //$('#extBranchGroup .caption').addClass("disabled");
                            //$('#extBranchGroup').parent().addClass("disabled-caption");
                            //$('#extBranchGroup .caption.disabled').on('click', function() {
                            //    $(this).parent().removeClass('open');
                            //    event.stopPropagation();
                            //});
                        }
                    });
                    transferViaLBA.CheckContinueButton();
                });
                transferViaLBA.AccountList = accountForTransferResult.DATA;
                Util.InitAccountListControl("fromAcc", accountForTransferResult, "fromAccGroup");
                $("#fromAccGroup .item1").on('click', function () {
                    transferViaLBA.CheckContinueButton();
                });
                // Day du lieu vao arrcheck call API
                transferViaLBA.arrAccountTransferLBANapas[transferViaLBA.accTypeLBA] = accountForTransferResult;
                transferViaLBA.accountForTransfer = accountForTransferResult;

                if (accountForTransferResult && accountForTransferResult.DATA.length > 0) {
                    $("#fromAccGroup .item1")[0].click();
                }
                Util.InitAmountControlEvent("txtAmount", "fromAcc", "txtAmountCCY");
                Util.SetAmountFormat("txtAmount");

                if (transferViaLBA.benBankStateCode) {
                    $("#stateGroup .item1[data-value='" + transferViaLBA.benBankStateCode + "']").click();
                    //$('#stateGroup .caption').addClass("disabled");
                    //$('#stateGroup').parent().addClass("disabled-caption");
                    //$('#stateGroup .caption.disabled').on('click', function () {
                    //    $(this).parent().removeClass('open');
                    //    event.stopPropagation();
                    //});
                }

                $("#txtToAcctNo,#txtAmount").on("change", function () {
                    transferViaLBA.CheckContinueButton();
                });

                $("#txtToAcctName").on("change", function () {
                    transferViaLBA.ValidAccountName();
                });
                $("#txtToAcctNo").on("input", function (e) {
                    validToAccountNumber($(this));
                });
                $("#txtToAcctNo").on("blur", function () {
                    if ($(this).val().length == 0) {
                        Util.SetFieldErrorMessage("txtToAcctNo", VIB.LocalizeString.InvalidToAcctNo2);
                    } else if ($(this).val().length < 5) {
                        Util.SetFieldErrorMessage("txtToAcctNo", VIB.LocalizeString.InvalidToAcctNo);
                    } else {
                        Util.SetFieldErrorMessage("txtToAcctNo");
                    }
                });


                // Event for Schedule
                $('.row.options input.radio-custom').each(function () {
                    //if ($(this).is(":checked")) {
                    //    $(this).parents('.daily').find('.datepicker-apply').show();
                    //} else {
                    //    $(this).parents('.daily').find('.datepicker-apply').hide();
                    //}
                    $(this).parents('.daily').find('.datepicker-apply').hide();
                });

                $('.row.options input.radio-custom').each(function () {
                    $(this).click(function (e) {
                        $(this).parents('.row.options').find('.datepicker-apply').hide();
                        $("#endDate").text('');
                        $("#scheduleRegularFreqGroup .caption").text('');
                        $("#scheduleRegularFreqGroup .item1").removeClass('selected');
                        $('.modal').find('.formLabel').removeClass('formTop');
                        $('.modal').find('input').val('');
                        $("#dropdownPopup .caption").text('');
                        $("#dropdownPopup .item1").removeClass('selected');
                        $('.sub-transf').hide();
                    });

                });

                $("#scheduleRegularFreqGroup .caption,#dropdownPopup .caption").on('click', function () {
                    if ($(this).parent().hasClass("open")) {
                        $(this).parent().removeClass("open");
                        return;
                    }
                    $(this).parent().addClass('open');
                });

                $('#scheduleRegularFreq .item1').on('click', function () {
                    $(this).parent().find(".item1").removeClass('selected');
                    var $dropParent = $(this).addClass('selected').parent().parent();
                    var text = $(this).clone().children("p").remove().end().text();
                    $dropParent.removeClass('open').children('.caption').text(text);
                    $dropParent.parent().children('.formLabel').addClass('formTop');
                    //$("#scheduleRegularFreqText").html(text);                    
                    $("#scheduleRegularFreqTextNoApply").val(text);
                    //$("#scheduleRegularFreqText").parents('.daily').find('.datepicker-apply').show();
                    Util.SetFieldErrorMessage("scheduleRegularFreq");
                });
                //$("#scheduleRegularFreq .item1").first().click();

                $('#dropdownPopup .item1').on('click', function () {
                    $(this).parent().find(".item1").removeClass('selected');
                    var $dropParent = $(this).addClass('selected').parent().parent();
                    var text = $(this).clone().children("p").remove().end().text();
                    $dropParent.removeClass('open').children('.caption').text(text);
                    $dropParent.parent().children('.formLabel').addClass('formTop');
                    Util.SetFieldErrorMessage("dropdownPopup");
                    var scheduleRegularEndType = $(this).attr("data-value");
                    if (scheduleRegularEndType === ScheduleRegularEndType.NoEnd) {
                        //$("#loopEndText").html("");
                        //$("#loopEndText").html($(this).text());
                        $("#loopEndTextNoApply").val("");
                        $("#loopEndTextNoApply").val($(this).text());
                    } else if (scheduleRegularEndType === ScheduleRegularEndType.EndAfter) {
                        //$("#loopEndText").html("");
                        $("#loopEndTextNoApply").val("");
                        var endTransferTime = $("#endTransferTime").val();
                        if (endTransferTime) {
                            //$("#loopEndText")
                            //    .html(VIB.LocalizeString.EndAfterTemplate.replace("{times}",
                            //        endTransferTime));
                            $("#loopEndTextNoApply").val(VIB.LocalizeString.EndAfterTemplate.replace("{times}",
                                endTransferTime));
                        }
                        $("#endTransferTime").focus();
                    } else {
                        if ($("#loopAfterDatePicker").val()) {
                            //$("#loopEndText").html($("#loopAfterDatePicker").val());
                            $("#loopEndTextNoApply").val($("#loopAfterDatePicker").val());
                        } else {
                            //$("#loopEndText").html("");
                            $("#loopEndTextNoApply").val("");
                        }
                    }
                });
                //$("#dropdownPopup .item1").first().click();
                // End transfer Time
                $("#endTransferTime").on("input", function (e) {
                    var self = $(this);
                    self.val(self.val().replace(/[^0-9]/g, ''));
                    if ((e.which != 46 || self.val().indexOf('.') != -1) &&
                        (e.which < 48 || e.which > 57)) {
                        e.preventDefault();
                    }
                });

                $("#endTransferTime").on("change", function () {
                    if ($(this).val()) {
                        Util.SetFieldErrorMessage("endTransferTime");
                    }
                    //$("#loopEndText").html(VIB.LocalizeString.EndAfterTemplate.replace("{times}", $(this).val()));
                    $("#loopEndTextNoApply").val(VIB.LocalizeString.EndAfterTemplate.replace("{times}", $(this).val()));
                });
                // DatePicker
                $('input.datepicker-vs3').each(function () {
                    var $thisElem = $(this);
                    var $container = $(this).parents('.form-group');
                    $thisElem.datepicker({
                        orientation: "top",
                        format: "dd/mm/yyyy",
                        startDate: dtnow,
                        autoclose: true,
                        todayHighlight: true,
                        container: $container,
                        weekStart: 1
                    });
                });

                $("#startDate").on("change", function () {
                    var value = $(this).val();
                    //$("#startDateText").html(value);
                    $("#startDateTextNoApply").val(value);
                    if (value.length > 0) {
                        $(this).next().addClass('formTop');
                    } else {
                        $(this).next().removeClass('formTop');
                    }
                    if (value) {
                        Util.SetFieldErrorMessage("startDate");
                    }
                });

                $("#loopAfterDatePicker").on("change", function () {
                    var value = $(this).val();
                    //$("#loopEndText").html(value);
                    $("#loopEndTextNoApply").val(value);
                    if (value.length > 0) {
                        $(this).next().addClass('formTop');
                    } else {
                        $(this).next().removeClass('formTop');
                    }
                    if (value) {
                        Util.SetFieldErrorMessage("loopAfterDatePicker");
                    }
                });
                $("#datepickermy").datepicker({
                    orientation: "top",
                    format: "dd/mm/yyyy",
                    startDate: moment(dtnow, "DD/MM/YYYY").format('DD/MM/YYYY'),
                    autoclose: true,
                    todayHighlight: true,
                    weekStart: 1
                });
                $("#datepickermy").on('changeDate',
                    function (ev) {
                        if (ev.date) {
                            var dateSelected = formatDate(ev.date);
                            $("#endDateNoApply").val(dateSelected);
                        }
                    });

                transferViaLBA.bindingOpenDropDown();

                $("#txtDescription").keyup(function () {
                    $(this).parent().find("p").hide();
                    $(this).removeClass("field-error");
                    var str = $('#txtDescription').val();
                    if (str != '' && checkSpecialDescriptionCharacter(str)) {
                        Util.SetFieldErrorMessage("txtDescription", VIB.LocalizeString.DESC_ERROR);
                    } else {
                        Util.SetFieldErrorMessage("txtDescription");
                    }
                });
                $('.form-group .dropdown > .caption.disabled').on('click', function () {
                    $(this).parent().removeClass('open');
                    event.stopPropagation();
                });
            });
        } else {
            if (transferViaLBA.accountForTransfer.length === 0) {
                accountForTransferRequest = transferService.GetAccountForTransfer(transferViaLBA.accTypeNapasCard);
            } else {
                accountForTransferRequest.resolve(transferViaLBA.accountForTransfer);
            }
            $.when(accountForTransferRequest).done(function (accountForTransferResult) {
                // Day du lieu vao array check call API
                transferViaLBA.arrAccountTransferLBANapas[transferViaLBA.accTypeNapasCard] = accountForTransferResult;
                $("#transferViaLBADetailTemplate").tmpl(renderData).appendTo($("#transferViaLBADetail"));
                transferViaLBA.accountForTransfer = accountForTransferResult;
                transferViaLBA.AccountList = accountForTransferResult.DATA;
                Util.InitAccountListControl("fromAcc", accountForTransferResult, "fromAccGroup");
                $('#fromAccGroup .item1').first().click();
                Util.InitAmountControlEvent("txtAmount", "fromAcc", "txtAmountCCY");
                Util.SetAmountFormat("txtAmount");
                $("#txtAcctNo").blur(function (e) {
                    var accNo = $(this).val();
                    var oldValue = $("#txtAcctNo").attr("data-oldvalue");
                    if (accNo && accNo !== oldValue) {
                        $("#txtAcctNo").attr("data-oldvalue", accNo);
                        if (accNo.length > 25) {
                            Util.SetFieldErrorMessage("txtToAcctNo", VIB.LocalizeString.InvalidToAcctNo);
                            return;
                        } else {
                            Util.SetFieldErrorMessage("txtToAcctNo");
                        }
                        var current = transferViaLBA.formModel.selectedBank;
                        var bankCode = current.code;
                        transferService.GetFastTransferAccountInfo(accNo, bankCode).done(function (result) {
                            if (result.STATUSCODE === StatusCode.Successed) {
                                $("#lblToAcctName").html(result.DATA.AcctName);
                                $(".show-all").show();
                                $(".show-all-normal").show();
                                if (accountForTransferResult && accountForTransferResult.DATA.length > 0)
                                    $("#fromAccGroup .item1")[0].click();
                            } else {
                                Util.ShowErrorMessage(result.MESSAGE);
                            }
                        });
                    }

                    transferViaLBA.CheckContinueButton();
                });

                $("#txtAcctNo").on("input", function (e) {
                    validToAccountNumber($(this));
                });
                $("#fastTransferSelection").show();
                $("#fromAccGroup .item1").on('click', function () {
                    transferViaLBA.CheckContinueButton();
                });
                $("#txtAmount").on("change", function () {
                    transferViaLBA.CheckContinueButton();
                });
                $("#receivedBank").on("change", function () {
                    transferViaLBA.CheckContinueButton();
                });
                $("#txtDescription").keyup(function () {
                    $(this).parent().find("p").hide();
                    $(this).removeClass("field-error");
                    var str = $('#txtDescription').val();
                    if (str != '' && checkSpecialDescriptionCharacter(str)) {
                        Util.SetFieldErrorMessage("txtDescription", VIB.LocalizeString.DESC_ERROR);
                        return;
                    } else {
                        Util.SetFieldErrorMessage("txtDescription");
                    }
                });
            });
        }
    },
    bindingOpenDropDown: function () {
        $('.form-group .dropdown > .caption').on('click', function () {
            $('.dropdown').removeClass('open');
            $(this).closest('.dropdown').toggleClass('open');
            event.stopPropagation();
        });
    },
    RegetAcctTranfer: function (isFastTransferString) {
        if (isFastTransferString == "Y") {
            //check neu da call API, se ko call lai lan nua
            accountForTransferRequest = transferService.GetAccountForTransfer(transferViaLBA.accTypeNapasCard);
            if (transferViaLBA.arrAccountTransferLBANapas && transferViaLBA.arrAccountTransferLBANapas[transferViaLBA.accTypeNapasCard]) {
                transferViaLBA.accountForTransfer = transferViaLBA.arrAccountTransferLBANapas[transferViaLBA.accTypeNapasCard];
            }

        } else {
            accountForTransferRequest = transferService.GetAccountForTransfer(transferViaLBA.accTypeLBA);
            if (transferViaLBA.arrAccountTransferLBANapas && transferViaLBA.arrAccountTransferLBANapas[transferViaLBA.accTypeLBA]) {
                transferViaLBA.accountForTransfer = transferViaLBA.arrAccountTransferLBANapas[transferViaLBA.accTypeLBA];
            }
        }
    },
    CheckContinueButton: function () {
        var current = transferViaLBA.formModel.selectedBank;
        var fromAcc = $("#fromAcc .item1.selected");
        var amount = 0;
        var checkReceivedBank = transferViaLBA.ValidBankName();
        if ($("#txtAmount").val().length > 0) {
            amount = $("#txtAmount").autoNumeric("get");
            Util.SetFieldErrorMessage('txtAmount');
        }

        var isDisabled = true;
        if (!transferViaLBA.IsFastTransfer()) {
            var state = $("#state .item1.selected");
            var extBranch = $("#extBranch .item1.selected").length > 0 || ($("#txtExtBranch").length > 0 && $("#txtExtBranch").val().length > 0);
            var checkToAcctNo = $("#txtToAcctNo").val() ? transferViaLBA.ValidToAcctNo("txtToAcctNo") : $("#txtNo").val() ? transferViaLBA.ValidToAcctNo("txtNo") : false;
            var toAcctName = $("#txtToAcctName").val() || $("#lblToAcctName").html();

            if (current) {
                if ((current.code != "OTHER" || ($("#txtReceivedBank").length > 0 && $("#txtReceivedBank").val().length > 0)) &&
                    state.length > 0 &&
                    extBranch > 0 &&
                    fromAcc.length > 0 &&
                    checkToAcctNo &&
                    toAcctName &&
                    amount > 0 && checkReceivedBank) {
                    isDisabled = false;
                }
            } else {
                if (state.length > 0 &&
                    extBranch > 0 &&
                    fromAcc.length > 0 &&
                    checkToAcctNo &&
                    toAcctName &&
                    amount > 0 && checkReceivedBank) {
                    isDisabled = false;
                }
            }

        } else {
            var checkToAcctNo = transferViaLBA.ValidToAcctNo("txtAcctNo");
            var lblToAcctName = $("#lblToAcctName").html();

            if (checkToAcctNo &&
                lblToAcctName.length > 0 &&
                fromAcc.length > 0 &&
                amount > 0 && checkReceivedBank) {
                isDisabled = false;
            }
        }
        transferViaLBA.validateDisabledNext = isDisabled;
    },
    DisplayHideTransferViaLBAContent: function (isDisplay) {
        if (isDisplay) {
            $("#transferViaLBAContent").show();
        } else {
            $("#transferViaLBAContent").hide();
        }
    },
    DisplayHideSubMenu: function (isDisplay) {
        if (isDisplay) {
            $("#transferViaLBAContent").show();
        } else {
            $("#transferViaLBAContent").hide();
        }
    },
    IsFastTransfer: function () {
        if (transferViaLBA.isBenTransfer) {
            return transferViaLBA.isFastBankTransfer && $("input[type=radio][name=transfer-type]:checked").attr("data-value").toUpperCase() === "Y";
        } else {
            var current = transferViaLBA.formModel.selectedBank;
            return current.fast === "Y" && $("input[type=radio][name=transfer-type]:checked").attr("data-value").toUpperCase() === "Y";
        }
    },
    InitDropdownEvent: function (elementId) {
        $("#" + elementId + " .item1").on('click', function () {
            $(this).parent().find(".item1").removeClass('selected');
            var $dropParent = $(this).addClass('selected').parent().parent();
            var text = $(this).clone().children("p").remove().end().text();
            $dropParent.removeClass('open').children('.caption').text(text);
            $dropParent.parent().children('.formLabel').addClass('formTop');
        });
        $("#" + elementId + " .caption").on('click', function () {
            $('.dropdown').removeClass('open');
            if ($(this).hasClass("disabled")) {
                event.stopPropagation();
                return;
            }

            if ($(this).parent().hasClass("open")) {
                $(this).parent().removeClass("open");
                return;
            }
            $(this).parent().toggleClass('open');
        });
    },

    ValidBankName: function () {
        var val = $('#receivedBank').val();
        if (val.length === 0) {
            Util.SetFieldErrorMessage('receivedBank', VIB.LocalizeString.InvalidReceivedBank);
            return false;
        }
        Util.SetFieldErrorMessage('receivedBank');
        return true;
    },

    ValidOtherBankName: function () {
        var val = $('#txtReceivedBank').val();
        if (val.length === 0) {
            Util.SetFieldErrorMessage('txtReceivedBank', VIB.LocalizeString.InvalidReceivedBank);
            return false;
        }
        if (val.length > 35) {
            Util.SetFieldErrorMessage('txtReceivedBank', VIB.LocalizeString.InvalidReceivedBank2);
            return false;
        }
        if (checkAccountNameCharacter(val)) {
            Util.SetFieldErrorMessage('txtReceivedBank', VIB.LocalizeString.InvalidReceivedBank2);
            return false;
        }
        Util.SetFieldErrorMessage('txtReceivedBank');
        return true;
    },

    ValidToAcctNo: function (des) {
        var val = $('#' + des).val();
        if (!val) {
            Util.SetFieldErrorMessage(des, VIB.LocalizeString.InvalidToAcctNo2);
            return false;
        } else {
            Util.SetFieldErrorMessage(des);
        }

        return true;
    },
    ValidStateGroup: function () {
        if ($('#stateGroup:visible').length > 0) {
            var val = $('#stateGroup .caption').html();
            if (!val) {
                Util.SetFieldErrorMessage('stateGroup', VIB.LocalizeString.InvalidProvinceOrCity);
                return false;
            } else {
                Util.SetFieldErrorMessage('stateGroup');
            }
            return true;
        }
        return false;
    },
    ValidBranchGroup: function () {
        var val = $('#extBranchGroup .caption').html();
        if (!val) {
            Util.SetFieldErrorMessage('extBranchGroup', VIB.LocalizeString.InvalidBranch);
            return false;
        } else {
            if (val === "Other") {
                if (!$("#txtExtBranch").val()) {
                    Util.SetFieldErrorMessage('txtExtBranch', VIB.LocalizeString.InvalidBranch);
                    return false;
                } else if ($("#lblErrortxtExtBranch:visible").length > 0) {
                    return false;
                }
            }
            Util.SetFieldErrorMessage('extBranchGroup');
        }

        return true;
    },
    ValidAmount: function () {
        if ($('#txtAmount:visible').length > 0) {
            if (!$("#txtAmount").val()) {
                Util.SetFieldErrorMessage('txtAmount', VIB.LocalizeString.AmountRequire);
                return false;
            } else if ($("input[type=radio][name=transfer-type]:checked").attr("data-value").toUpperCase() === "Y" && $("#txtAmount").autoNumeric("get") > 300000000) {
                Util.SetFieldErrorMessage('txtAmount', VIB.LocalizeString.LimitTransferAmount);
                return false;
            }

            Util.SetFieldErrorMessage('txtAmount');
            return true;
        }
        return false;
    },
    ValidAccountName: function () {
        var val = $('#txtToAcctName').val();
        if (!val) {
            Util.SetFieldErrorMessage('txtToAcctName', VIB.LocalizeString.InvalidAccountName);
            return false;
        }
        if (checkAccountNameCharacter(val)) {
            Util.SetFieldErrorMessage('txtToAcctName', VIB.LocalizeString.InvalidAccountName2);
            return false;
        }
        Util.SetFieldErrorMessage('txtToAcctName');
        return true;
    },
    ChangeVietCharacter: function (str) {
        if (!str) {
            return '';
        }
        var from = "àáãảạăằắẳẵặâầấẩẫậèéẻẽẹêềếểễệđùúủũụưừứửữựòóỏõọôồốổỗộơờớởỡợìíỉĩịäëïîöüûñçýỳỹỵỷ",
            to = "aaaaaaaaaaaaaaaaaeeeeeeeeeeeduuuuuuuuuuuoooooooooooooooooiiiiiaeiiouuncyyyyy";
        for (var i = 0, l = from.length; i < l; i++) {
            str = str.replace(RegExp(from[i], "gi"), to[i]);
        }
        return str.trim();
    },
};

var transferViaMobile = {
    Step: 1,
    activeBtnSubmiForm: {
        soDienThoaiNhanTien: false,
        tenNguoiNhan: false,
        taikhoannguon: false,
        sotien: false
    },
    error19: null,
    error20: null,
    dinhdangtienkhonghople: null,
    dinhdangtienkhongbatdaubangso0: null,
    fromacctno: null,
    toMobile: null,
    toName: null,
    ccy: null,
    descriptionCharacter: null,
    fromAccountNumber: null,
    otpResultAPI: "",
    otpInvalid: null,
    resultDataValidate: {
        Ccy: null,
        Description: null,
        Fee: null,
        Schedule: null,
        TotalAmount: null,
        TransactionId: null,
        TransactionSigning: false,
        When: null,
    },
    dataAcountBase: null,
    amount: null,
    amountAndCurrency: null,
    me: null,
    lblAmount: null,

    processEnter: function (idDiv, idButton) {
        $("#" + idDiv).keypress(function (event) {
            if (event.which === 13 || event.keyCode === 13) {
                if (!$("#" + idButton).attr("disabled"))
                    $("#" + idButton).click();
                event.preventDefault();
            }
        });
    },

    /* flag = true => show (và ngược lại) */
    showOrHideStep: function (step, flag) {
        if (flag) {
            $("#step_" + step).show();
        } else {
            $("#step_" + step).hide();
        }
    },

    goBack: function () {
        window.history.back();
    },

    goToStep1: function () {
        $("#dnn_ContentPane").show();
        transferViaMobile.showOrHideStep(1, true);
        transferViaMobile.showOrHideStep(2, false);
        transferViaMobile.NavigationDisplayControl(1);
        transferViaMobile.Step = 1;
    },

    onProcessStep1: function () {
        var data = {};
    },

    onClickFromGroup: function () {
        $(this).children('input[type=text]').focus();
    },

    onBlurInput: function () {
        if ($(this).val().length > 0) { $(this).next().addClass('formTop') } else { $(this).next().removeClass('formTop') }
    },

    checkPhoneEmailAddress: function (change = false) {
        var soDienThoaiNhanTien = $("#soDienThoaiNhanTien").val();
        if (soDienThoaiNhanTien !== "") {
            var patt = new RegExp("(09|01[2|6|8|9|3]|03|07|08)+([0-9]{8})");
            var res = patt.test(soDienThoaiNhanTien);
            if (res === false) {
                Util.SetFieldErrorMessage('soDienThoaiNhanTien', transferViaMobile.error19)
                $("#soDienThoaiNhanTien").focus();
                return false
            } else {
                transferViaMobile.activeBtnSubmiForm.soDienThoaiNhanTien = soDienThoaiNhanTien !== "" ? true : false;
                Util.SetFieldErrorMessage('soDienThoaiNhanTien');
                return true;
            }
        }
        if (!change) {
            Util.SetFieldErrorMessage('soDienThoaiNhanTien', VIB.LocalizeString.RequirePhone);
        }
        $("#soDienThoaiNhanTien").focus();
        return false;
    },

    checkRecipientName: function (change = false) {
        var tenNguoiNhan = $("#tenNguoiNhan").val();
        if (tenNguoiNhan !== '') {
            if (checkSpecialDescriptionCharacter(tenNguoiNhan)) {
                Util.SetFieldErrorMessage('tenNguoiNhan', transferViaMobile.error20)
                return false;
            }
            transferViaMobile.activeBtnSubmiForm.tenNguoiNhan = tenNguoiNhan !== "" ? true : false;
            Util.SetFieldErrorMessage('tenNguoiNhan');
            return true
        }
        if (!change) {
            Util.SetFieldErrorMessage('tenNguoiNhan', VIB.LocalizeString.NameRequire);
        }
        return false
    },

    checkDescriptionSpecial: function () {
        var description = $("#desc").val();
        if (checkSpecialDescriptionCharacter(description)) {
            Util.SetFieldErrorMessage('desc', VIB.LocalizeString.DescriptionCharacter);
        } else {
            Util.SetFieldErrorMessage('desc');
        }
    },

    validateSoTien: function (change = false) {
        if ($("#soTien").val() !== "") {
            transferViaMobile.activeBtnSubmiForm.sotien = $("#soTien").val() !== "" ? true : false;
            Util.SetFieldErrorMessage('soTien');
            return true;
        }
        if (!change) {
            Util.SetFieldErrorMessage('soTien', VIB.LocalizeString.AmountRequire)
        }
        return false
    },

    goToStep2: function () {
        if (!transferViaMobile.ValidateFormControl()) return;
        var fromacctno = $("#accountList div.selected").attr("data-value");
        transferViaMobile.fromAccountNumber = transferViaMobile.dataAcountBase.DATA.find(function (x) { return x.Value === fromacctno }).Text;
        var tomobile = $("#soDienThoaiNhanTien").val().trim();
        var toname = $("#tenNguoiNhan").val().trim();
        var amount = $("#soTien").autoNumeric("get");
        transferViaMobile.amountAndCurrency = $("#soTien").val();
        var description = $("#desc").val();
        var addben = $("#addben").is(":checked") ? "Y" : "N";
        transferViaMobile.onValidation(fromacctno, tomobile, toname, amount, description, addben);
    },

    ValidateFormControl: function () {
        if (!transferViaMobile.checkPhoneEmailAddress()) return false;
        if (!transferViaMobile.checkRecipientName()) return false;
        if (!transferViaMobile.validateSoTien()) return false;
        return true;
    },

    NavigationDisplayControl(step) {
        if (step === 1) {
            $('#btnPrev').hide();
            $('#btnNext').show();
            transferViaMobile.DisplayHideSubMenu(true);
        }
        if (step === 2) {
            $('#btnPrev').show();
            $('#btnNext').show();
            transferViaMobile.DisplayHideSubMenu();
        }
        if (step === 3) {
            $("#btnPrev").hide();
            $("#btnNext").hide();
            $("#btnComplete").show();
            transferViaMobile.DisplayHideSubMenu();
        }
        scrollViewport();
    },
    DisplayHideSubMenu: function (isDisplay) {
        if (isDisplay) {
            $("#rightContent").find("#transferDetail").parent().children(":not(#transferDetail):not(.btn-footer-fixed)").show();
            $("#leftContent").show();
        } else {
            $("#rightContent").find("#transferDetail").parent().children(":not(#transferDetail):not(.btn-footer-fixed)").hide();
            $("#leftContent").hide();
        }
    },
    onValidation: function (fromacctno, tomobile, toname, amount, description, addben) {
        $("#otpContent").html("");
        var data =
        {
            fromacctno: fromacctno,
            tomobile: tomobile,
            toname: toname,
            amount: amount,
            description: description,
            addben: addben
        };
        transferViaMobile.amount = amount;
        transferViaMobile.toMobile = tomobile;
        transferViaMobile.toName = toname;

        transferService.ValidatePayAnyOne(data).then(function (rs) {
            if (rs.STATUSCODE === "000000") {
                $("#btn-go-to-step-3").prop("disabled", true);
                transferViaMobile.resultDataValidate = rs.DATA;
                $("#step2-amount").html(transferViaMobile.amountAndCurrency + " " + rs.DATA.Ccy);
                $("#step2-recipients-name").html(toname);
                $("#step2-to-mobile-number").html(tomobile);
                $("#step2-from-account").html(transferViaMobile.fromAccountNumber);
                $("#step2-transaction-fee").html(transferViaMobile.resultDataValidate.Fee + " " + rs.DATA.Ccy);
                $("#step2-description").html(transferViaMobile.resultDataValidate.Description);
                $("#step2-transaction-date").html(transferViaMobile.resultDataValidate.When);
                $("#step2-total-amount").html(transferViaMobile.resultDataValidate.TotalAmount + " " + rs.DATA.Ccy);
                transferViaMobile.showOrHideStep(1, false);
                transferViaMobile.showOrHideStep(2, true);

                var renderData = {
                    IsPopup: false,
                    TransactionSigning: rs.DATA.TransactionSigning,
                    TransactionId: rs.DATA.TransactionId
                }
                $("#otpTemplate").tmpl(renderData).appendTo($("#otpContent"));
                Util.RegisterOTPEvent();
                $('#btnGetOTP').click(function () {
                    transferViaMobile.GetOTP();
                });
                //Util.RegisterGetOTPButton("btnGetOTP");
                transferViaMobile.Step = 2;
                transferViaMobile.buttonSubmitFormContainOTP("otpContent", "btn-go-to-step-3");

                transferViaMobile.NavigationDisplayControl(2);
            } else {
                Util.ShowErrorMessage(rs.MESSAGE);
            }
        });
    },
    goToStep3: function () {
        var txtOtp1 = $("#txtOtp1").val();
        var txtOtp2 = $("#txtOtp2").val();
        var txtOtp3 = $("#txtOtp3").val();
        var txtOtp4 = $("#txtOtp4").val();
        var txtOtp5 = $("#txtOtp5").val();
        var txtOtp6 = $("#txtOtp6").val();
        if (transferViaMobile.checkNullOrEmpty(txtOtp6)
            || transferViaMobile.checkNullOrEmpty(txtOtp1)
            || transferViaMobile.checkNullOrEmpty(txtOtp2)
            || transferViaMobile.checkNullOrEmpty(txtOtp3)
            || transferViaMobile.checkNullOrEmpty(txtOtp4)
            || transferViaMobile.checkNullOrEmpty(txtOtp5)) {
            Util.ShowErrorMessage(transferViaMobile.OTPInvalid);
        } else {
            var otpFullString = txtOtp1 + txtOtp2 + txtOtp3 + txtOtp4 + txtOtp5 + txtOtp6;
            transferService.SubmitPayAnyOne(otpFullString).then(function (rs) {
                if (rs.STATUSCODE === "000000") {
                    transferViaMobile.showOrHideStep(1, false);
                    transferViaMobile.showOrHideStep(2, false);
                    transferViaMobile.showOrHideStep(3, true);
                    transferViaMobile.NavigationDisplayControl(3);
                    transferViaMobile.initStep3Control();
                    transferViaMobile.Step = 3;
                    //$("#currency-step3").html(" " + transferViaMobile.ccy);
                    $("#step3-value-amount").html(transferViaMobile.amountAndCurrency + " " + transferViaMobile.ccy);
                    $("#step3-value-receipt-no").html(rs.DATA.TransNum);
                    $("#step3-value-total-amount").html(rs.DATA.TotalAmount + " " + rs.DATA.Ccy);
                    $("#step3-value-beneficiary-name").html(transferViaMobile.toName);
                    $("#step3-value-to-mobile-number").html(transferViaMobile.toMobile);
                    $("#step3-value-from-account").html(transferViaMobile.fromAccountNumber);
                    $("#step3-value-transaction-fee").html(rs.DATA.Fee + " " + rs.DATA.Ccy);
                    $("#step3-value-description").html(transferViaMobile.resultDataValidate.Description);
                    $("#step3-value-transaction-date").html(transferViaMobile.resultDataValidate.When);
                    $("#step3-value-payment-code").html(rs.DATA.PaymentCode);
                } else {
                    if (rs.ALLOWRETRYOTP) {
                        Util.SetOTPErrorMessage(true, rs.MESSAGE);
                        return null;
                    } else {
                        $(".transfer-confirm").hide();
                        $("#errorMessageStep2").html(rs.MESSAGE);
                        $(".transfer-result-error").show();
                        transferViaMobile.NavigationDisplayControl(3);
                        transferViaMobile.Step = 3;
                        return null;
                    }
                }
            });
        }
    },
    checkNullOrEmpty: function (input) {
        if (input === undefined || input === null || input.length === 0) {
            return true;
        }
        return false;
    },
    GetOTP: function () {
        return transferService.GetOTP();
    },
    onClick: function (event) {
        $(event).children('input[type=text]').focus();
    },
    onBlur: function (event) {
        if ($(event).val().length > 0) { $(event).prev().addClass('formTop') } else { $(event).prev().removeClass('formTop') }
    },
    onFocus: function (event) {
        $(event).prev().addClass('formTop')
    },
    continueTransfer: function () {
        $("#dnn_ContentPane").show();
        $("#fromAccGroup .caption").html("");
        $("#soDienThoaiNhanTien").val("");
        $("#tenNguoiNhan").val("");
        $("#soTien").val("");
        $("#desc").val("");
        $("#addben").click();
        $("#btnOnStep1").prop("disabled", true);
        transferViaMobile.showOrHideStep(1, true);
        transferViaMobile.showOrHideStep(2, false);
        transferViaMobile.showOrHideStep(3, false);
        $(".formLabel").removeClass("formTop");
        $("#addben").is(":checked") ? $("#addben").click() : false;
        $("#info-claim-money").hide();
        $(".item1").removeClass("selected");
        transferViaMobile.activeBtnSubmiForm = {
            soDienThoaiNhanTien: false,
            tenNguoiNhan: false,
            taikhoannguon: false,
            sotien: false
        };
    },
    checkCharacterSpecial: function (evt) {
        var arrayCharacter = [33, 64, 35, 36, 37, 94, 38, 42, 126];
        var charCode = (evt.which) ? evt.which : event.keyCode;
        if (arrayCharacter.findIndex(function (x) { return x === charCode }) !== -1)
            return false;
        return true;
    },
    ///type: NUMBER: chỉ cho phép nhập số
    ///----: SPECIAL: không cho nhập ký tự đặc biệt
    ///----: NOT_WANT : ký tự không mong muốn có
    accessCopyPaste: function (evt, idInput, type) {
        var text = (evt.clipboardData || window.clipboardData).getData("Text");
        if (type === "SPECIAL") {
            if (checkSpecialDescriptionCharacter(text)) {
                Util.SetFieldErrorMessage(idInput, VIB.LocalizeString.DescriptionCharacter);
                return;
            }
            else {
                $("#" + idInput).val($("#" + idInput).val().trim() + text.trim());
                Util.SetFieldErrorMessage(idInput);
            }
        } else if (type === "NUMBER") {
            var patt = new RegExp("^[0]{1}[0-9]{9}$");
            var res = patt.test(text);
            if (!res) {
                Util.SetFieldErrorMessage(idInput, transferViaMobile.error19);
                return;
            }
            else {
                $("#" + idInput).val($("#" + idInput).val().trim() + text.trim());
                Util.SetFieldErrorMessage(idInput);
            }
        } else {
            var flag = [];
            var arrayCharacter = ["~", "!", "@", "#", "$", "^", "&", "*", "}", "{", "[", "]", ">", "<", ";", "?", "|", '"'];
            arrayCharacter.forEach(function (item) {
                flag.push(text.indexOf(item) > -1 ? true : false);
            });
            if (flag.find(function (x) { return x === true })) {
                Util.SetFieldErrorMessage(idInput, transferViaMobile.descriptionCharacter);
                return;
            }
            else {
                // var desc = $("#" + idInput).val().length + text.length;
                // if (desc > 120) {
                //     Util.SetFieldErrorMessage(idInput, VIB.LocalizeString.DescriptionMax);
                //     return;
                // } else {
                //     $("#" + idInput).val($("#" + idInput).val().trim() + text.trim());
                //     Util.SetFieldErrorMessage(idInput);
                // }
            }
        }
        evt.preventDefault();
    },
    showHideButtonGetOTP: function (condition) {
        condition ? $("#btnOTPGetOTP1").show() : $("#btnOTPGetOTP1").hide();
    },
    buttonSubmitFormContainOTP: function (idDivContainOTP, idSubmitOnStep) {
        $("#" + idDivContainOTP + " input").keyup(function (event) {
            var txtOtp1 = $("#txtOtp1").val();
            var txtOtp2 = $("#txtOtp2").val();
            var txtOtp3 = $("#txtOtp3").val();
            var txtOtp4 = $("#txtOtp4").val();
            var txtOtp5 = $("#txtOtp5").val();
            var txtOtp6 = $("#txtOtp6").val();
            if (txtOtp1 === "" ||
                txtOtp2 === "" ||
                txtOtp3 === "" ||
                txtOtp4 === "" ||
                txtOtp5 === "" ||
                txtOtp6 === "") {
                transferViaMobile.controlButtonSubmit(idSubmitOnStep, false);
            } else {
                transferViaMobile.controlButtonSubmit(idSubmitOnStep, true);
            }
        });
    },
    controlButtonSubmit: function (idButtonSubmit, condition) {
        $("#" + idButtonSubmit).prop("disabled", !condition);
    },
    fncControlAmount: function (id) {
        $("#" + id).keyup(function () {
            topupBen.formatMoney(id);
        });
    },
    SetDropdownValue: function (element) {
        var listElement = $(element).find(".item1");
        listElement.removeClass('selected');
        if (listElement.length > 0) {
            var $dropParent = $(listElement[0]).addClass('selected').parent().parent();
            var text = $(listElement[0]).attr("data-display");
            $dropParent.removeClass('open').children('.caption').text(text);
            $dropParent.parent().children('.formLabel').addClass('formTop');
        }
    },
    initStep3Control() {
        $('.modal-notice').on('shown.bs.modal', function (e) {
            $(".modal-open").css("overflow", "inherit");
            $("body").click(function () {
                if ($(".modal-notice").is(":visible")) {
                    $(".modal-notice").modal('hide');
                }
            });
        });
    },
    initFormAction: function () {
        transferViaMobile.error19 = VIB.LocalizeString.Error19;
        transferViaMobile.error20 = VIB.LocalizeString.Error20;
        transferViaMobile.dinhdangtienkhonghople = VIB.LocalizeString.DinhDangTienKhongHopLe;
        transferViaMobile.dinhdangtienkhongbatdaubangso0 = VIB.LocalizeString.DinhDangTienBatDauBangSo0;
        transferViaMobile.OTPInvalid = VIB.LocalizeString.OTPInvalid;
        transferViaMobile.descriptionCharacter = VIB.LocalizeString.DescriptionCharacter;
        transferService.GetAccountForTransfer("PAYANYONE").then(function (rs) {
            if (rs.STATUSCODE === "000000") {
                transferViaMobile.dataAcountBase = rs;
                Util.InitAccountListControl("accountList", rs, "fromAccGroup");
                transferViaMobile.ccy = rs.DATA[0].Ccy;
                transferViaMobile.SetDropdownValue('#fromAccGroup')
                $("#accountList .item1").click(function () {
                    transferViaMobile.activeBtnSubmiForm.taikhoannguon = $("#fromAccGroup .caption").html().trim() !== "" ? true : false;
                });
            };
        });

        $(".click-form-input").click(function (e) {
            transferViaMobile.onClick(this);
        });

        $(".blur-input").blur(function (e) {
            transferViaMobile.onBlur(this);
        });

        $(".blur-input").focus(function (e) {
            transferViaMobile.onFocus(this);
        });

        document.querySelector("#soDienThoaiNhanTien").addEventListener("paste", function (evt) {
            transferViaMobile.accessCopyPaste(evt, "soDienThoaiNhanTien", "NUMBER");
        });
        document.querySelector("#tenNguoiNhan").addEventListener("paste", function (evt) {
            transferViaMobile.accessCopyPaste(evt, "tenNguoiNhan", "SPECIAL");
        });
        // document.querySelector("#desc").addEventListener("paste", function (evt) {
        //     transferViaMobile.accessCopyPaste(evt, "desc", "SPECIAL");
        // });

        $("#soDienThoaiNhanTien").change(function (e) {
            transferViaMobile.checkPhoneEmailAddress(true);
        });

        $("#tenNguoiNhan").change(function (e) {
            transferViaMobile.checkRecipientName(true);
        });

        $("#desc").change(function (e) {
            transferViaMobile.checkDescriptionSpecial(true);
        });

        $("#btn-back-on-step-1").click(function () {
            transferViaMobile.goBack();
        });

        transferViaMobile.lblAmount = VIB.LocalizeString.LblAmount;

        // $("#desc").keypress(function (evt) {
        //     var arrayCharacter = [33, 64, 35, 36, 37, 94, 38, 42, 126];
        //     var charCode = (evt.which) ? evt.which : event.keyCode;
        //     if (arrayCharacter.findIndex(function (x) { return x === charCode }) !== -1)
        //         return false;
        //     return true;
        // });

        $("#tenNguoiNhan").keypress(function (evt) {
            var arrayCharacter = [33, 64, 35, 36, 37, 94, 38, 42, 126];
            var charCode = (evt.which) ? evt.which : event.keyCode;
            if (arrayCharacter.findIndex(function (x) { return x === charCode }) !== -1)
                return false;
            return true;
        });

        $("#soTien").change(function () {
            transferViaMobile.validateSoTien(true)
        });

        transferViaMobile.processEnter("step_1", "btnOnStep1");
        transferViaMobile.processEnter("step_2", "btn-go-to-step-3");
        transferViaMobile.processEnter("step_3", "btnContinue");
        transferViaMobile.lblAmount = VIB.LocalizeString.LblAmount;

        Util.InitAmountControlEvent("soTien", "accountList", "txtAmountCCY");
        Util.SetAmountFormat("soTien");
    }
}

function clearCheckedIBABankNameBankCode(isMidBank) {
    if (isMidBank) {
        $("#swiftCodeMid").val("");
        $("#bankNameMid").val("");
        $(".mid-search-result-other").hide();
        Util.SetFieldErrorMessage("swiftCodeMid");
        Util.SetFieldErrorMessage("bankNameMid");
    } else {
        $("#swiftCode").val("");
        $("#bankName").val("");
        $(".search-result-other").hide();
        Util.SetFieldErrorMessage("swiftCode");
        Util.SetFieldErrorMessage("bankName");
    }
}

function openModal(event) {
    $('.daily').find(".dropdown-modal").hide();
    $('.dropdown').removeClass('open');
    // closed autocomplete search
    $('.form-group.search-autocomplete').each(function () {
        $(this).find('.dropdown-menu').hide();
        if ($.trim($(this).find('input').val()).length == 0) {
            $(this).find('.formLabel').removeClass('formTop');
        }
    });
    $(event.currentTarget).parents('.daily').find(".dropdown-modal").show();
    var date = new Date();
    date.setDate(date.getDate());
    $(event.currentTarget).parents('.daily').find('.datepickermy').datepicker({
        orientation: "top",
        format: "dd/mm/yyyy",
        startDate: date,
        autoclose: true,
        todayHighlight: true,
        weekStart: 1
    });
    $(event.currentTarget).parents('.daily').find('#datepickermy').datepicker({
        orientation: "top",
        format: "dd/mm/yyyy",
        startDate: moment(dtnow, "DD/MM/YYYY").format('DD/MM/YYYY'),
        autoclose: true,
        todayHighlight: true,
        weekStart: 1
    });
    //getDaySelectedByDatepicker();
    $(event.currentTarget).parents('.daily').find('.datepicker-apply .datepicker-edit').hide();
    event.stopPropagation();
}

function closedModal(event) {

    if (event.currentTarget.className != 'close') {
        var checkError = false;
        var scheduleType = $("input[name=transfer-option2]:checked").attr("data-value");
        var scheduleDate = "", scheduleRegularFreq = "", scheduleRegularEndType = "", scheduleRegularEndValue = "";

        if (scheduleType === ScheduleType.Scheduled) {
            scheduleRegularFreq = $("#scheduleRegularFreq .item1.selected").attr("data-value");
            if (!scheduleRegularFreq) {
                Util.SetFieldErrorMessage("scheduleRegularFreq", VIB.LocalizeString.InvalidScheduleRegularFreq);
                checkError = true;
            }
            else {
                Util.SetFieldErrorMessage("scheduleRegularFreq");
                checkError = false;
            }
            scheduleDate = $("#startDate").val();
            if (!scheduleDate) {
                Util.SetFieldErrorMessage("startDate", VIB.LocalizeString.InvalidSelectedDate);
                checkError = true;
            }
            else if (scheduleDate && !DateTimeUtil.IsValidDate(scheduleDate)) {
                Util.SetFieldErrorMessage("startDate", VIB.LocalizeString.InValidDate);
                checkError = true;
            }
            else {
                Util.SetFieldErrorMessage("startDate");
                checkError = false;
            }
            scheduleRegularEndType = $("#dropdownPopup .list .item1.selected").attr("data-value");
            if (!scheduleRegularEndType) {
                Util.SetFieldErrorMessage("dropdownPopup", VIB.LocalizeString.InvalidScheduleRegularEndType);
                checkError = true;
            }
            else {
                Util.SetFieldErrorMessage("dropdownPopup");
                checkError = false;
            }

            if (scheduleRegularEndType !== ScheduleRegularEndType.NoEnd) {
                if (scheduleRegularEndType === ScheduleRegularEndType.EndAfter) {
                    scheduleRegularEndValue = $("#endTransferTime").val();
                    if (!scheduleRegularEndValue) {
                        Util.SetFieldErrorMessage("endTransferTime", VIB.LocalizeString.InvalidEndAfterNumber);
                        checkError = true;
                    }
                    else {
                        Util.SetFieldErrorMessage("endTransferTime");
                        checkError = false;
                    }
                } else if (scheduleRegularEndType === ScheduleRegularEndType.EndOn) {
                    scheduleRegularEndValue = $("#loopAfterDatePicker").val();
                    if (!scheduleRegularEndValue) {
                        Util.SetFieldErrorMessage("loopAfterDatePicker", VIB.LocalizeString.InvalidSelectedDate);
                        checkError = true;
                    }
                    else if (!DateTimeUtil.IsValidDate(scheduleRegularEndValue)) {
                        Util.SetFieldErrorMessage("loopAfterDatePicker", VIB.LocalizeString.InValidDate);
                        checkError = true;
                    }
                    else if (moment(scheduleRegularEndValue, "DD/MM/YYYY") < moment(dtnow, "DD/MM/YYYY")) {
                        Util.SetFieldErrorMessage("loopAfterDatePicker", VIB.LocalizeString.InvalidPastDate);
                        checkError = true;
                    }
                    else {
                        Util.SetFieldErrorMessage("loopAfterDatePicker");
                        checkError = false;
                    }
                }
            }
        }
        if (!checkError) {

            var $noApplyList = $(event.currentTarget).parents('.daily').find('.noApply');
            for (var i = 0; i < $noApplyList.length; i++) {
                var $noApply = $($noApplyList[i]);
                var $applyInputID = $noApply.data('id');
                $('#' + $applyInputID).text($noApply.val());
            }
            $(event.currentTarget).parents('.daily').find('.datepicker-apply').show();
            $(event.currentTarget).parents('.daily').find('.datepicker-apply .datepicker-edit').show();
            $(event.currentTarget).parents('.dropdown-modal').hide();
        }
        transferOther.isClosePopupDefault = false;
    }
    else {
        if (transferOther.isClosePopupDefault) {
            var lstradio = $("input[type=radio][name=transfer-option2]");
            lstradio[0].checked = true;
            $('.datepicker-apply').hide();
            $("#endDate").text('');
            $("#datepickermy").datepicker("setDate", null);
            $('input.datepicker-vs3').datepicker("setDate", null);
            $("#scheduleRegularFreqGroup .caption").text('');
            $("#scheduleRegularFreqGroup .item1").removeClass('selected');
            $('.modal').find('.formLabel').removeClass('formTop');
            $('.modal').find('input').val('');
            $("#dropdownPopup .caption").text('');
            $("#dropdownPopup .item1").removeClass('selected');
            $('.sub-transf').hide();
        }
        else {
            $(event.currentTarget).parents('.daily').find('.datepicker-apply').show();
            $(event.currentTarget).parents('.daily').find('.datepicker-apply .datepicker-edit').show();
            var endDate = $("#endDate").text();
            $("#datepickermy").datepicker("setDate", endDate);
            var startDate = $("#startDateText").text();
            $("#startDate").datepicker("setDate", startDate);
            var loopAfterDatePicker = $("#loopEndText").text();
            $("#loopAfterDatePicker").datepicker("setDate", loopAfterDatePicker);
        }
        $(event.currentTarget).parents('.dropdown-modal').hide();

    }
}

function closedDropModal() {
    $('.dropdown-modal').hide();
    $('.row.options input.radio-custom').each(function () {
        if ($(this).is(":checked")) {
            $(this).parents('.daily').find('.datepicker-apply .datepicker-edit').show();
        } else {
            $(this).parents('.daily').find('.datepicker-apply .datepicker-edit').hide();
        }
    });
}

function clickRowDateModal(event) {
    //$('.form-group .dropdown').removeClass('open');
    event.stopPropagation();
}

function initDropdownEvent(elementId) {
    $("#" + elementId + " .item1").on('click', function () {
        $(this).parent().find(".item1").removeClass('selected');
        var $dropParent = $(this).addClass('selected').parent().parent();
        var text = $(this).clone().children("p").remove().end().text();
        $dropParent.removeClass('open').children('.caption').text(text);
        $dropParent.parent().children('.formLabel').addClass('formTop');
    });
    $("#" + elementId + " .caption").on('click', function () {
        $('.dropdown').removeClass('open');
        if ($(this).parent().hasClass("open")) {
            $(this).parent().removeClass("open");
            return;
        }
        $(this).parent().toggleClass('open');
    });
    $("#" + elementId + " .btn.btn-circle-arrow").on('click', function () {
        $('.dropdown').removeClass('open');
        $('.btn-circle-arrow').not(this).parent('.dropdown').removeClass('open');
        $(this).parent().toggleClass('open');
        $(this).closest('.date-popup.list-dropdown-popup').toggleClass('open');
        event.stopPropagation();
    });
}

function displayHideConfirmationContent(isDisplay) {
    if (isDisplay) {
        $("#confirmationContent").show();
    } else {
        $("#confirmationContent").hide();
    }
}

function validToAccountNumber(self) {
    self.val(self.val().replace(/[^0-9a-zA-Z]/g, ''));
}

function checkSpecialDescriptionCharacter(val) {
    var re = new RegExp(regexTransferDesc);
    return !re.test(val);
}

function checkAccountNameCharacter(val) {
    var re = new RegExp(regexAcctName);
    return !re.test(val);
}

function scrollDate(event) {
    var datepopup = $(event.currentTarget);
    $('html, body').animate({
        scrollTop: (datepopup.closest('.modal-group').offset().top) - 20
    }, 500);

};

var transferLBABulk = {
    Step: 1,
    accountForTransfer: [],
    BulkStateList: [],
    BulkBankList: [],
    BulkBranchList: [],
    isFastBankTransfer: false,
    formModel: {
        selectedBank: {
        },
        selectedBranch: {
        },
        selectedState: {
        },
    },
    OnBranchSelectedBulkUpdate: function (selectedId) {
        var branch = transferLBABulk.BulkBranchList.filter(function (item) { return item.Code === selectedId })[0];
        transferLBABulk.formModel.selectedBranch.code = branch.Code;
        transferLBABulk.formModel.selectedBranch.name = branch.Name;

        $("#otherbankbranch").css('display', 'none');
        if (selectedId == "OTHER") {
            $("#otherbankbranch").css('display', 'block');
        }
    },
    OnBranchSelectedBulk: function (selectedId) {
        var branch = transferLBABulk.BulkBranchList.filter(function (item) { return item.Code === selectedId })[0];
        transferLBABulk.formModel.selectedBranch.code = branch.Code;
        transferLBABulk.formModel.selectedBranch.name = branch.Name;

        $("#otherbankbranch").css('display', 'none');
        if (selectedId == "OTHER") {
            $("#otherbankbranch").css('display', 'block');
        }
        Util.SetFieldErrorMessage("branch");
        Util.SetFieldErrorMessage("txtBranchNameOther");
        $(".branch-selected").show();
    },
    OnStateSelectedBulk: function (selectedId) {
        var state = transferLBABulk.BulkStateList.filter(function (item) { return item.Code === selectedId })[0];
        var current = transferLBABulk.formModel.selectedBank;

        transferLBABulk.formModel.selectedState.code = state.Code;
        transferLBABulk.formModel.selectedState.name = state.Name;

        if (current.code != "000") {
            transferService.GetLBAExtBranchList(current.code, state.Code).done(function (result) {
                if (result.STATUSCODE === StatusCode.Successed) {
                    if (!result.DATA) {
                        result.DATA = [];
                    }
                    var otherBranch = {};
                    otherBranch.Code = "OTHER";
                    otherBranch.Name = VIB.LocalizeString.Other;
                    result.DATA.push(otherBranch);

                    transferLBABulk.BulkBranchList = result.DATA;

                    var sourceBranch = [];
                    result.DATA.map(function (elm) {
                        sourceBranch.push({
                            id: elm.Code,
                            name: elm.Name,
                        });
                    });
                    Util.SetFieldErrorMessage("state");
                    $("#branchPanel").show();
                    autocomplete2($("#branch")[0], sourceBranch,
                        function (selectedId) {
                            transferLBABulk.OnBranchSelectedBulk(selectedId);
                        });
                    $("#branch").val("");
                }
            });
        }

    },
    OnBankSelected: function (selectedId) {
        var selectedBank = transferLBABulk.BulkBankList.filter(function (item) { return item.Code === selectedId })[0];
        if (!selectedBank) {
            return;
        }
        transferLBABulk.formModel.selectedBank.code = selectedBank.Code;
        transferLBABulk.formModel.selectedBank.id = selectedBank.ID;
        transferLBABulk.formModel.selectedBank.name = selectedBank.Name;
        transferLBABulk.formModel.selectedBank.fast = selectedBank.Fast;
        $(".bank-search-result").show();
        Util.InitInputTable();

        var isFastTransferString = transferLBABulk.formModel.selectedBank.fast;//$('input[type=radio][name=transfer-type-bulk]').attr("data-value");
        handleReceivedBankBlukSelected(isFastTransferString);
        // regetAcctTranfer(isFastTransferString);

    },
    ContinueBulk: function () {
        var AcctNo = $("#fromAcc div.selected").attr("data-display-text");
        var fromAcctNo = $("#fromAcc div.selected").attr("data-value");
        if (!fromAcctNo) {
            Util.ShowErrorMessage(VIB.LocalizeString.CheckAcct);
            return;
        }
        var type = $('input[type=radio]:checked').val();

        if (type == 'ListExcel') {
            if ($(uploadFile).val().length > 0) {
                $("#divupload").removeClass("field-error");
                $('#divuploadError').hide();
                //real data
                transferService.SubmitLBulkVIB(fromAcctNo).done(function (res) {
                    if (res.STATUSCODE === StatusCode.Successed) {
                        res.DATA.Amount = res.DATA.amount;
                        res.DATA.Total = res.DATA.totaltransaction;
                        res.DATA.TotalInvalid = resulfUploadFile.DATA.ListInValid.length;
                        res.DATA.TotalValid = resulfUploadFile.DATA.ListValid.length;
                        res.DATA.FromAcctNo = AcctNo;

                        $("#leftContent").hide();
                        $('#btnBack').show();
                        $('#btnSubmitBulk').show();
                        $('#btnContinueBulk').hide();
                        $('#tooltip').hide();
                        $('#contentInputBulk').hide();
                        $('#tabNavigation').hide();

                        $('#btnSubmitBulk').show();
                        $('#btnBack').show();

                        $("#reviewBulk").html('');
                        $("#bulkReviewTemplate").tmpl(res.DATA).appendTo($("#reviewBulk"));
                        $('#reviewBulk').show();
                        scrollViewport();
                        var otpData = {
                            IsPopup: false,
                        }
                        if (res.DATA.transactionsigning == true) {
                            otpData.TransactionSigning = res.DATA.transactionsigning;
                            otpData.TransactionId = res.DATA.transactionid;
                        }
                        $("#otpTemplate").tmpl(otpData).appendTo($("#otpContentBulk"));

                        Util.RegisterOTPEvent();

                        $('#btnGetOTP').click(function () {
                            transferService.GetOTPLBulkVIB().done(function (res) {
                                Util.ShowSuccessMessage(res);
                            });
                        });
                        initTransBulkEvent();
                        var DATAOBJ = {};
                        DATAOBJ.ListValid = res.DATA.transaction.filter(function (el) {
                            return el.status == "000000";
                        });
                        DATAOBJ.ListInValid = res.DATA.transaction.filter(function (el) {
                            return el.status != "000000";
                        });
                        DATAOBJ.ListAll = res.DATA.transaction;
                        resulfValidate.DATA = DATAOBJ;
                        resulfValidate.ShowFilter = resulfUploadFile.ShowFilter;;
                    } else {
                        Util.ShowErrorMessage(res.MESSAGE);
                    }
                });
            } else {
                $("#divupload").addClass("field-error");
                $('#divuploadError').show();
                return;
            }
        } else {
            if (addRowListData.length == 0) {
                Util.ShowErrorMessage(VIB.LocalizeString.InputListOnline);
                return;
            } else if (addRowListData.length < 2) {
                Util.ShowErrorMessage(VIB.LocalizeString.InputListOnline1);
                return;
            } else {
                transferService.SubmitLBulkVIB(fromAcctNo).done(function (res) {
                    if (res.STATUSCODE === StatusCode.Successed) {
                        res.DATA.FromAcctNo = AcctNo;
                        $("#leftContent").hide();
                        $('#btnBack').hide();
                        $('#btnSubmitBulk').show();

                        $('#btnContinueBulk').hide();
                        $('#tooltip').hide();
                        $('#contentInputBulk').hide();
                        $('#tabNavigation').hide();
                        $("#reviewBulk").html('');
                        $('#btnSubmitBulk').show();
                        $('#btnBack').show();
                        $("#reviewContentBulkListOnlineTemplate").tmpl(res.DATA).appendTo($("#reviewBulk"));
                        $('#reviewBulk').show();
                        var renderData = {
                            TransactionSigning: res.DATA.transactionsigning,
                            TransactionId: res.DATA.transactionid
                        }
                        $("#otpTemplate").tmpl(renderData).appendTo($("#otpContentBulk"));
                        scrollViewport();
                        Util.RegisterOTPEvent();
                        $('#btnGetOTP').click(function () {
                            transferService.GetOTPLBulkVIB().done(function (res) {
                                Util.ShowSuccessMessage(res);
                            });
                        });

                        // Hien thi du lieu cho popup Detais
                        $("#resultDetailsPopup").html('');
                        var DATAOBJ = {};
                        DATAOBJ.ListValid = res.DATA.transaction.filter(function (el) {
                            return el.status == "000000";
                        });
                        DATAOBJ.ListInValid = res.DATA.transaction.filter(function (el) {
                            return el.status != "000000";
                        });
                        DATAOBJ.ListAll = res.DATA.transaction;

                        if (!DATAOBJ.ListAll) {
                            DATAOBJ.ListAll = [];
                        }

                        //for (var i = 0; i < DATAOBJ.ListAll.length; ++i) {
                        //    var data = DATAOBJ.ListAll[i];
                        //    if (data.transfermethod === "CITAD") {
                        //        data.transfermethod = VIB.LocalizeString.Citad;
                        //    } else if (data.transfermethod === "NAPAS") {
                        //        data.transfermethod = VIB.LocalizeString.Napas;
                        //    }
                        //}

                        resulfDetailsPopup.DATA = DATAOBJ;
                        resulfDetailsPopup.TotalAmount = res.DATA.totalamount;
                        resulfDetailsPopup.Valid = res.DATA.totaltransactionvalid;
                        resulfDetailsPopup.ALL = res.DATA.totaltransaction;

                        resulfValidate.DATA = DATAOBJ;
                        resulfValidate.ShowFilter = false;
                        resulfUploadFile.DATA = resulfValidate.DATA;
                    } else {
                        Util.ShowErrorMessage(res.MESSAGE);
                    }
                });
            }
        }
    },
    SunmitBulk: function () {
        var otp = $("#txtOtp1").val() + $("#txtOtp2").val() + $("#txtOtp3").val() + $("#txtOtp4").val() + $("#txtOtp5").val() + $("#txtOtp6").val();
        if (otp.length !== 6) {
            Util.SetOTPErrorMessage(true, VIB.LocalizeString.EmptyOTP);
            return;
        }
        //real
        transferService.ConfirmOTPLBulkVIB(otp).done(function (result) {
            if (result.STATUSCODE === StatusCode.Successed) {
                displayTransferResultContent(result);
            } else {
                if (result.ALLOWRETRYOTP) {
                    Util.ShowErrorMessage(result.MESSAGE);
                    return null;
                } else {
                    displayTransferResultContent(result, true);
                }
            }
        });
    },
    FilterActive: function () {
        var key = $('input[name="name2"]:checked').val();
        $("#listReciverFile").html('');
        var RESULT = { DATA: {} };
        if (key == "all") {
            RESULT.DATA.DATAFILTER = resulfUploadFile.DATA.ListAll;

        } else if (key == "valid") {
            RESULT.DATA.DATAFILTER = resulfUploadFile.DATA.ListValid;
        }
        else {
            RESULT.DATA.DATAFILTER = resulfUploadFile.DATA.ListInValid;
        }

        $("#listReciverFileTemplate").tmpl(RESULT).appendTo($("#listReciverFile"));
        eventListOnline();
    },
    ViewDetail: function (el) {
        $("#detailSlide").html('');
        $("#viewDetailBulkVIBTemplate").tmpl(resulfUploadFile).appendTo($("#detailSlide"));
        eventListOnline();
        $('.dropdown-menu').on("click", function (e) {
            e.stopPropagation();
        });
        openSlidePanel(el);
        scrollViewport();
    },
    ViewDetail2: function (el) {
        $("#leftContent").hide();
        $("#detailSlide2").html('');
        //var renderData = {
        //    DATA: {
        //        ListAll: []
        //    },
        //    ShowFilter: false,
        //    //Mode: "VALID"
        //}
        //if (resulfValidate.DATA && resulfValidate.DATA.ListValid) {
        //    renderData.DATA.ListAll = resulfValidate.DATA.ListValid;
        //}

        $("#viewDetailBulkVIBTemplate").tmpl(resulfUploadFile).appendTo($("#detailSlide2"));

        eventListOnline();
        $('.dropdown-menu').on("click", function (e) {
            e.stopPropagation();
        });
        openSlidePanel(el);
        scrollViewport();
    }
}
var resulfUploadFile = {};
var addRowListData = [];
var resulfValidate = {};
var isUploadSuccess = false;
// du lieu details giao dich, dung hien thi tren popup
var resulfDetailsPopup = {};
function s2ab(s) {
    var buf = new ArrayBuffer(s.length);
    var view = new Uint8Array(buf);
    for (var i = 0; i < s.length; i++) view[i] = s.charCodeAt(i) & 0xFF;
    return buf;
}

function formatAmountInput(e) {
    if (e) {
        var patern = ",";
        $(e).val(function (index, value) {
            if (/^0/.test(value)) {
                return '';
            }
            return value
                .replace(/\D/g, "")
                .replace(/\B(?=(\d{3})+(?!\d))/g, patern)
                ;
        });
    }
}

function checkContinueStep() {
    var type = $('input[type=radio]:checked').val()
    var fromAcctNo = $("#fromAcc div.selected").attr("data-value");
    var file = $('#uploadFile')[0].files[0];
    if (type == 'ListExcel') {
        if (fromAcctNo && file && isUploadSuccess && ($("#btnContinueBulk").attr("data-isregisteronline") !== "Y")) {
            $("#btnContinueBulk").attr("data-isregisteronline") !== "Y";
            $('#btnContinueBulk').removeAttr('disabled');
        }
        else {
            // $('#btnContinueBulk').attr('disabled', false);
        }
    } else {
        var maxTrans = VIB.LocalizeString.MaxTransLBABULK;
        if (addRowListData.length >= 2 && addRowListData.length <= parseInt(maxTrans) && fromAcctNo && ($("#btnContinueBulk").attr("data-isregisteronline") !== "Y")) {
            $('#btnContinueBulk').removeAttr('disabled');
        }
        else {
            // $('#btnContinueBulk').attr('disabled', false);
        }
    }
}

function txtAcctNoChange(e) {
    var self = $(this);
    self.val(self.val().replace(/[^0-9\.]/g, ''));
    if ((e.which != 46 || self.val().indexOf('.') != -1) && (e.which < 48 || e.which > 57)) {
        e.preventDefault();
    }
}

function txtAmountChange(id) {
    var MaxAmountNapas = VIB.LocalizeString.MaxAmountNapas;
    var elementName = id.toString();
    var amount = $("#txtAmount" + elementName).val();
    var transType = getTransferType(elementName);
    if (transType == "napas") {
        if (parseFloat(amount.replace(new RegExp(",", 'g'), "")) > parseInt(MaxAmountNapas)) {
            // $("#txtAmount" + elementName).val("");
            Util.SetFieldErrorMessage("txtAmount", VIB.LocalizeString.ErrorAmout);
        } else {
            Util.SetFieldErrorMessage("txtAmount");
        }
    } else {
        if (amount) {
            Util.SetFieldErrorMessage("txtAmount");
        }
    }
    checkContinueAdd(elementName);
}

function acctNoChangeBulk(id) {
    var elementName = id.toString();
    var no = $("#txtAcctNo" + elementName).val();
    var AcctNo = $("#fromAcc div.selected").attr("data-display");

    if (no == "") {
        checkContinueAdd(elementName);
        return;
    }
    no = no.trim();
    if (AcctNo === no) {
        Util.ShowErrorMessage(VIB.LocalizeString.TrungTkCt);
        $("#txtAcctNo" + elementName).val("");
        $("#txtAcctName" + elementName).val("");
        return;
    }
    var indexOfArr = addRowListData.findIndex(function (i) { return i.ToAcct === no });
    if (indexOfArr > -1) {
        Util.ShowErrorMessage(VIB.LocalizeString.TrungTk);
        $("#txtAcctNo" + elementName).val("");
        $("#txtAcctName" + elementName).text("");
        return;
    } else {
        var transferType = getTransferType("");
        if (transferType == "napas") {
            var current = transferLBABulk.formModel.selectedBank;
            var bankCode = current.code;
            if (bankCode) {
                transferService.GetFastTransferAccountInfo(no, bankCode).done(function (result) {
                    if (result.STATUSCODE === StatusCode.Successed) {
                        var acctName = result.DATA.AcctName;
                        $("#txtAcctNo" + elementName).val(no);
                        $("#txtAcctName" + elementName).text(acctName);
                        $("#lbAcctName" + elementName).addClass('formTop');
                        Util.SetFieldErrorMessage("txtAcctNo");
                        $(".hide-input-popup").show();
                    } else {
                        Util.ShowErrorMessage(result.MESSAGE);
                        $("#txtAcctNo" + elementName).val("");
                        $("#txtAcctName" + elementName).text("");
                        $("#lbAcctName" + elementName).removeClass('formTop');

                    }
                    checkContinueAdd(elementName);
                });
            } else {
                $("#txtAcctNo" + elementName).val("");
            }
        } else {
            $("#txtAcctNo" + elementName).val(no);
            if (no) {
                Util.SetFieldErrorMessage("txtAcctNo");
            }
        }
    }
    checkContinueAdd(elementName);
}

function coverAddRowListData(data) {
    var dataRes = [];
    for (i = 0; i < data.length; i++) {
        dataRes.push({
            "acctid": data[i].ToAcctId,
            "amount": parseFloat(data[i].Amount.replace(new RegExp(",", 'g'), "")),
            "description": data[i].Content
        });
    }
    return dataRes;
}

function clickDeleteBulk(id) {
    idDelete = id;
    $("#popupDelete").modal("toggle");
}

function deleteRowList() {
    var elementName = idDelete.toString();
    var render = {};
    render.Data = addRowListData;
    var indexOfArr = addRowListData.findIndex(function (i) { return i.ToAcct === elementName });
    if (indexOfArr > -1) {
        var tempid = addRowListData.filter(function (i) { return i.ToAcct === elementName })[0].Tempid;
        transferService.RemoveAccountLBulkVIB(tempid).done(function (res) {
            if (res.STATUSCODE === StatusCode.Successed) {
                addRowListData.splice(indexOfArr, 1);
                render.Data = addRowListData;
                $("#rowListOnline").html('');
                $("#rowListOnlineTemplate").tmpl(render).appendTo($("#rowListOnline"));
                eventListOnline();
            } else {
                Util.ShowErrorMessage(res.MESSAGE);
                return;
            }
        });
    }
    $("#rowListOnline").html('');
    $("#rowListOnlineTemplate").tmpl(render).appendTo($("#rowListOnline"));
    eventListOnline();
}

function scrollRowData(_event) {
    var rowdb = $(_event.currentTarget);
    $('html, body').animate({
        scrollTop: rowdb.closest('.modal-group').offset().top - rowdb.closest('.modal-group').height()
    }, 500);
    rowdb.closest('.modal-group').find('.first-input-spec').focus();
};

function editRowList(id, _this) {
    var transferType = getTransferType("");
    $("#txtTransType").val(transferType);
    getInputAddNewRow("");
    var elementName = id.toString();
    var render = {};
    var current = transferLBABulk.formModel.selectedBank;
    // Validate
    if (!inputAddNewRow.ToBankName) {
        if (current.code === "OTHER") {
            Util.SetFieldErrorMessage("txtReceivedBank", VIB.LocalizeString.ERRBANKBLANK);
            return;
        }
        Util.SetFieldErrorMessage("receivedBankBulk", VIB.LocalizeString.ERRBANKBLANK);
        return;
    }
    if (transferType === "napas") {
        if (!inputAddNewRow.ToAcct) {
            Util.SetFieldErrorMessage("txtAcctNo", VIB.LocalizeString.InputAcct);
            return;
        }
        if (!inputAddNewRow.Amount) {
            Util.SetFieldErrorMessage("txtAmount", VIB.LocalizeString.InputAmount);
            return;
        }
    } else {
        if (!inputAddNewRow.StateCode) {
            Util.SetFieldErrorMessage("state", VIB.LocalizeString.ERRCITYBLANK);
            return;
        }
        if (!inputAddNewRow.BranchName) {
            if (transferLBABulk.formModel.selectedBranch && transferLBABulk.formModel.selectedBranch.code === "OTHER") {
                Util.SetFieldErrorMessage("txtBranchNameOther", "Vui lòng nhập Chi Nhánh");
                return;
            }
            Util.SetFieldErrorMessage("branch", "Vui lòng chọn Chi Nhánh");
            return;
        }
        if (!inputAddNewRow.ToAcct) {
            Util.SetFieldErrorMessage("txtAcctNo", VIB.LocalizeString.InputAcct);
            return;
        }
        if (!inputAddNewRow.ToAcctName) {
            Util.SetFieldErrorMessage("txtAcctName", VIB.LocalizeString.InputAcct);
            return;
        }
        Util.SetFieldErrorMessage("txtAmount");
        if (!inputAddNewRow.Amount) {
            Util.SetFieldErrorMessage("txtAmount", VIB.LocalizeString.InputAmount);
            return;
        }
        if ($("#lblErrortxtContent:visible").length > 0) {
            return;
        }
    }

    var indexOfArr = addRowListData.findIndex(function (i) { return i.ToAcct === elementName });
    if (indexOfArr > -1) {
        var tempid = addRowListData.filter(function (i) { return i.ToAcct === elementName })[0].Tempid;
        transferService.AddAccountLBulkVIB(tempid, inputAddNewRow.Amount.replace(new RegExp(",", 'g'), ""), inputAddNewRow.ToAcct, inputAddNewRow.ToAcctName, inputAddNewRow.TransType.toUpperCase(), inputAddNewRow.ToBankCode, inputAddNewRow.ToBankName, inputAddNewRow.StateCode, inputAddNewRow.BranchCode, inputAddNewRow.BranchName, inputAddNewRow.Content).done(function (result) {
            if (result.STATUSCODE === StatusCode.Successed) {
                addRowListData[indexOfArr].ToAcct = inputAddNewRow.ToAcct;
                addRowListData[indexOfArr].ToAcctName = inputAddNewRow.ToAcctName;
                addRowListData[indexOfArr].Amount = inputAddNewRow.Amount;
                addRowListData[indexOfArr].Content = inputAddNewRow.Content;
                addRowListData[indexOfArr].ToBankName = inputAddNewRow.ToBankName;
                addRowListData[indexOfArr].ToBankCode = inputAddNewRow.ToBankCode;
                addRowListData[indexOfArr].TransType = inputAddNewRow.TransType;
                addRowListData[indexOfArr].Tempid = result.DATA.tempid;
                inputAddNewRow.Tempid = result.DATA.tempid;
                addRowListData[indexOfArr].BranchCode = inputAddNewRow.BranchCode;
                addRowListData[indexOfArr].BranchName = inputAddNewRow.BranchName;
                addRowListData[indexOfArr].BranchCode = inputAddNewRow.BranchCode;
                addRowListData[indexOfArr].StateCode = inputAddNewRow.StateCode;
                addRowListData[indexOfArr].StateName = inputAddNewRow.StateName;
                addRowListData[indexOfArr].Fast = inputAddNewRow.Fast;

                render.Data = addRowListData;
                $("#rowListOnline").html('');
                $("#rowListOnlineTemplate").tmpl(render).appendTo($("#rowListOnline"));

                Util.InitInputTable();
                $("#popupUpdate").modal("toggle");
                eventListOnline();
            } else {
                Util.ShowErrorMessage(result.MESSAGE);
                $("#rowListOnline").html('');
                render.Data = addRowListData;
                $("#rowListOnlineTemplate").tmpl(render).appendTo($("#rowListOnline"));

            }
        });
    }
    // $("#rowListOnline").html('');
    // $("#rowListOnlineTemplate").tmpl(render).appendTo($("#rowListOnline"));
    // $("#" + elementName).removeClass("open");
    // $(_this).closest('.modal-group').removeClass('open');
    // checkContinueStep();
    // checkContinueAdd(id);
    // dropDownForm(id);
}

function destroyRowList(_this) {
    var render = {};
    render.Data = addRowListData;
    $("#rowNew").html('');
    $("#rowNewTemplate").tmpl().appendTo($("#rowNew"));
    $("#rowListOnline").html('');
    $("#rowListOnlineTemplate").tmpl(render).appendTo($("#rowListOnline"));
    $(_this).closest('.modal-group').removeClass('open');
    typeaheadBankName("");
    resetInputAddNewRow("");
    checkContinueAdd("");
    checkContinueStep();
    Util.InitInputTable();
    dropDownForm(id);
}

function addClickLink(_this) {
    var maxTrans = VIB.LocalizeString.MaxTransLBABULK; //
    $('.currency').css('display', 'none');
    $("#lbAgriBank").css('display', 'none');
    $("#typeaheadBankName").val('');
    if (addRowListData.length >= parseInt(maxTrans)) {
        Util.ShowErrorMessage(VIB.LocalizeString.ErrorMaxTrans);
    } else {
        resetInputAddNewRow("");
        $(_this).closest('.modal-group').addClass('open');
        inputTable();
        loadDataBranchState("");
    }
    $("#lbAcctName").removeClass('formTop');
    dropDownForm();
    $("#typeaheadBankName").on("focus", function () {
        $("#typeaheadBankName").typeahead('show');
    });
}

function addRowListBulk(_this) {
    var transferType = getTransferType("");
    $("#txtTransType").val(transferType);
    getInputAddNewRow("");
    var current = transferLBABulk.formModel.selectedBank;
    // Validate
    if (!inputAddNewRow.ToBankName) {
        if (current.code === "OTHER") {
            Util.SetFieldErrorMessage("txtReceivedBank", VIB.LocalizeString.ERRBANKBLANK);
            return;
        }
        Util.SetFieldErrorMessage("receivedBankBulk", VIB.LocalizeString.ERRBANKBLANK);
        return;
    }
    if (transferType === "napas") {
        if (!inputAddNewRow.ToAcct) {
            Util.SetFieldErrorMessage("txtAcctNo", VIB.LocalizeString.InputAcct);
            return;
        }
        if (!inputAddNewRow.Amount) {
            Util.SetFieldErrorMessage("txtAmount", VIB.LocalizeString.InputAmount);
            return;
        }
    } else {
        if (!inputAddNewRow.StateCode) {
            Util.SetFieldErrorMessage("state", VIB.LocalizeString.ERRCITYBLANK);
            return;
        }
        if (!inputAddNewRow.BranchName) {
            if (transferLBABulk.formModel.selectedBranch && transferLBABulk.formModel.selectedBranch.code === "OTHER") {
                Util.SetFieldErrorMessage("txtBranchNameOther", VIB.LocalizeString.ERRBRANCHBLANK);
                return;
            }
            Util.SetFieldErrorMessage("branch", VIB.LocalizeString.ERRBRANCHBLANK);
            return;
        }
        if (!inputAddNewRow.ToAcct) {
            Util.SetFieldErrorMessage("txtAcctNo", VIB.LocalizeString.InputAcct);
            return;
        }
        if (!inputAddNewRow.ToAcctName) {
            Util.SetFieldErrorMessage("txtAcctName", VIB.LocalizeString.InputAcct);
            return;
        }
        Util.SetFieldErrorMessage("txtAmount");
        if (!inputAddNewRow.Amount) {
            Util.SetFieldErrorMessage("txtAmount", VIB.LocalizeString.InputAmount);
            return;
        }
        if ($("#lblErrortxtContent:visible").length > 0) {
            return;
        }
    }
    // real data
    transferService.AddAccountLBulkVIB(inputAddNewRow.Tempid, inputAddNewRow.Amount.replace(new RegExp(",", 'g'), ""), inputAddNewRow.ToAcct, inputAddNewRow.ToAcctName, inputAddNewRow.TransType.toUpperCase(), inputAddNewRow.ToBankCode, inputAddNewRow.ToBankName, inputAddNewRow.StateCode, inputAddNewRow.BranchCode, inputAddNewRow.BranchName, inputAddNewRow.Content).done(function (result) {
        if (result.STATUSCODE === StatusCode.Successed) {
            inputAddNewRow.Tempid = result.DATA.tempid;
            var render = {};
            addRowListData.push({
                "ToAcct": inputAddNewRow.ToAcct,
                "ToAcctName": inputAddNewRow.ToAcctName,
                "Amount": inputAddNewRow.Amount,
                "Content": inputAddNewRow.Content,
                "ToBankName": current.name,
                "ToBankCode": current.code,
                "TransType": inputAddNewRow.TransType,
                "Tempid": inputAddNewRow.Tempid,
                "BranchCode": inputAddNewRow.BranchCode,
                "BranchName": inputAddNewRow.BranchName,
                "StateCode": inputAddNewRow.StateCode,
                "StateName": inputAddNewRow.StateName,
                "Fast": inputAddNewRow.Fast
            });
            render.Data = addRowListData;
            $("#rowListOnline").html('');
            $("#rowListOnlineTemplate").tmpl(render).appendTo($("#rowListOnline"));
            $("#popupAdd").modal("toggle");
            //  $("#popupUpdate").modal("toggle");
            // resetInputAddNewRow("");
            eventListOnline();
            //typeaheadBankName(inputAddNewRow.ToAcct);
            // loadDataBranchState(inputAddNewRow.ToAcct);
            // $("#captionState").text(inputAddNewRow.StateName);

            // loadBranch(inputAddNewRow.ToBankCode, inputAddNewRow.StateCode, inputAddNewRow.ToAcct, inputAddNewRow.BranchName, inputAddNewRow.BranchCode)
            // if (inputAddNewRow.BranchCode == "" && inputAddNewRow.BranchCode != "000") {
            //     $("#captionBranch").text(VIB.LocalizeString.Other);
            // }
            // $("#rowNew").html('');
            // $("#rowNewTemplate").tmpl().appendTo($("#rowNew"));
            // typeaheadBankName("");

            // $("#btnSubmit").attr("disabled", true);
            // checkContinueStep();
            // inputTable();
            // $(_this).closest('.modal-group').removeClass('open');
            // resetInputAddNewRow("");
            // checkContinueAdd("");
            // initDropdownEvent();
            // dropDownForm();
        } else {
            Util.ShowErrorMessage(result.MESSAGE);
            // dropDownForm();
        }
    });
    // dropDownForm();
}

var inputAddNewRow = {};
function getInputAddNewRow(id) {
    var currentBank = transferLBABulk.formModel.selectedBank;
    var currentBranch = transferLBABulk.formModel.selectedBranch;
    var currentState = transferLBABulk.formModel.selectedState;
    var ToAcctName = $("#txtAcctName").text();
    if (ToAcctName == "") {
        ToAcctName = $("#txtAcctName").val();
    }
    inputAddNewRow.ToAcct = $("#txtAcctNo").val();
    if (inputAddNewRow.ToAcct) {
        inputAddNewRow.ToAcct = inputAddNewRow.ToAcct.trim();
    }
    inputAddNewRow.ToAcctName = ToAcctName;
    inputAddNewRow.Amount = $("#txtAmount").val();
    inputAddNewRow.Content = $("#txtContent").val();
    if (currentBank.code === 'OTHER') {
        inputAddNewRow.ToBankName = $("#txtReceivedBank").val();
        inputAddNewRow.ToBankCode = "000";
    } else {
        inputAddNewRow.ToBankName = currentBank.name;
        inputAddNewRow.ToBankCode = currentBank.code;
    }
    inputAddNewRow.TransType = $("#txtTransType").val();
    inputAddNewRow.Tempid = $("#txtTempid").val();
    inputAddNewRow.StateName = currentState.name;
    inputAddNewRow.StateCode = currentState.code;
    if (currentBranch.code == "OTHER") {
        inputAddNewRow.BranchCode = "";
        inputAddNewRow.BranchName = $("#txtBranchNameOther").val();
    } else {
        inputAddNewRow.BranchCode = currentBranch.code;
        inputAddNewRow.BranchName = currentBranch.name;
    }

    inputAddNewRow.Fast = currentBank.fast;
    var branhCode = $("#txtBranchCode").val();
    var bankCode = $("#txtToBankCode").val();
    if (branhCode == "OTHER" && bankCode == "000") {
        inputAddNewRow.BranchName = $("#txtBranchNameOther").val();
    }
}

function resetHtmlAddRow(elementName) {
    transferLBABulk.formModel.selectedBank = {};
    transferLBABulk.formModel.selectedBranch = {};
    transferLBABulk.formModel.selectedState = {};

    $("#txtAcctNo" + elementName).val("");
    $("#txtAcctName" + elementName).text("");
    $("#txtAcctName" + elementName).val("");
    $("#txtToBankName" + elementName).val("");
    $("#txtContent" + elementName).val("");
    $('#btnEdit').attr('disabled', true);
    $("#state").val('');
    $("#branch").val('');
    $("#receivedBankBulk").val('');
}

function loadDataToPopup(elementName) {
    var indexOfArr = addRowListData.findIndex(function (i) { return i.ToAcct === elementName });
    var renderData = {};
    $("#popupUpdate").html('');
    $("#inputTranferTypeBulk").html('');
    $("#inputTranferTypeBulkUpdate").html('');
    if (indexOfArr > -1) {
        renderData.DATA = addRowListData.find(function (i) { return i.ToAcct === elementName });
        $("#popupUpdate").empty();
        $("#popupUpdateTemplate").tmpl(renderData).appendTo($("#popupUpdate"));

        transferLBABulk.formModel.selectedBank = {
            code: renderData.DATA.ToBankCode,
            fast: renderData.DATA.Fast,
            name: renderData.DATA.ToBankName
        };
        transferLBABulk.formModel.selectedState = {
            code: renderData.DATA.StateCode,
            name: renderData.DATA.StateName
        };

        transferLBABulk.formModel.selectedBranch = {
            code: renderData.DATA.BranchCode,
            name: renderData.DATA.BranchName
        };

        if (renderData.DATA.TransType == 'citad') {
            transferService.GetLBAExtBranchList(renderData.DATA.ToBankCode, renderData.DATA.StateCode).done(function (result) {
                if (result.STATUSCODE === StatusCode.Successed) {
                    if (!result.DATA) {
                        result.DATA = [];
                    }
                    var otherBranch = {};
                    otherBranch.Code = "OTHER";
                    otherBranch.Name = VIB.LocalizeString.Other;
                    result.DATA.push(otherBranch);
                    transferLBABulk.BulkBranchList = result.DATA;

                    var sourceBranch = [];
                    result.DATA.map(function (elm) {
                        sourceBranch.push({
                            id: elm.Code,
                            name: elm.Name,
                        });
                    });
                    $("#branch").html('');
                    $("#inputCitadTemplate").tmpl().appendTo($("#inputTranferTypeBulkUpdate"));
                    loadState();
                    loadBank();
                    autocomplete2($("#branch")[0], sourceBranch,
                        function (selectedId) {
                            transferLBABulk.OnBranchSelectedBulkUpdate(selectedId);
                        });
                    $("#state").val(renderData.DATA.StateName);
                    $("#state").prev().addClass('formTop');
                    $("#branch").val(renderData.DATA.BranchName);
                    $("#branch").prev().addClass('formTop');
                    $("#txtAcctNo").val(renderData.DATA.ToAcct);
                    $("#txtAcctNo").prev().addClass('formTop');
                    $("#txtAcctName").val(renderData.DATA.ToAcctName);
                    $("#txtAcctName").prev().addClass('formTop');
                    $("#txtToBankName").val(renderData.DATA.ToBankName);
                    $("#txtToBankName").prev().addClass('formTop');
                    $("#txtContent").val(renderData.DATA.Content);
                    $("#txtContent").prev().addClass('formTop');
                    $("#txtAmount").val(renderData.DATA.Amount);
                    $("#txtAmount").prev().addClass('formTop');

                    if (renderData.DATA.ToBankCode === "OTHER") {
                        $("#receivedBankBulk").val(VIB.LocalizeString.Other);
                    } else {
                        $("#receivedBankBulk").val(renderData.DATA.ToBankName);
                    }

                    if ($.trim($("#txtAmount").val()).length == 0) {
                        $("#txtAmount").parent().children('.formLabel').removeClass('formTop');
                        $("#txtAmount").parent().children('.currency').hide();
                        $("#txtAmount").parent().children('.hideLabel').show();
                    } else if ($("#txtAmount").hasClass('currency-right')) {
                        $("#txtAmount").parent().children('.currency').show().css({ "left": "auto", 'right': 0 });
                        $("#txtAmount").css('padding-right', '13px');
                    } else {
                        $("#txtAmount").parent().children('.currency').show().css('left', $("#txtAmount").getTextSize()[0]);
                    }
                    $("#branchPanel").show();
                    $(".branch-selected").show();
                    Util.InitInputTable();
                }
            });
        } else if (renderData.DATA.TransType == 'napas') {
            $("#inputNapasTemplate").tmpl().appendTo($("#inputTranferTypeBulkUpdate"));
            loadBank();
            $("#txtAcctNo").val(renderData.DATA.ToAcct);
            $("#txtAcctNo").prev().addClass('formTop');
            $("#txtAcctName").text(renderData.DATA.ToAcctName);
            $("#txtAcctName").prev().addClass('formTop');
            $("#txtToBankName").val(renderData.DATA.ToBankName);
            $("#txtToBankName").prev().addClass('formTop');
            $("#txtContent").val(renderData.DATA.Content);
            $("#txtContent").prev().addClass('formTop');
            $("#txtAmount").val(renderData.DATA.Amount);
            $("#txtAmount").prev().addClass('formTop');

            if (renderData.DATA.ToBankCode == "OTHER") {
                $("#receivedBankBulk").val(VIB.LocalizeString.Other);
            } else {
                $("#receivedBankBulk").val(renderData.DATA.ToBankName);
            }

            if ($.trim($("#txtAmount").val()).length == 0) {
                $("#txtAmount").parent().children('.formLabel').removeClass('formTop');
                $("#txtAmount").parent().children('.currency').hide();
                $("#txtAmount").parent().children('.hideLabel').show();
            } else if ($("#txtAmount").hasClass('currency-right')) {
                $("#txtAmount").parent().children('.currency').show().css({ "left": "auto", 'right': 0 });
                $("#txtAmount").css('padding-right', '13px');
            } else {
                $("#txtAmount").parent().children('.currency').show().css('left', $("#txtAmount").getTextSize()[0]);
            }
            $(".hide-input-popup").show();
            Util.InitInputTable();
        }
        $("#txtTransType").val(renderData.DATA.TransType);
        $("#txtReceivedBank").val(renderData.DATA.ToBankName);
    }
}

function BackBulk() {
    $("#leftContent").show();
    $('#reviewBulk').css('display', 'none');
    $('#tabNavigation').css('display', 'block');
    $('#contentInputBulk').css('display', 'block');
    $("#leftContent").show();
    $('#btnContinueBulk').css('display', 'inline-block');
    $('#tooltip').css('display', 'block');
    $('#btnBack').css('display', 'none');
    $('#btnSubmitBulk').css('display', 'none');

    $('#btnContinueBulk').css('display', 'inline-block');
    $('#tooltip').css('display', 'block');
    $("#btnNextBulk").attr("disabled", false);
    scrollViewport();
    eventListOnline();
}

function loadState() {
    var source = [];
    transferLBABulk.BulkStateList.map(function (elm) {
        source.push({
            id: elm.Code,
            name: elm.Name,
        });
    });
    autocomplete2($("#state")[0], source,
        function (selectedId) {
            transferLBABulk.OnStateSelectedBulk(selectedId);
        });
}

function loadBank() {
    var isOther = transferLBABulk.BulkBankList.filter(function (item) { return item.Code === "OTHER" }).length > 0
    if (!isOther) {
        var temp = {};
        temp.Code = "OTHER";
        temp.id = "0";
        temp.Name = VIB.LocalizeString.Other;
        temp.fast = "N";
        transferLBABulk.BulkBankList.push(temp);
    }

    var source = [];
    transferLBABulk.BulkBankList.map(function (elm) {
        source.push({
            id: elm.Code,
            name: elm.ID + "-" + elm.Name,
        });
    });
    autocomplete2($("#receivedBankBulk")[0], source, function (selectedId) {
        Util.SetFieldErrorMessage("receivedBankBulk");
        transferLBABulk.OnBankSelected(selectedId);
    });
}

function clickEditbulk(id) {
    //resetErrorPopupADD();
    $("#btnaddRowList").hide();
    $("#btnEdit").show();
    $("#acctLb").addClass("formTop");
    loadDataToPopup(id);
    isupdateList = true;
    $("#popupUpdate").modal();
}

function checkContinueAdd(id) {
    var elementName = id.toString();
    var transferType = getTransferType(elementName);
    var no = $("#txtAcctNo" + elementName).val();
    var amount = $("#txtAmount" + elementName).val();
    var branchName = $("#txtBranchName" + elementName).val();
    var bankCode = $("#txtToBankCode" + elementName).val();
    if (bankCode == "000") {
        branchName = $("#txtBranchNameOther" + elementName).val();
    }
    var bankName = $("#txtToBankName" + elementName).val();
    var stateCode = $("#txtStateCode" + elementName).val();
    if (transferType == "napas") {
        if (no && amount && no != "" && amount != "") {
            $('#addEditRowList' + elementName).removeAttr('disabled');
            $('#addEditRowList' + elementName).addClass("btn-yellow");
        } else {
            $('#addEditRowList' + elementName).attr('disabled', true);
            $('#addEditRowList' + elementName).removeClass("btn-yellow");
        }
    } else {
        if (no && amount && no != "" && amount != "" && bankName && bankName != "" && stateCode && stateCode != "" && branchName != "") {
            $('#addEditRowList' + elementName).removeAttr('disabled');
            $('#addEditRowList' + elementName).addClass("btn-yellow");
        } else {
            $('#addEditRowList' + elementName).attr('disabled', true);
            $('#addEditRowList' + elementName).removeClass("btn-yellow");
        }
    }
}

function loadListOnline() {
    var render = {};
    render.Data = addRowListData;
    $("#rowListOnline").html('');
    $("#rowListOnlineTemplate").tmpl(render).appendTo($("#rowListOnline"));
    $(_this).closest('.modal-group').removeClass('open');

    $("#rowNew").html('');
    $("#rowNewTemplate").tmpl().appendTo($("#rowNew"));
    typeaheadBankName("");

    resetInputAddNewRow("");
    checkContinueAdd("");
    checkContinueStep();
    Util.InitInputTable();
}

function uploadFileClick(_this, event) {
    $(_this).val('');
    event.stopPropagation();
    $(_this).next().next().val("");
    $("#resultUpload").html('');
    // $('#btnContinueBulk').attr('disabled', false);
    if ($("#focusOut"))
        $("#focusOut").focus();
}

function deleteFile() {
    $("#resultUpload").html('');
    // $('#btnContinueBulk').attr('disabled', false);
    if ($("#focusOut"))
        $("#focusOut").focus();
}

function uploadFileChange(_this) {
    if ($(_this).val().length > 0) {
    } else {
        $(".Uploadbtn .file-name").css('display', 'none');
        $("#txtUpload").css('display', 'block');

        $("#divupload").addClass("field-error");
        $('#divuploadError').show();
        return;
    }
    $(_this).next().next().val(_this.value.substring(_this.value.lastIndexOf('/') + 1, _this.value.length).substring(_this.value.lastIndexOf('\\') + 1, _this.value.length));

    var file = $('#uploadFile')[0].files[0];
    $("#resultUpload").html('');

    if (file) {
        uploadCompleted = false;
        $("#divupload").removeClass("field-error");
        $('#divuploadError').hide();
        $("#lbProgressLoad").text("0%");
        $("#progressLoad").css("width", "0%");
        $("#lblTextUpload").text(VIB.LocalizeString.DsTkExcel);
        $("#popupload").modal();
        elapsedTime = 0;
        uploadInterval = setInterval(function () {
            uploadTimer();
        }, 400);
        var resUpload = transferService.UploadfileLBulkVIB(file);
        $.when(resUpload).done(function (resUpload) {
            if (resUpload.STATUSCODE === StatusCode.Successed) {
                if (resUpload.DATA.requirevalidate) {
                    retryValidate(file);
                } else {
                    resetPopupLoad();
                    var DATAOBJ = {};
                    DATAOBJ.ListValid = resUpload.DATA.transaction.filter(function (el) {
                        return el.status == "000000";
                    });
                    DATAOBJ.ListInValid = resUpload.DATA.transaction.filter(function (el) {
                        return el.status != "000000";
                    });
                    DATAOBJ.ListAll = resUpload.DATA.transaction;
                    resulfUploadFile.DATA = DATAOBJ;
                    resulfUploadFile.TotalAmount = resUpload.DATA.totalamount;
                    resulfUploadFile.Valid = resUpload.DATA.totaltransactionvalid;
                    resulfUploadFile.ALL = resUpload.DATA.totaltransaction;
                    if (resUpload.DATA.transaction) {
                        resulfUploadFile.CCY = resUpload.DATA.transaction[0].ccy;
                    } else {
                        resulfUploadFile.CCY = CCY_VND;
                    }
                    resulfUploadFile.ShowFilter = true;
                    if (resulfUploadFile.Valid === resulfUploadFile.ALL ||
                        resulfUploadFile.InValid === resulfUploadFile.ALL) {
                        resulfUploadFile.ShowFilter = false;
                    }

                    $("#resultUploadTemplate").tmpl(resulfUploadFile).appendTo($("#resultUpload"));
                    //$("#lblTextUpload").text(VIB.LocalizeString.DsTkExcel);
                    isUploadSuccess = true;
                    checkContinueStep();
                }
            } else if (resUpload.STATUSCODE === "500006") {
                resetPopupLoad();
                var DATAOBJ = {};
                DATAOBJ.ListValid = resUpload.DATA.transaction.filter(function (el) {
                    return el.status == "000000";
                });
                DATAOBJ.ListInValid = resUpload.DATA.transaction.filter(function (el) {
                    return el.status != "000000";
                });
                DATAOBJ.ListAll = resUpload.DATA.transaction;
                resulfUploadFile.DATA = DATAOBJ;
                resulfUploadFile.TotalAmount = resUpload.DATA.totalamount;
                resulfUploadFile.Valid = resUpload.DATA.totaltransactionvalid;
                resulfUploadFile.ALL = resUpload.DATA.totaltransaction;
                resulfUploadFile.ShowFilter = true;
                if (resulfUploadFile.Valid === resulfUploadFile.ALL ||
                    resulfUploadFile.InValid === resulfUploadFile.ALL) {
                    resulfUploadFile.ShowFilter = false;
                }
                if (resUpload.DATA.transaction) {
                    resulfUploadFile.CCY = resUpload.DATA.transaction[0].ccy;
                } else {
                    resulfUploadFile.CCY = CCY_VND;
                }
                $("#resultUploadTemplate").tmpl(resulfUploadFile).appendTo($("#resultUpload"));
                isUploadSuccess = true;
                checkContinueStep();
                // disable button - show mes
                if (!(DATAOBJ.ListValid && DATAOBJ.ListValid.length > 1)) {
                    Util.ShowErrorMessage(resUpload.MESSAGE);
                }
            } else {
                resetPopupLoad(true);
                Util.ShowErrorMessage(resUpload.MESSAGE);
                return;
            }
        });
    }
}

function retryValidate(file) {
    transferService.RetryValidate(file).done(function (resValidate) {
        if (resValidate.STATUSCODE === StatusCode.Successed) {
            if (resValidate.END) {
                resetPopupLoad();
                var DATAOBJ = {};
                DATAOBJ.ListValid = resValidate.DATA.transaction.filter(function (el) {
                    return el.status == "000000";
                });
                DATAOBJ.ListInValid = resValidate.DATA.transaction.filter(function (el) {
                    return el.status != "000000";
                });
                DATAOBJ.ListAll = resValidate.DATA.transaction;
                resulfUploadFile.DATA = DATAOBJ;
                resulfUploadFile.TotalAmount = resValidate.DATA.totalamount;
                resulfUploadFile.Valid = resValidate.DATA.totaltransactionvalid;
                resulfUploadFile.ALL = resValidate.DATA.totaltransaction;
                resulfUploadFile.ShowFilter = true;
                if (resulfUploadFile.Valid === resulfUploadFile.ALL ||
                    resulfUploadFile.InValid === resulfUploadFile.ALL) {
                    resulfUploadFile.ShowFilter = false;
                }
                if (resValidate.DATA.transaction) {
                    resulfUploadFile.CCY = resValidate.DATA.transaction[0].ccy;
                } else {
                    resulfUploadFile.CCY = CCY_VND;
                }
                $("#resultUploadTemplate").tmpl(resulfUploadFile).appendTo($("#resultUpload"));
                // $("#lblTextUpload").text(VIB.LocalizeString.DsTkExcel);
                isUploadSuccess = true;
                checkContinueStep();
            } else {
                retryValidate(file);
            }
        } else {
            resetPopupLoad(true);
            Util.ShowErrorMessage(resValidate.MESSAGE);
            return;
        }
    });
}

function displayTransferResultContent(result, isFailed) {
    $('#otpContentBulk').css('display', 'none');
    $('#btnBack').css('display', 'none');
    $("#btnNextBulk").css('display', 'none');
    $("#btnSubmitBulk").css('display', 'none');
    $('#btnFinishBulk').css('display', 'inline-block');
    $('#btnLinkManagerBulk').css('display', 'inline-block');
    if (isFailed) {
        Util.ShowErrorMessage(result.MESSAGE);
        $(".transfer-confirm").hide();
        $(".transfer-result").show();
        $(".transfer-result-titile").hide();
        $(".transfer-error-titile").show();
    } else {

        $("#lblTranNum").html(result.DATA.transnum);
        $("#lbltotalSuccess").html(result.DATA.totaltransactionsuccess);
        $(".transfer-confirm").hide();
        $(".transfer-result").show();
        $(".transfer-result-titile").show();
        $(".transfer-error-titile").hide();
    }
}

function displayHideSubMenu(isDisplay) {
    if (isDisplay) {
        $("#dnn_ContentPane").show();
    } else {
        $("#dnn_ContentPane").hide();
    }
}

function changeRadio() {
    transferService.ClearSessionBULK().done(function (result) {
        if (result.STATUSCODE === StatusCode.Successed) {
        } else {
            Util.ShowErrorMessage(result.MESSAGE);
            return;
        }
    });
    // Excel
    $(".del").click();
    $("#uploadFile").val('');
    $("#divupload").removeClass("field-error");
    $('#divuploadError').hide();
    // Online
    addRowListData = [];
    var render = {};
    render.Data = addRowListData;
    $("#rowListOnline").html('');
    $("#rowListOnlineTemplate").tmpl(render).appendTo($("#rowListOnline"));
}

function getTransferType(elementName) {
    var napas = $("#napas" + elementName + ":checked").val();
    if (typeof napas === 'undefined') {
        return "citad";
    } else {
        return "napas";
    }
}

function changeTransferType(elementName) {
    var type = getTransferType(elementName);
    transferTypeStyle(type, elementName);
}

function loadDataBranchState(elementName) {
    if (elementName == "") {
        $("#stateGroup").html("");
        $("#stateTemplate").tmpl(dataStateBank).appendTo($("#stateGroup" + elementName));
        $("#extBranch").html("");
        $("#extBranchTemplate").tmpl().appendTo($("#extBranch" + elementName));
        initDropdownEvent();
    } else {
        $("#stateGroup_" + elementName).html("");
        $("#stateTemplate").tmpl(dataStateBank).appendTo($("#stateGroup_" + elementName));
    }
}

var isupdateList = false;
function transferTypeStyle(type, elementName) {
    if (isupdateList) {
        $("#inputTranferTypeBulkUpdate").html("");
        if (type == 'citad') {

            $("#inputCitadTemplate").tmpl().appendTo($("#inputTranferTypeBulkUpdate"));
            var source = [];
            transferLBABulk.BulkStateList.map(function (elm) {
                source.push({
                    id: elm.Code,
                    name: elm.Name,
                });
            });
            autocomplete2($("#state")[0], source,
                function (selectedId) {
                    transferLBABulk.OnStateSelectedBulk(selectedId);
                });

        } else {

            $("#inputNapasTemplate").tmpl().appendTo($("#inputTranferTypeBulkUpdate"));
        }
        Util.InitInputTable();

    } else {
        $("#inputTranferTypeBulk").html("");
        if (type == 'citad') {

            $("#inputCitadTemplate").tmpl().appendTo($("#inputTranferTypeBulk"));
            var source = [];
            transferLBABulk.BulkStateList.map(function (elm) {
                source.push({
                    id: elm.Code,
                    name: elm.Name,
                });
            });
            autocomplete2($("#state")[0], source,
                function (selectedId) {
                    transferLBABulk.OnStateSelectedBulk(selectedId);
                });

        } else {

            $("#inputNapasTemplate").tmpl().appendTo($("#inputTranferTypeBulk"));
        }
        Util.InitInputTable();
    }

}

function specialCharactersVN(e) {
    var k;
    document.all ? k = e.keyCode : k = e.which;
    //if((k > 64 && k < 91) || (k > 96 && k < 123) || k == 8 || k == 32 || (k >= 48 && k <= 57))
    //if((k <= 64 && k >= 91) || (k < 96 && k > 123) || k != 8 || k != 32 || (k < 48 && k > 57))
    if ((k > 64 && k < 91) || (k > 96 && k < 123) || k == 8 || k == 32 || (k >= 48 && k <= 57)) {
        return true;
    } else {
        e.preventDefault();
        return false;
    }
}

function loadBranch(bankCode, statecode, elementName, BranchName, BranchCode) {
    if (bankCode != "000") {
        transferService.GetLBAExtBranchList(bankCode, statecode).done(function (result) {
            if (result.STATUSCODE === StatusCode.Successed) {
                var otherBranch = {};
                otherBranch.Code = "";
                otherBranch.Name = VIB.LocalizeString.Other;
                result.DATA.push(otherBranch);
                if (elementName == "") {
                    $("#extBranch" + elementName).empty();
                    $("#extBranchTemplate").tmpl(result).appendTo($("#extBranch" + elementName));
                    $("#extBranchGroup .item1").on('click', function () {
                        // checkContinueButton();
                    });
                    dropDownForm(elementName);
                } else {
                    $("#extBranch_" + elementName).empty();
                    $("#extBranchTemplate").tmpl(result).appendTo($("#extBranch_" + elementName));
                    dropDownForm(elementName);
                }
                $("#captionBranch").text(BranchName);
                if (BranchCode == "" || BranchCode == "000") {
                    $("#captionBranch").text(VIB.LocalizeString.Other);
                }
            }
        });
    } else {
        $("#captionBranch").text(VIB.LocalizeString.Other);
    }
}

var dataSourceLBABank = [];
var dataStateBank = {};
function initEventBankName() {
    var $input = $("#typeaheadBankName");
    transferService.GetLBABankList().done(function (res) {
        if (res.STATUSCODE === StatusCode.Successed) {
            var arrSource = [];
            res.DATA.forEach(function (element) {
                var temp = {};
                temp.code = element.Code;
                temp.id = element.ID;
                temp.name = element.Name;
                temp.fast = element.Fast;
                arrSource.push(temp);
            });
            var temp = {};
            temp.code = "000";
            temp.id = "";
            temp.name = "Khác";
            temp.fast = "N";
            arrSource.push(temp);
            dataSourceLBABank = arrSource;
            $input.typeahead({
                source: arrSource,
                autoSelect: false,
                // set true if want to list option on focus
                showHintOnFocus: "all",
                // set no of items you want here
                items: "all",
            });
        }
    });
    // get states
    transferService.GetLBAStateList().done(function (res) {
        if (res.STATUSCODE === StatusCode.Successed) {
            dataStateBank.DATA = res.DATA;
        }
    });
}

function getLBABranch(bankCode, stateCode) {
    transferService.getLBAExtBranchList(bankCode, stateCode).done(function (res) {
        if (res.STATUSCODE === StatusCode.Successed) {
            return res.DATA;
        }
    });
}

function initDropdownEvent() {
    dropDownForm();
}

function dropDownForm() {
    $('.form-group .dropdownState > .caption').on('click', function () {
        //$('.dropdown').removeClass('open');
        $('.form-group .dropdown > .caption').not(this).parent('.dropdown').removeClass('open');
        $(this).parent().toggleClass('open');
        event.stopPropagation();
    });
    $('.form-group .dropdownBranch > .caption').on('click', function () {
        //$('.dropdown').removeClass('open');
        $('.form-group .dropdown > .caption').not(this).parent('.dropdown').removeClass('open');
        $(this).parent().toggleClass('open');
        event.stopPropagation();
    });

    $(".dropdownState .item1").on('click', function () {
        var parentId = $(this).parent().parent().attr('id');
        var arrParent = parentId.split("_");
        var elementName = "";
        if (typeof arrParent[1] == "undefined") {

        } else {
            elementName = arrParent[1];
        }
        var bankCode = $("#txtToBankCode" + elementName).val();
        if (typeof bankCode === 'undefined' || bankCode === "") {
            Util.ShowInfoMessage("Vui lòng chọn ngân hàng chuyển");
            return;
        }

        $('.branch-other' + elementName).css('display', 'none');
        $('.dropdownState > .list > .item1').removeClass('selected');
        var $dropParent = $(this).addClass('selected').parent().parent();
        $dropParent.removeClass('open').children('.caption').text($(this).clone().children("p").remove().end().text());
        if ($dropParent.hasClass('search')) {
            $dropParent.removeClass('open').find('input[type=text]').val($(this).text());
        } else {
            $dropParent.removeClass('open').children('.caption').text($(this).clone().children("p").remove().end().text());
            var stateCode = $('.dropdownState > .list > .item1.selected').attr("data-value");
            var stateName = $('.dropdownState > .list > .item1.selected').attr("data-display");
            $("#txtStateCode" + elementName).val(stateCode);
            $("#txtStateName" + elementName).val(stateName);
        }
        $(this).parents().children('.formLabel').addClass('formTop');

        var state = $(this).attr("data-value");
        if (bankCode != "000") {
            transferService.GetLBAExtBranchList(bankCode, state).done(function (result) {
                if (result.STATUSCODE === StatusCode.Successed) {
                    var otherBranch = {};
                    otherBranch.Code = "";
                    otherBranch.Name = VIB.LocalizeString.Other;
                    result.DATA.push(otherBranch);
                    if (elementName == "") {
                        $("#extBranch" + elementName).empty();
                        $("#extBranchTemplate").tmpl(result).appendTo($("#extBranch" + elementName));
                        $("#extBranchGroup .item1").on('click', function () {
                            // checkContinueButton();
                        });
                        dropDownForm(elementName);
                    } else {
                        $("#extBranch_" + elementName).empty();
                        $("#extBranchTemplate").tmpl(result).appendTo($("#extBranch_" + elementName));
                        dropDownForm(elementName);
                    }
                }
            });
        }
        initDropdownEvent(elementName);
    });
    $(".dropdownBranch .item1").on('click', function () {
        var parentId = $(this).parent().parent().attr('id');
        var arrParent = parentId.split("_");
        var elementName = "";
        if (typeof arrParent[1] == "undefined") {

        } else {
            elementName = arrParent[1];
        }
        $('.branch-other' + elementName).css('display', 'none');
        $('.dropdownBranch > .list > .item1').removeClass('selected');
        var $dropParent = $(this).addClass('selected').parent().parent();
        if ($dropParent.hasClass('search')) {
            $dropParent.removeClass('open').find('input[type=text]').val($(this).text());
        } else {
            $dropParent.removeClass('open').children('.caption').text($(this).clone().children("p").remove().end().text());
            var branchCode = $('.dropdownBranch > .list > .item1.selected').attr("data-value");
            var branchName = $('.dropdownBranch > .list > .item1.selected').attr("data-display");
            $("#txtBranchCode" + elementName).val(branchCode);
            $("#txtBranchName" + elementName).val(branchName);
            checkContinueAdd(elementName);
            dropDownForm(elementName);
            if (branchCode == "") {
                $('.branch-other' + elementName).css('display', 'block');
                $("#txtBranchName").val("");
                $("#txtBranchName").focus();
            }
        }
        $(this).parents().children('.formLabel').addClass('formTop');
        initDropdownEvent(elementName);
    });
};

function checkOtpBtnStatus(hideTimeMillis) {
    setTimeout(function () {
        if ((hideTimeMillis + getOTPTimeout) > currentTimeInMillis()) {
            checkOtpBtnStatus(hideTimeMillis);
        } else {
            $("#btnOTPGetOTP1").show();
        }
    }, 1000);
}

function currentTimeInMillis() {
    return (new Date()).getTime();
}

function lookup(e) {
    $(e).parent().children().find('input.typeahead').focus();
    $(e).parent().children().find('input.typeahead').typeahead('show');
}

function initTransBulkEvent() {
    $("#typeaheadBankName").blur(function () {
        if ($(this).val() == '') {
            $("#typeaheadBankName").val('');
            $(this).parent().children('label').removeClass('formTop');
        }
    });

    //$('.form-group .dropdown > .caption').on('click', function () {
    //    //$('.dropdown').removeClass('open');
    //    $('.form-group .dropdown > .caption').not(this).parent('.dropdown').removeClass('open');
    //    $(this).parent().toggleClass('open');
    //    event.stopPropagation();
    //});

    $('.list-transaction .tbl-mar-20 .infomation-transaction .modal-group .btn.btn-circle-arrow ').click(function () {
        var caplist = $(this);

        var ypopup = caplist.parents('.modal-group').height() + 20;
        var menuItemPos = caplist.parents('.list-dropdown-popup').position();
        $('.list-transaction').animate({
            scrollTop: (caplist.closest('.row').offset().top) + $('.list-transaction').scrollTop() - $('.list-transaction').offset().top - 200
        }, 500);
    });
    $(document).on('keyup', function (evt) {
        if ((evt.keyCode || evt.which) === 27) {
            $('.dropdown').removeClass('open');
        }
    });

    $(document).on('click', function (evt) {
        if ($(evt.target).closest(".dropdown").length === 0) {
            $('.dropdown').removeClass('open');
        }
    });
    $('#btnOTPGetOTP1').click(function () {
        transferLBABulkService.GetOTPBulkVIB().done(function (result) {
            $("#btnOTPGetOTP1").hide();
            setTimeout(function () {
                checkOtpBtnStatus(currentTimeInMillis());
            }, 400);
        });
    });

    Util.InitInputTable()
    $('#fromAcc .item1').on('click', function () {
        $(this).parent().find(".item1").removeClass('selected');
        var $dropParent = $(this).addClass('selected').parent().parent();
        var text = $(this).clone().children("p").remove().end().text();
        $dropParent.removeClass('open').children('.caption').text(text);
        $dropParent.parent().children('.formLabel').addClass('formTop');
        var type = $('input[type=radio]:checked').val()
        if (type == 'ListExcel') {
            $("#upload").css('display', 'block');
        } else {
            $("#listOnline").css('display', 'block');
        }
        checkContinueStep();
    });

    //  show option conts
    $(function () {
        $('input[type=radio]').each(function () {
            if ($(this).is(":checked")) {
                $('.div' + $(this).attr('target')).show();
            }
        });
        $('.showSingleRadioConts').click(function () {
            $('.targetDiv').hide();
            $('.div' + $(this).attr('target')).show();
        });
    });
    $(function () {
        $('.form-group .dropdown > label').on('click', function () {
            $(this).parents(".dropdown").find('.caption').click();
        });
        $('.dropdown-toggle').on('click', function () {
            $('.dropdown').removeClass('open');
        });
    });
}

function intAmountFormat() {
    $("#txtAmount").autoNumeric('destroy');
    if ($("#fromAcc div.selected").attr("data-Ccy") && $("#fromAcc div.selected").attr("data-Ccy") !== "VND") {
        $("#txtAmount").autoNumeric({ pSign: 's', vMax: '999999999999.99', vMin: '0.00' });
    } else {
        $("#txtAmount").autoNumeric({ pSign: 's', vMax: '999999999999', vMin: '0' });
    }
}

function checkContinueButton() {
    var amount = $("#txtAmount").autoNumeric("get");
    if ($("#fromAcc div.selected").length > 0 && amount > 0 && $("#toAcctName").html().length > 0) {
        setContinueButtonState(false);
    } else {
        setContinueButtonState(true);
    }
}

function eventListOnline() {
    $('tr[data-toggle="toggle-border"]').off("click");
    $('tr[data-toggle="toggle-border"]').click(function () {
        if ($(this).hasClass("toogle-style2")) {
            $(this).closest('.infomation-transaction').siblings().find('.hide').hide();
            $(this).closest(".infomation-transaction").siblings().removeClass("toogle-border");
            $(this).parents(".labels").show();
            $(this).parents(".labels").toggleClass("toogle-style2-active");
            $('tr[data-toggle="toggle-border"]').not(this).parents(".labels").removeClass("toogle-style2-active");
        }
        else {
            $(this).parents(".labels").toggle();
        }
        $(this).parents().next('.hide').toggle();
        $(this).closest(".infomation-transaction").toggleClass("toogle-border");
    });
}

function backViewDetail() {
    closeSlidePanel();
    scrollViewport();
}

function exportExcelLBLUK(mode) {
    var wb = XLSX.utils.book_new();
    wb.Props = {
        Title: "",
        Subject: "",
        Author: "VIB",
        CreatedDate: new Date()
    };
    wb.SheetNames.push("Sheet1");
    var exportData = [];
    var listData = [];
    if (mode === "VALID") {
        listData = resulfUploadFile.DATA.ListValid;
    } else {
        listData = resulfUploadFile.DATA.ListAll;
    }

    //if (resulfValidate.ShowFilter || resulfUploadFile.ShowFilter) {
    //    listData = resulfUploadFile.DATA.ListAll;
    //    //var key = $('input[name="name2"]:checked').val();
    //    //if (key == "all") {
    //    //    listData = resulfUploadFile.DATA.ListAll;
    //    //} else if (key == "valid") {
    //    //    listData = resulfUploadFile.DATA.ListValid;
    //    //} else {
    //    //    listData = resulfUploadFile.DATA.ListInValid;
    //    //}
    //} else {
    //    listData = resulfUploadFile.DATA.ListAll;
    //}

    listData.map(function (element, index) {
        var attribute = {};
        attribute[VIB.LocalizeString.Stt] = index + 1;
        attribute[VIB.LocalizeString.ToAcct] = element.acctno;
        attribute[VIB.LocalizeString.ToAcctName] = element.acctname;
        attribute[VIB.LocalizeString.Amount] = element.amount;
        attribute[VIB.LocalizeString.Status] = element.status === "000000" ? VIB.LocalizeString.Valid : VIB.LocalizeString.Invalid;
        attribute[VIB.LocalizeString.Description] = element.description;
        attribute[VIB.LocalizeString.ToBank] = element.bankname;
        attribute[VIB.LocalizeString.ToBracBank] = element.branchname;
        attribute[VIB.LocalizeString.ToCityBank] = element.state;

        exportData.push(attribute);
    });
    var ws = XLSX.utils.json_to_sheet(exportData, { startRowNo: 1, raw: true });
    wb.Sheets["Sheet1"] = ws;
    var wbout = XLSX.write(wb, { bookType: 'xlsx', type: 'binary' });
    saveAs(new Blob([s2ab(wbout)], { type: "application/octet-stream" }), 'bulk_overview.xlsx');
}

function eventBulkVIB() {
    $('.dropdown > .list > .item1').on('click', function () {
        // $("#btnContinueBulk").attr("disabled", "disabled");
        checkContinueStep();
    });

    // get input file name
    $('.Uploadbtn input[type=file]').on('change', function (event) {
        var parent = $(this).parents('.Uploadbtn');
        var x = $($(this).val().match(/([^\/\\]+)$/)).get(1);
        // file not choosed
        if (typeof x === 'undefined') {
            return false;
        } else {
            $(this).parents('.Uploadbtn').children('.file-name').show();
            $(this).parents('.Uploadbtn').children('.file-name').find('p').html(x);
            $(this).parents('.Uploadbtn').children('.attach-upload').find('.txtUpload').hide();
        }
    });
    //remove file
    $('.file-name .del').click(function () {
        $(this).parents('.Uploadbtn').children('.file-name').hide();
        $(this).parents('.Uploadbtn').children('.file-name').find('p').html("");
        $(this).parents('.Uploadbtn').children('.attach-upload').find('.txtUpload').show();
    });

}

function closeUpdate() {
    isupdateList = false;
}

function addAction() {
    isupdateList = false;
    $("#popupUpdate").html("");
    $("#popupAdd").html("");
    $("#popupAddTemplate").tmpl().appendTo($("#popupAdd"));

    var isOther = transferLBABulk.BulkBankList.filter(function (item) { return item.Code === "OTHER" }).length > 0;
    if (!isOther) {
        var temp = {};
        temp.Code = "OTHER";
        temp.id = "0";
        temp.Name = VIB.LocalizeString.Other;
        temp.fast = "N";
        transferLBABulk.BulkBankList.push(temp);
    }

    var source = [];
    transferLBABulk.BulkBankList.map(function (elm) {
        source.push({
            id: elm.Code,
            name: elm.ID + "-" + elm.Name,
        });
    });
    autocomplete2($("#receivedBankBulk")[0], source, function (selectedId) {
        Util.SetFieldErrorMessage("receivedBankBulk");
        transferLBABulk.OnBankSelected(selectedId);
    });

    $("#btnaddRowList").show();
    $(".bulkSession").css("display", "none");
    $("#lbAgriBank").css("display", "none");
    $("#receivedBankOtherPannel").css("display", "none");

    $("#receivedBankBulk").val("");
    $("#popupAdd").modal();
    scrollViewport();
    Util.InitInputTable();
    resetHtmlAddRow("");
    changeTransferType();
}

function handleReceivedBankBlukSelected(isFastString) {
    var isFast = false;
    $("#lbAgriBank").css('display', 'none');
    var $input = $("#receivedBank");
    var current = transferLBABulk.formModel.selectedBank;
    if (current.code == "204") {
        $("#lbAgriBank").css('display', 'block');
        //$("#fastTransferSelection").hide();

    } else {
        isFast = isFastString === "Y";
    }
    $("#receivedBankOtherPannel").hide();
    if (current && current.code === "OTHER") {
        $("#receivedBankOtherPannel").show();
        //$("#fastTransferSelection").hide();
        isFast = false;
    }

    $('#napas').attr("disabled", false);
    if (isFastString == "Y") {
        $(".bulkSession").css("display", "block");
        $('#napas').trigger('click');
        transferTypeStyle("napas", "");

    } else {
        $(".bulkSession").css("display", "block");

        $('#napas').attr("disabled", true);
        $('#citad').trigger('click');
        transferTypeStyle("citad", "");
    }
}
//Sub function
function formatDate(date) {
    var d = new Date(date),
        month = '' + (d.getMonth() + 1),
        day = '' + d.getDate(),
        year = d.getFullYear();
    if (month.length < 2)
        month = '0' + month;
    if (day.length < 2)
        day = '0' + day;
    return [day, month, year].join('/');
}