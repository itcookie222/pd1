// search autocomplete javascript
function autocomplete2(inp, arr, callback) {
    /*the autocomplete function takes two arguments,
    the text field element and an array of possible autocompleted values:*/
    var currentFocus;
    /*execute a function when someone writes in the text field:*/
    inp.addEventListener("input",
        function(e) {
            showDialog(this, callback);
            // var a, b, i, val = this.value;
            // /*close any already open lists of autocompleted values*/
            // closeAllLists();
            // // if (val==0) { }
            // currentFocus = -1;
            // /*create a DIV element that will contain the items (values):*/
            // a = document.createElement("DIV");
            // a.setAttribute("id", this.id + "autocomplete-list");
            // a.setAttribute("class", "dropdown-menu scroller");
            // /*append the DIV element as a child of the autocomplete container:*/
            // this.parentNode.appendChild(a);
            // /*for each item in the array...*/
            // for (i = 0; i < arr.length; i++) {
            //     /*check if the item starts with the same letters as the text field value:*/
            //     if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
            //     /*create a DIV element for each matching element:*/
            //     b = document.createElement("DIV");
            //     b.className = 'dropdown-item';
            //     /*make the matching letters bold:*/
            //     b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
            //     b.innerHTML += arr[i].substr(val.length);
            //     /*insert a input field that will hold the current array item's value:*/
            //     b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
            //     /*execute a function when someone clicks on the item value (DIV element):*/
            //     b.addEventListener("click", function(e) {
            //         /*insert the value for the autocomplete text field:*/
            //         inp.value = this.getElementsByTagName("input")[0].value;
            //         /*close the list of autocompleted values,
            //         (or any other open lists of autocompleted values:*/
            //         closeAllLists();
            //     });
            //     a.appendChild(b);
            //     }
            // }
        });
    inp.addEventListener("click",
        function(e) {
            showDialog(this, callback);
            // $(inp.previousElementSibling).addClass('formTop');
            //console.log('gg');
            e.stopPropagation();
        });
    inp.addEventListener("blur",
        function (e) {
            Util.SetFieldErrorMessage(inp.id);
            var selectedValue = $(inp).attr("data-input-value");
            var currentValue = $(inp).val();
            if (selectedValue && currentValue) {
                if (selectedValue !== currentValue) {
                    Util.SetFieldErrorMessage(inp.id, "Vui lòng chọn giá trị hợp lệ từ danh sách");
                }
            }
        });
    inp.nextElementSibling.addEventListener("click",
        function(e) {
            //console.log(this);
            $(inp).focus();
            showDialog(inp, callback);
            e.stopPropagation();
        });
    inp.previousElementSibling.addEventListener("click",
        function(e) {
            //console.log(this);
            $(inp).focus();
            showDialog(inp, callback);
            e.stopPropagation();
        });
    /*execute a function presses a key on the keyboard:*/
    inp.addEventListener("keydown",
        function (e) {
            var x = document.getElementById(this.id + "autocomplete-list");
            if (x) x = x.getElementsByTagName("div");
            if (e.keyCode == 40) {
                /*If the arrow DOWN key is pressed,
                increase the currentFocus variable:*/
                currentFocus++;
                /*and and make the current item more visible:*/
                addActive(x);
            } else if (e.keyCode == 38) { //up
                /*If the arrow UP key is pressed,
                decrease the currentFocus variable:*/
                currentFocus--;
                /*and and make the current item more visible:*/
                addActive(x);
            } else if (e.keyCode == 13) {
                /*If the ENTER key is pressed, prevent the form from being submitted,*/
                e.preventDefault();
                if (currentFocus > -1) {
                    /*and simulate a click on the "active" item:*/
                    if (x) x[currentFocus].click();
                }
            }
        });

    inp.addEventListener("keypress",
        function (e) {
            if (!((event.keyCode >= 65) && (event.keyCode <= 90) || (event.keyCode >= 97) && (event.keyCode <= 122) || (event.keyCode >= 48) && (event.keyCode <= 57) || event.keyCode === 32)) {
                event.returnValue = false;
                return;
            }
            event.returnValue = true;
        });

    function showDialog(ctl, callback) {
        var a, b, i, val = ctl.value;
        /*close any already open lists of autocompleted values*/
        closeAllLists(ctl);
        // if (val==0) { }
        currentFocus = -1;
        /*create a DIV element that will contain the items (values):*/
        a = document.createElement("DIV");
        a.setAttribute("id", ctl.id + "autocomplete-list");
        a.setAttribute("class", "dropdown-menu scroller");
        /*append the DIV element as a child of the autocomplete container:*/
        ctl.parentNode.appendChild(a);
        /*for each item in the array...*/
        for (i = 0; i < arr.length; i++) {
            /*check if the item starts with the same letters as the text field value:*/
            var obj = arr[i];
            var invalid = /[°"§%()\[\]{}=\\?´`'#<>|,;.:+_-]+/g;
            var repl = val.replace(invalid, "");
            var pattern = new RegExp(repl, 'gi');
            var tempName = Util.RemoveVietnameseCharacter(obj.name);
            //if (obj.name.substr(0, val.length).toUpperCase() == val.toUpperCase()) {
            if (pattern.test(tempName)) {
                /*create a DIV element for each matching element:*/
                b = document.createElement("DIV");
                b.className = 'dropdown-item';

                /*make the matching letters bold:*/
                b.innerHTML = obj.name.replace(pattern, function (match) {

                    // Replace with the original text, but upper case
                    return "<strong>" + match + "</strong>";

                });
                //b.innerHTML = "<strong>" + obj.name.substr(0, val.length) + "</strong>";
                //b.innerHTML += obj.name.substr(val.length);
                /*insert a input field that will hold the current array item's value:*/
                //b.innerHTML += "<input type='hidden' value='" + obj.id + "'>";
                b.innerHTML += '<input type="hidden" value="' + obj.name + '" data-id="' + obj.id + '">';
                /*execute a function when someone clicks on the item value (DIV element):*/
                b.addEventListener("click",
                    function(e) {
                        /*insert the value for the autocomplete text field:*/
                        var element = this.getElementsByTagName("input")[0];
                        ctl.value = element.value;
                        var id = element.getAttribute('data-id');
                        ctl.setAttribute('data-id', id);
                        ctl.setAttribute('data-input-value', element.value);
                        if (id && callback) {
                            callback(id);
                        }
                        //console.log(ctl);
                        /*close the list of autocompleted values,
                        (or any other open lists of autocompleted values:*/
                        closeAllLists(ctl);
                    });
                a.appendChild(b);
            }
        }
        $(ctl.previousElementSibling).addClass('formTop');
    }

    function addActive(x) {
        /*a function to classify an item as "active":*/
        if (!x) return false;
        /*start by removing the "active" class on all items:*/
        removeActive(x);
        if (currentFocus >= x.length) currentFocus = 0;
        if (currentFocus < 0) currentFocus = (x.length - 1);
        /*add class "autocomplete-active":*/
        x[currentFocus].classList.add("autocomplete-active");
    }

    function removeActive(x) {
        /*a function to remove the "active" class from all autocomplete items:*/
        for (var i = 0; i < x.length; i++) {
            x[i].classList.remove("autocomplete-active");
        }
    }

    // function closeAllLists(elmnt) {
    //     /*close all autocomplete lists in the document,
    //     except the one passed as an argument:*/
    //     var x = document.getElementsByClassName("dropdown-menu scroller");
    //     for (var i = 0; i < x.length; i++) {
    //     if (elmnt != x[i] && elmnt != inp) {
    //         x[i].parentNode.removeChild(x[i]);
    //     }
    //     }
    //     console.log('bb: ' + $(inp).val());
    //     if ($.trim($(inp).val()).length == 0) {
    //         $(inp).parent().children('.formLabel').removeClass('formTop');
    //         $(inp).parent().children('.currency').hide();
    //     } else {
    //         $(inp).parent().children('.formLabel').addClass('formTop');
    //     }
    // }
    /*execute a function when someone clicks in the document:*/
    document.addEventListener("click",
        function(e) {
            closeAllLists(inp);
        });
}

function closeAllLists(inp) {
    /*close all autocomplete lists in the document,
    except the one passed as an argument:*/
    var x = document.getElementsByClassName("dropdown-menu scroller");
    for (var i = 0; i < x.length; i++) {
        if (inp != x[i]) {
            x[i].parentNode.removeChild(x[i]);
        }
    }
    //console.log(inp);
    //console.log('bb: ' + inp.getAttribute('data-id'));
    if ($.trim($(inp).val()).length == 0) {
        $(inp).parent().children('.formLabel').removeClass('formTop');
        $(inp).parent().children('.currency').hide();
    } else {
        $(inp).parent().children('.formLabel').addClass('formTop');
    }
}